
Personal_DAC_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000511c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080052e0  080052e0  000062e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005340  08005340  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005340  08005340  00006340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005348  08005348  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005348  08005348  00006348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800534c  0800534c  0000634c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005350  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000650  2000000c  0800535c  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000065c  0800535c  0000765c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000135a0  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a85  00000000  00000000  0001a5dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  0001d068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d7c  00000000  00000000  0001e1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000223c4  00000000  00000000  0001ef34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c7b  00000000  00000000  000412f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1326  00000000  00000000  00055f73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00127299  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a28  00000000  00000000  001272dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0012bd04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080052c8 	.word	0x080052c8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080052c8 	.word	0x080052c8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80004f8:	b0a6      	sub	sp, #152	@ 0x98
 80004fa:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f000 fd14 	bl	8000f28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f86e 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f000 f9da 	bl	80008bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000508:	f000 f9b8 	bl	800087c <MX_DMA_Init>
  MX_DAC_Init();
 800050c:	f000 f8d4 	bl	80006b8 <MX_DAC_Init>
  MX_TIM6_Init();
 8000510:	f000 f8fc 	bl	800070c <MX_TIM6_Init>
  MX_USART3_UART_Init();
 8000514:	f000 f95a 	bl	80007cc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000518:	f000 f982 	bl	8000820 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 800051c:	f000 f92c 	bl	8000778 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  uint16_t bufferSize = 10;
 8000520:	230a      	movs	r3, #10
 8000522:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
  uint8_t dataBuffer[bufferSize];
 8000526:	f8b7 108e 	ldrh.w	r1, [r7, #142]	@ 0x8e
 800052a:	460b      	mov	r3, r1
 800052c:	3b01      	subs	r3, #1
 800052e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000532:	b28b      	uxth	r3, r1
 8000534:	2200      	movs	r2, #0
 8000536:	4698      	mov	r8, r3
 8000538:	4691      	mov	r9, r2
 800053a:	f04f 0200 	mov.w	r2, #0
 800053e:	f04f 0300 	mov.w	r3, #0
 8000542:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000546:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800054a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800054e:	b28b      	uxth	r3, r1
 8000550:	2200      	movs	r2, #0
 8000552:	461c      	mov	r4, r3
 8000554:	4615      	mov	r5, r2
 8000556:	f04f 0200 	mov.w	r2, #0
 800055a:	f04f 0300 	mov.w	r3, #0
 800055e:	00eb      	lsls	r3, r5, #3
 8000560:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000564:	00e2      	lsls	r2, r4, #3
 8000566:	460b      	mov	r3, r1
 8000568:	3307      	adds	r3, #7
 800056a:	08db      	lsrs	r3, r3, #3
 800056c:	00db      	lsls	r3, r3, #3
 800056e:	ebad 0d03 	sub.w	sp, sp, r3
 8000572:	ab02      	add	r3, sp, #8
 8000574:	3300      	adds	r3, #0
 8000576:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  HAL_UART_Receive_IT(&huart2, dataBuffer, bufferSize);
 800057a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800057e:	461a      	mov	r2, r3
 8000580:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8000584:	4812      	ldr	r0, [pc, #72]	@ (80005d0 <main+0xdc>)
 8000586:	f003 fc55 	bl	8003e34 <HAL_UART_Receive_IT>




  const uint32_t data_stream[16] = { 2048, 2831, 3495, 3939, 4095, 3940, 3497, 2834, 2051, 1267, 602, 157, 0, 153, 595, 1258 };
 800058a:	4b12      	ldr	r3, [pc, #72]	@ (80005d4 <main+0xe0>)
 800058c:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 8000590:	461d      	mov	r5, r3
 8000592:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000594:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000596:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000598:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800059a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800059c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800059e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80005a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint16_t data_stream2[16] = { 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048 };
  const uint32_t data_stream3[16] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	2240      	movs	r2, #64	@ 0x40
 80005aa:	2100      	movs	r1, #0
 80005ac:	4618      	mov	r0, r3
 80005ae:	f004 fe5e 	bl	800526e <memset>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t *) data_stream, 16, DAC_ALIGN_12B_R);
 80005b2:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80005b6:	2300      	movs	r3, #0
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2310      	movs	r3, #16
 80005bc:	2100      	movs	r1, #0
 80005be:	4806      	ldr	r0, [pc, #24]	@ (80005d8 <main+0xe4>)
 80005c0:	f000 fe7c 	bl	80012bc <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim6);
 80005c4:	4805      	ldr	r0, [pc, #20]	@ (80005dc <main+0xe8>)
 80005c6:	f003 f917 	bl	80037f8 <HAL_TIM_Base_Start_IT>


  while (1)
 80005ca:	bf00      	nop
 80005cc:	e7fd      	b.n	80005ca <main+0xd6>
 80005ce:	bf00      	nop
 80005d0:	200000e4 	.word	0x200000e4
 80005d4:	080052e0 	.word	0x080052e0
 80005d8:	20000028 	.word	0x20000028
 80005dc:	2000009c 	.word	0x2000009c

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b094      	sub	sp, #80	@ 0x50
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 031c 	add.w	r3, r7, #28
 80005ea:	2234      	movs	r2, #52	@ 0x34
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f004 fe3d 	bl	800526e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 0308 	add.w	r3, r7, #8
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	4b29      	ldr	r3, [pc, #164]	@ (80006b0 <SystemClock_Config+0xd0>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800060c:	4a28      	ldr	r2, [pc, #160]	@ (80006b0 <SystemClock_Config+0xd0>)
 800060e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000612:	6413      	str	r3, [r2, #64]	@ 0x40
 8000614:	4b26      	ldr	r3, [pc, #152]	@ (80006b0 <SystemClock_Config+0xd0>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000618:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000620:	2300      	movs	r3, #0
 8000622:	603b      	str	r3, [r7, #0]
 8000624:	4b23      	ldr	r3, [pc, #140]	@ (80006b4 <SystemClock_Config+0xd4>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a22      	ldr	r2, [pc, #136]	@ (80006b4 <SystemClock_Config+0xd4>)
 800062a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800062e:	6013      	str	r3, [r2, #0]
 8000630:	4b20      	ldr	r3, [pc, #128]	@ (80006b4 <SystemClock_Config+0xd4>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800063c:	2301      	movs	r3, #1
 800063e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000640:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000644:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000646:	2302      	movs	r3, #2
 8000648:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800064e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000650:	2304      	movs	r3, #4
 8000652:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000654:	23a8      	movs	r3, #168	@ 0xa8
 8000656:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000658:	2302      	movs	r3, #2
 800065a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800065c:	2307      	movs	r3, #7
 800065e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000660:	2302      	movs	r3, #2
 8000662:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000664:	f107 031c 	add.w	r3, r7, #28
 8000668:	4618      	mov	r0, r3
 800066a:	f002 fdd7 	bl	800321c <HAL_RCC_OscConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000674:	f000 f9f6 	bl	8000a64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000678:	230f      	movs	r3, #15
 800067a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067c:	2302      	movs	r3, #2
 800067e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000684:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000688:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800068a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800068e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000690:	f107 0308 	add.w	r3, r7, #8
 8000694:	2105      	movs	r1, #5
 8000696:	4618      	mov	r0, r3
 8000698:	f001 ff4c 	bl	8002534 <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006a2:	f000 f9df 	bl	8000a64 <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3750      	adds	r7, #80	@ 0x50
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40007000 	.word	0x40007000

080006b8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80006be:	463b      	mov	r3, r7
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <MX_DAC_Init+0x4c>)
 80006c8:	4a0f      	ldr	r2, [pc, #60]	@ (8000708 <MX_DAC_Init+0x50>)
 80006ca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80006cc:	480d      	ldr	r0, [pc, #52]	@ (8000704 <MX_DAC_Init+0x4c>)
 80006ce:	f000 fdd2 	bl	8001276 <HAL_DAC_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80006d8:	f000 f9c4 	bl	8000a64 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80006dc:	2304      	movs	r3, #4
 80006de:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80006e0:	2300      	movs	r3, #0
 80006e2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80006e4:	463b      	mov	r3, r7
 80006e6:	2200      	movs	r2, #0
 80006e8:	4619      	mov	r1, r3
 80006ea:	4806      	ldr	r0, [pc, #24]	@ (8000704 <MX_DAC_Init+0x4c>)
 80006ec:	f000 ff26 	bl	800153c <HAL_DAC_ConfigChannel>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80006f6:	f000 f9b5 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000028 	.word	0x20000028
 8000708:	40007400 	.word	0x40007400

0800070c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000712:	463b      	mov	r3, r7
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800071a:	4b15      	ldr	r3, [pc, #84]	@ (8000770 <MX_TIM6_Init+0x64>)
 800071c:	4a15      	ldr	r2, [pc, #84]	@ (8000774 <MX_TIM6_Init+0x68>)
 800071e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000720:	4b13      	ldr	r3, [pc, #76]	@ (8000770 <MX_TIM6_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000726:	4b12      	ldr	r3, [pc, #72]	@ (8000770 <MX_TIM6_Init+0x64>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 261;
 800072c:	4b10      	ldr	r3, [pc, #64]	@ (8000770 <MX_TIM6_Init+0x64>)
 800072e:	f240 1205 	movw	r2, #261	@ 0x105
 8000732:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000734:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <MX_TIM6_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800073a:	480d      	ldr	r0, [pc, #52]	@ (8000770 <MX_TIM6_Init+0x64>)
 800073c:	f003 f80c 	bl	8003758 <HAL_TIM_Base_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000746:	f000 f98d 	bl	8000a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800074a:	2320      	movs	r3, #32
 800074c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000752:	463b      	mov	r3, r7
 8000754:	4619      	mov	r1, r3
 8000756:	4806      	ldr	r0, [pc, #24]	@ (8000770 <MX_TIM6_Init+0x64>)
 8000758:	f003 fa8c 	bl	8003c74 <HAL_TIMEx_MasterConfigSynchronization>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000762:	f000 f97f 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	2000009c 	.word	0x2000009c
 8000774:	40001000 	.word	0x40001000

08000778 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800077c:	4b11      	ldr	r3, [pc, #68]	@ (80007c4 <MX_USART2_UART_Init+0x4c>)
 800077e:	4a12      	ldr	r2, [pc, #72]	@ (80007c8 <MX_USART2_UART_Init+0x50>)
 8000780:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000782:	4b10      	ldr	r3, [pc, #64]	@ (80007c4 <MX_USART2_UART_Init+0x4c>)
 8000784:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000788:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800078a:	4b0e      	ldr	r3, [pc, #56]	@ (80007c4 <MX_USART2_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000790:	4b0c      	ldr	r3, [pc, #48]	@ (80007c4 <MX_USART2_UART_Init+0x4c>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000796:	4b0b      	ldr	r3, [pc, #44]	@ (80007c4 <MX_USART2_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800079c:	4b09      	ldr	r3, [pc, #36]	@ (80007c4 <MX_USART2_UART_Init+0x4c>)
 800079e:	220c      	movs	r2, #12
 80007a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a2:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <MX_USART2_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a8:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <MX_USART2_UART_Init+0x4c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	@ (80007c4 <MX_USART2_UART_Init+0x4c>)
 80007b0:	f003 faf0 	bl	8003d94 <HAL_UART_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ba:	f000 f953 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200000e4 	.word	0x200000e4
 80007c8:	40004400 	.word	0x40004400

080007cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007d0:	4b11      	ldr	r3, [pc, #68]	@ (8000818 <MX_USART3_UART_Init+0x4c>)
 80007d2:	4a12      	ldr	r2, [pc, #72]	@ (800081c <MX_USART3_UART_Init+0x50>)
 80007d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007d6:	4b10      	ldr	r3, [pc, #64]	@ (8000818 <MX_USART3_UART_Init+0x4c>)
 80007d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007de:	4b0e      	ldr	r3, [pc, #56]	@ (8000818 <MX_USART3_UART_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000818 <MX_USART3_UART_Init+0x4c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000818 <MX_USART3_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007f0:	4b09      	ldr	r3, [pc, #36]	@ (8000818 <MX_USART3_UART_Init+0x4c>)
 80007f2:	220c      	movs	r2, #12
 80007f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f6:	4b08      	ldr	r3, [pc, #32]	@ (8000818 <MX_USART3_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007fc:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <MX_USART3_UART_Init+0x4c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	@ (8000818 <MX_USART3_UART_Init+0x4c>)
 8000804:	f003 fac6 	bl	8003d94 <HAL_UART_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800080e:	f000 f929 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	2000012c 	.word	0x2000012c
 800081c:	40004800 	.word	0x40004800

08000820 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000824:	4b14      	ldr	r3, [pc, #80]	@ (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000826:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800082a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800082c:	4b12      	ldr	r3, [pc, #72]	@ (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800082e:	2206      	movs	r2, #6
 8000830:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000832:	4b11      	ldr	r3, [pc, #68]	@ (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000834:	2202      	movs	r2, #2
 8000836:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000838:	4b0f      	ldr	r3, [pc, #60]	@ (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083a:	2200      	movs	r2, #0
 800083c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800083e:	4b0e      	ldr	r3, [pc, #56]	@ (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000840:	2202      	movs	r2, #2
 8000842:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000844:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000846:	2201      	movs	r2, #1
 8000848:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800084a:	4b0b      	ldr	r3, [pc, #44]	@ (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084c:	2200      	movs	r2, #0
 800084e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000850:	4b09      	ldr	r3, [pc, #36]	@ (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000852:	2200      	movs	r2, #0
 8000854:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000856:	4b08      	ldr	r3, [pc, #32]	@ (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000858:	2201      	movs	r2, #1
 800085a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800085c:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085e:	2200      	movs	r2, #0
 8000860:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000862:	4805      	ldr	r0, [pc, #20]	@ (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000864:	f001 fd2b 	bl	80022be <HAL_PCD_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800086e:	f000 f8f9 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000174 	.word	0x20000174

0800087c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	4b0c      	ldr	r3, [pc, #48]	@ (80008b8 <MX_DMA_Init+0x3c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a0b      	ldr	r2, [pc, #44]	@ (80008b8 <MX_DMA_Init+0x3c>)
 800088c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b09      	ldr	r3, [pc, #36]	@ (80008b8 <MX_DMA_Init+0x3c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2100      	movs	r1, #0
 80008a2:	2010      	movs	r0, #16
 80008a4:	f000 fcb1 	bl	800120a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80008a8:	2010      	movs	r0, #16
 80008aa:	f000 fcca 	bl	8001242 <HAL_NVIC_EnableIRQ>

}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800

080008bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08c      	sub	sp, #48	@ 0x30
 80008c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
 80008d6:	4b50      	ldr	r3, [pc, #320]	@ (8000a18 <MX_GPIO_Init+0x15c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	4a4f      	ldr	r2, [pc, #316]	@ (8000a18 <MX_GPIO_Init+0x15c>)
 80008dc:	f043 0304 	orr.w	r3, r3, #4
 80008e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e2:	4b4d      	ldr	r3, [pc, #308]	@ (8000a18 <MX_GPIO_Init+0x15c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	f003 0304 	and.w	r3, r3, #4
 80008ea:	61bb      	str	r3, [r7, #24]
 80008ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
 80008f2:	4b49      	ldr	r3, [pc, #292]	@ (8000a18 <MX_GPIO_Init+0x15c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	4a48      	ldr	r2, [pc, #288]	@ (8000a18 <MX_GPIO_Init+0x15c>)
 80008f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fe:	4b46      	ldr	r3, [pc, #280]	@ (8000a18 <MX_GPIO_Init+0x15c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	4b42      	ldr	r3, [pc, #264]	@ (8000a18 <MX_GPIO_Init+0x15c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	4a41      	ldr	r2, [pc, #260]	@ (8000a18 <MX_GPIO_Init+0x15c>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6313      	str	r3, [r2, #48]	@ 0x30
 800091a:	4b3f      	ldr	r3, [pc, #252]	@ (8000a18 <MX_GPIO_Init+0x15c>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	4b3b      	ldr	r3, [pc, #236]	@ (8000a18 <MX_GPIO_Init+0x15c>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	4a3a      	ldr	r2, [pc, #232]	@ (8000a18 <MX_GPIO_Init+0x15c>)
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	6313      	str	r3, [r2, #48]	@ 0x30
 8000936:	4b38      	ldr	r3, [pc, #224]	@ (8000a18 <MX_GPIO_Init+0x15c>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	4b34      	ldr	r3, [pc, #208]	@ (8000a18 <MX_GPIO_Init+0x15c>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	4a33      	ldr	r2, [pc, #204]	@ (8000a18 <MX_GPIO_Init+0x15c>)
 800094c:	f043 0308 	orr.w	r3, r3, #8
 8000950:	6313      	str	r3, [r2, #48]	@ 0x30
 8000952:	4b31      	ldr	r3, [pc, #196]	@ (8000a18 <MX_GPIO_Init+0x15c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	f003 0308 	and.w	r3, r3, #8
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b2d      	ldr	r3, [pc, #180]	@ (8000a18 <MX_GPIO_Init+0x15c>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	4a2c      	ldr	r2, [pc, #176]	@ (8000a18 <MX_GPIO_Init+0x15c>)
 8000968:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800096c:	6313      	str	r3, [r2, #48]	@ 0x30
 800096e:	4b2a      	ldr	r3, [pc, #168]	@ (8000a18 <MX_GPIO_Init+0x15c>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000980:	4826      	ldr	r0, [pc, #152]	@ (8000a1c <MX_GPIO_Init+0x160>)
 8000982:	f001 fc5f 	bl	8002244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	2140      	movs	r1, #64	@ 0x40
 800098a:	4825      	ldr	r0, [pc, #148]	@ (8000a20 <MX_GPIO_Init+0x164>)
 800098c:	f001 fc5a 	bl	8002244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000990:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000996:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800099a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4619      	mov	r1, r3
 80009a6:	481f      	ldr	r0, [pc, #124]	@ (8000a24 <MX_GPIO_Init+0x168>)
 80009a8:	f001 fab8 	bl	8001f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009ac:	f244 0381 	movw	r3, #16513	@ 0x4081
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4815      	ldr	r0, [pc, #84]	@ (8000a1c <MX_GPIO_Init+0x160>)
 80009c6:	f001 faa9 	bl	8001f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009ca:	2340      	movs	r3, #64	@ 0x40
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	480f      	ldr	r0, [pc, #60]	@ (8000a20 <MX_GPIO_Init+0x164>)
 80009e2:	f001 fa9b 	bl	8001f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009e6:	2380      	movs	r3, #128	@ 0x80
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ea:	2300      	movs	r3, #0
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	4809      	ldr	r0, [pc, #36]	@ (8000a20 <MX_GPIO_Init+0x164>)
 80009fa:	f001 fa8f 	bl	8001f1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2100      	movs	r1, #0
 8000a02:	2028      	movs	r0, #40	@ 0x28
 8000a04:	f000 fc01 	bl	800120a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a08:	2028      	movs	r0, #40	@ 0x28
 8000a0a:	f000 fc1a 	bl	8001242 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a0e:	bf00      	nop
 8000a10:	3730      	adds	r7, #48	@ 0x30
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40020400 	.word	0x40020400
 8000a20:	40021800 	.word	0x40021800
 8000a24:	40020800 	.word	0x40020800

08000a28 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  if(huart == &huart2)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a06      	ldr	r2, [pc, #24]	@ (8000a4c <HAL_UART_RxCpltCallback+0x24>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d104      	bne.n	8000a42 <HAL_UART_RxCpltCallback+0x1a>
  {
	  UART2_Receive(huart2.pRxBuffPtr);
 8000a38:	4b04      	ldr	r3, [pc, #16]	@ (8000a4c <HAL_UART_RxCpltCallback+0x24>)
 8000a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f000 f807 	bl	8000a50 <UART2_Receive>
  }

}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200000e4 	.word	0x200000e4

08000a50 <UART2_Receive>:

void UART2_Receive(uint8_t *rxBuffer)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]

}
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a68:	b672      	cpsid	i
}
 8000a6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <Error_Handler+0x8>

08000a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	4b10      	ldr	r3, [pc, #64]	@ (8000abc <HAL_MspInit+0x4c>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a7e:	4a0f      	ldr	r2, [pc, #60]	@ (8000abc <HAL_MspInit+0x4c>)
 8000a80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a86:	4b0d      	ldr	r3, [pc, #52]	@ (8000abc <HAL_MspInit+0x4c>)
 8000a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	603b      	str	r3, [r7, #0]
 8000a96:	4b09      	ldr	r3, [pc, #36]	@ (8000abc <HAL_MspInit+0x4c>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9a:	4a08      	ldr	r2, [pc, #32]	@ (8000abc <HAL_MspInit+0x4c>)
 8000a9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aa2:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <HAL_MspInit+0x4c>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	40023800 	.word	0x40023800

08000ac0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	@ 0x28
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a34      	ldr	r2, [pc, #208]	@ (8000bb0 <HAL_DAC_MspInit+0xf0>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d161      	bne.n	8000ba6 <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	4b33      	ldr	r3, [pc, #204]	@ (8000bb4 <HAL_DAC_MspInit+0xf4>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aea:	4a32      	ldr	r2, [pc, #200]	@ (8000bb4 <HAL_DAC_MspInit+0xf4>)
 8000aec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000af0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000af2:	4b30      	ldr	r3, [pc, #192]	@ (8000bb4 <HAL_DAC_MspInit+0xf4>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	4b2c      	ldr	r3, [pc, #176]	@ (8000bb4 <HAL_DAC_MspInit+0xf4>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	4a2b      	ldr	r2, [pc, #172]	@ (8000bb4 <HAL_DAC_MspInit+0xf4>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0e:	4b29      	ldr	r3, [pc, #164]	@ (8000bb4 <HAL_DAC_MspInit+0xf4>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b1a:	2330      	movs	r3, #48	@ 0x30
 8000b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4822      	ldr	r0, [pc, #136]	@ (8000bb8 <HAL_DAC_MspInit+0xf8>)
 8000b2e:	f001 f9f5 	bl	8001f1c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8000b32:	4b22      	ldr	r3, [pc, #136]	@ (8000bbc <HAL_DAC_MspInit+0xfc>)
 8000b34:	4a22      	ldr	r2, [pc, #136]	@ (8000bc0 <HAL_DAC_MspInit+0x100>)
 8000b36:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8000b38:	4b20      	ldr	r3, [pc, #128]	@ (8000bbc <HAL_DAC_MspInit+0xfc>)
 8000b3a:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000b3e:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b40:	4b1e      	ldr	r3, [pc, #120]	@ (8000bbc <HAL_DAC_MspInit+0xfc>)
 8000b42:	2240      	movs	r2, #64	@ 0x40
 8000b44:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b46:	4b1d      	ldr	r3, [pc, #116]	@ (8000bbc <HAL_DAC_MspInit+0xfc>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8000b4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bbc <HAL_DAC_MspInit+0xfc>)
 8000b4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b52:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b54:	4b19      	ldr	r3, [pc, #100]	@ (8000bbc <HAL_DAC_MspInit+0xfc>)
 8000b56:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b5a:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b5c:	4b17      	ldr	r3, [pc, #92]	@ (8000bbc <HAL_DAC_MspInit+0xfc>)
 8000b5e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b62:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8000b64:	4b15      	ldr	r3, [pc, #84]	@ (8000bbc <HAL_DAC_MspInit+0xfc>)
 8000b66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b6a:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
 8000b6c:	4b13      	ldr	r3, [pc, #76]	@ (8000bbc <HAL_DAC_MspInit+0xfc>)
 8000b6e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000b72:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b74:	4b11      	ldr	r3, [pc, #68]	@ (8000bbc <HAL_DAC_MspInit+0xfc>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8000b7a:	4810      	ldr	r0, [pc, #64]	@ (8000bbc <HAL_DAC_MspInit+0xfc>)
 8000b7c:	f000 fdcc 	bl	8001718 <HAL_DMA_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000b86:	f7ff ff6d 	bl	8000a64 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4a0b      	ldr	r2, [pc, #44]	@ (8000bbc <HAL_DAC_MspInit+0xfc>)
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	4a0a      	ldr	r2, [pc, #40]	@ (8000bbc <HAL_DAC_MspInit+0xfc>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2100      	movs	r1, #0
 8000b9a:	2036      	movs	r0, #54	@ 0x36
 8000b9c:	f000 fb35 	bl	800120a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ba0:	2036      	movs	r0, #54	@ 0x36
 8000ba2:	f000 fb4e 	bl	8001242 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000ba6:	bf00      	nop
 8000ba8:	3728      	adds	r7, #40	@ 0x28
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40007400 	.word	0x40007400
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40020000 	.word	0x40020000
 8000bbc:	2000003c 	.word	0x2000003c
 8000bc0:	40026088 	.word	0x40026088

08000bc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a0e      	ldr	r2, [pc, #56]	@ (8000c0c <HAL_TIM_Base_MspInit+0x48>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d115      	bne.n	8000c02 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	4b0d      	ldr	r3, [pc, #52]	@ (8000c10 <HAL_TIM_Base_MspInit+0x4c>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bde:	4a0c      	ldr	r2, [pc, #48]	@ (8000c10 <HAL_TIM_Base_MspInit+0x4c>)
 8000be0:	f043 0310 	orr.w	r3, r3, #16
 8000be4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000be6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c10 <HAL_TIM_Base_MspInit+0x4c>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bea:	f003 0310 	and.w	r3, r3, #16
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2036      	movs	r0, #54	@ 0x36
 8000bf8:	f000 fb07 	bl	800120a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bfc:	2036      	movs	r0, #54	@ 0x36
 8000bfe:	f000 fb20 	bl	8001242 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000c02:	bf00      	nop
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40001000 	.word	0x40001000
 8000c10:	40023800 	.word	0x40023800

08000c14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08c      	sub	sp, #48	@ 0x30
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 031c 	add.w	r3, r7, #28
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a36      	ldr	r2, [pc, #216]	@ (8000d0c <HAL_UART_MspInit+0xf8>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d134      	bne.n	8000ca0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	61bb      	str	r3, [r7, #24]
 8000c3a:	4b35      	ldr	r3, [pc, #212]	@ (8000d10 <HAL_UART_MspInit+0xfc>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3e:	4a34      	ldr	r2, [pc, #208]	@ (8000d10 <HAL_UART_MspInit+0xfc>)
 8000c40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c46:	4b32      	ldr	r3, [pc, #200]	@ (8000d10 <HAL_UART_MspInit+0xfc>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c4e:	61bb      	str	r3, [r7, #24]
 8000c50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
 8000c56:	4b2e      	ldr	r3, [pc, #184]	@ (8000d10 <HAL_UART_MspInit+0xfc>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	4a2d      	ldr	r2, [pc, #180]	@ (8000d10 <HAL_UART_MspInit+0xfc>)
 8000c5c:	f043 0308 	orr.w	r3, r3, #8
 8000c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c62:	4b2b      	ldr	r3, [pc, #172]	@ (8000d10 <HAL_UART_MspInit+0xfc>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	f003 0308 	and.w	r3, r3, #8
 8000c6a:	617b      	str	r3, [r7, #20]
 8000c6c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000c6e:	2360      	movs	r3, #96	@ 0x60
 8000c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c7e:	2307      	movs	r3, #7
 8000c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c82:	f107 031c 	add.w	r3, r7, #28
 8000c86:	4619      	mov	r1, r3
 8000c88:	4822      	ldr	r0, [pc, #136]	@ (8000d14 <HAL_UART_MspInit+0x100>)
 8000c8a:	f001 f947 	bl	8001f1c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2100      	movs	r1, #0
 8000c92:	2026      	movs	r0, #38	@ 0x26
 8000c94:	f000 fab9 	bl	800120a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c98:	2026      	movs	r0, #38	@ 0x26
 8000c9a:	f000 fad2 	bl	8001242 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c9e:	e031      	b.n	8000d04 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a1c      	ldr	r2, [pc, #112]	@ (8000d18 <HAL_UART_MspInit+0x104>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d12c      	bne.n	8000d04 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	4b18      	ldr	r3, [pc, #96]	@ (8000d10 <HAL_UART_MspInit+0xfc>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb2:	4a17      	ldr	r2, [pc, #92]	@ (8000d10 <HAL_UART_MspInit+0xfc>)
 8000cb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cba:	4b15      	ldr	r3, [pc, #84]	@ (8000d10 <HAL_UART_MspInit+0xfc>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cc2:	613b      	str	r3, [r7, #16]
 8000cc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	4b11      	ldr	r3, [pc, #68]	@ (8000d10 <HAL_UART_MspInit+0xfc>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cce:	4a10      	ldr	r2, [pc, #64]	@ (8000d10 <HAL_UART_MspInit+0xfc>)
 8000cd0:	f043 0308 	orr.w	r3, r3, #8
 8000cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d10 <HAL_UART_MspInit+0xfc>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	f003 0308 	and.w	r3, r3, #8
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ce2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ce6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cf4:	2307      	movs	r3, #7
 8000cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf8:	f107 031c 	add.w	r3, r7, #28
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4805      	ldr	r0, [pc, #20]	@ (8000d14 <HAL_UART_MspInit+0x100>)
 8000d00:	f001 f90c 	bl	8001f1c <HAL_GPIO_Init>
}
 8000d04:	bf00      	nop
 8000d06:	3730      	adds	r7, #48	@ 0x30
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40004400 	.word	0x40004400
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40020c00 	.word	0x40020c00
 8000d18:	40004800 	.word	0x40004800

08000d1c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b0a0      	sub	sp, #128	@ 0x80
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d34:	f107 0310 	add.w	r3, r7, #16
 8000d38:	225c      	movs	r2, #92	@ 0x5c
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f004 fa96 	bl	800526e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000d4a:	d14e      	bne.n	8000dea <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000d4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d50:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000d52:	2300      	movs	r3, #0
 8000d54:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d56:	f107 0310 	add.w	r3, r7, #16
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f001 fd04 	bl	8002768 <HAL_RCCEx_PeriphCLKConfig>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000d66:	f7ff fe7d 	bl	8000a64 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	4b21      	ldr	r3, [pc, #132]	@ (8000df4 <HAL_PCD_MspInit+0xd8>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d72:	4a20      	ldr	r2, [pc, #128]	@ (8000df4 <HAL_PCD_MspInit+0xd8>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7a:	4b1e      	ldr	r3, [pc, #120]	@ (8000df4 <HAL_PCD_MspInit+0xd8>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d86:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000d8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d94:	2303      	movs	r3, #3
 8000d96:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d98:	230a      	movs	r3, #10
 8000d9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000da0:	4619      	mov	r1, r3
 8000da2:	4815      	ldr	r0, [pc, #84]	@ (8000df8 <HAL_PCD_MspInit+0xdc>)
 8000da4:	f001 f8ba 	bl	8001f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000da8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dac:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dae:	2300      	movs	r3, #0
 8000db0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000db6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000dba:	4619      	mov	r1, r3
 8000dbc:	480e      	ldr	r0, [pc, #56]	@ (8000df8 <HAL_PCD_MspInit+0xdc>)
 8000dbe:	f001 f8ad 	bl	8001f1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000df4 <HAL_PCD_MspInit+0xd8>)
 8000dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dc6:	4a0b      	ldr	r2, [pc, #44]	@ (8000df4 <HAL_PCD_MspInit+0xd8>)
 8000dc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dcc:	6353      	str	r3, [r2, #52]	@ 0x34
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	4b08      	ldr	r3, [pc, #32]	@ (8000df4 <HAL_PCD_MspInit+0xd8>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd6:	4a07      	ldr	r2, [pc, #28]	@ (8000df4 <HAL_PCD_MspInit+0xd8>)
 8000dd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ddc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dde:	4b05      	ldr	r3, [pc, #20]	@ (8000df4 <HAL_PCD_MspInit+0xd8>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000dea:	bf00      	nop
 8000dec:	3780      	adds	r7, #128	@ 0x80
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40020000 	.word	0x40020000

08000dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <NMI_Handler+0x4>

08000e04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <HardFault_Handler+0x4>

08000e0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <MemManage_Handler+0x4>

08000e14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <BusFault_Handler+0x4>

08000e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <UsageFault_Handler+0x4>

08000e24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e52:	f000 f8bb 	bl	8000fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
	...

08000e5c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8000e60:	4802      	ldr	r0, [pc, #8]	@ (8000e6c <DMA1_Stream5_IRQHandler+0x10>)
 8000e62:	f000 fdf1 	bl	8001a48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	2000003c 	.word	0x2000003c

08000e70 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e74:	4802      	ldr	r0, [pc, #8]	@ (8000e80 <USART2_IRQHandler+0x10>)
 8000e76:	f003 f803 	bl	8003e80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	200000e4 	.word	0x200000e4

08000e84 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000e88:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000e8c:	f001 f9f4 	bl	8002278 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8000e98:	4803      	ldr	r0, [pc, #12]	@ (8000ea8 <TIM6_DAC_IRQHandler+0x14>)
 8000e9a:	f000 fad1 	bl	8001440 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8000e9e:	4803      	ldr	r0, [pc, #12]	@ (8000eac <TIM6_DAC_IRQHandler+0x18>)
 8000ea0:	f002 fd1a 	bl	80038d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */


  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000028 	.word	0x20000028
 8000eac:	2000009c 	.word	0x2000009c

08000eb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb4:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <SystemInit+0x20>)
 8000eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000eba:	4a05      	ldr	r2, [pc, #20]	@ (8000ed0 <SystemInit+0x20>)
 8000ebc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ec0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ed4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f0c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ed8:	f7ff ffea 	bl	8000eb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000edc:	480c      	ldr	r0, [pc, #48]	@ (8000f10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ede:	490d      	ldr	r1, [pc, #52]	@ (8000f14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ee0:	4a0d      	ldr	r2, [pc, #52]	@ (8000f18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee4:	e002      	b.n	8000eec <LoopCopyDataInit>

08000ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eea:	3304      	adds	r3, #4

08000eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef0:	d3f9      	bcc.n	8000ee6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8000f1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ef4:	4c0a      	ldr	r4, [pc, #40]	@ (8000f20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef8:	e001      	b.n	8000efe <LoopFillZerobss>

08000efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000efc:	3204      	adds	r2, #4

08000efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f00:	d3fb      	bcc.n	8000efa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f02:	f004 f9bd 	bl	8005280 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f06:	f7ff faf5 	bl	80004f4 <main>
  bx  lr    
 8000f0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f14:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f18:	08005350 	.word	0x08005350
  ldr r2, =_sbss
 8000f1c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f20:	2000065c 	.word	0x2000065c

08000f24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f24:	e7fe      	b.n	8000f24 <ADC_IRQHandler>
	...

08000f28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f68 <HAL_Init+0x40>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0d      	ldr	r2, [pc, #52]	@ (8000f68 <HAL_Init+0x40>)
 8000f32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f38:	4b0b      	ldr	r3, [pc, #44]	@ (8000f68 <HAL_Init+0x40>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a0a      	ldr	r2, [pc, #40]	@ (8000f68 <HAL_Init+0x40>)
 8000f3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f44:	4b08      	ldr	r3, [pc, #32]	@ (8000f68 <HAL_Init+0x40>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a07      	ldr	r2, [pc, #28]	@ (8000f68 <HAL_Init+0x40>)
 8000f4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f50:	2003      	movs	r0, #3
 8000f52:	f000 f94f 	bl	80011f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f56:	2000      	movs	r0, #0
 8000f58:	f000 f808 	bl	8000f6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f5c:	f7ff fd88 	bl	8000a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40023c00 	.word	0x40023c00

08000f6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f74:	4b12      	ldr	r3, [pc, #72]	@ (8000fc0 <HAL_InitTick+0x54>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <HAL_InitTick+0x58>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 f967 	bl	800125e <HAL_SYSTICK_Config>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e00e      	b.n	8000fb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b0f      	cmp	r3, #15
 8000f9e:	d80a      	bhi.n	8000fb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa8:	f000 f92f 	bl	800120a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fac:	4a06      	ldr	r2, [pc, #24]	@ (8000fc8 <HAL_InitTick+0x5c>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e000      	b.n	8000fb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000000 	.word	0x20000000
 8000fc4:	20000008 	.word	0x20000008
 8000fc8:	20000004 	.word	0x20000004

08000fcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <HAL_IncTick+0x20>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <HAL_IncTick+0x24>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4413      	add	r3, r2
 8000fdc:	4a04      	ldr	r2, [pc, #16]	@ (8000ff0 <HAL_IncTick+0x24>)
 8000fde:	6013      	str	r3, [r2, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	20000008 	.word	0x20000008
 8000ff0:	20000658 	.word	0x20000658

08000ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff8:	4b03      	ldr	r3, [pc, #12]	@ (8001008 <HAL_GetTick+0x14>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000658 	.word	0x20000658

0800100c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001014:	f7ff ffee 	bl	8000ff4 <HAL_GetTick>
 8001018:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001024:	d005      	beq.n	8001032 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001026:	4b0a      	ldr	r3, [pc, #40]	@ (8001050 <HAL_Delay+0x44>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	461a      	mov	r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4413      	add	r3, r2
 8001030:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001032:	bf00      	nop
 8001034:	f7ff ffde 	bl	8000ff4 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	429a      	cmp	r2, r3
 8001042:	d8f7      	bhi.n	8001034 <HAL_Delay+0x28>
  {
  }
}
 8001044:	bf00      	nop
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000008 	.word	0x20000008

08001054 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001064:	4b0c      	ldr	r3, [pc, #48]	@ (8001098 <__NVIC_SetPriorityGrouping+0x44>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001070:	4013      	ands	r3, r2
 8001072:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800107c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001080:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001084:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001086:	4a04      	ldr	r2, [pc, #16]	@ (8001098 <__NVIC_SetPriorityGrouping+0x44>)
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	60d3      	str	r3, [r2, #12]
}
 800108c:	bf00      	nop
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a0:	4b04      	ldr	r3, [pc, #16]	@ (80010b4 <__NVIC_GetPriorityGrouping+0x18>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	0a1b      	lsrs	r3, r3, #8
 80010a6:	f003 0307 	and.w	r3, r3, #7
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	db0b      	blt.n	80010e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	f003 021f 	and.w	r2, r3, #31
 80010d0:	4907      	ldr	r1, [pc, #28]	@ (80010f0 <__NVIC_EnableIRQ+0x38>)
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	095b      	lsrs	r3, r3, #5
 80010d8:	2001      	movs	r0, #1
 80010da:	fa00 f202 	lsl.w	r2, r0, r2
 80010de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	e000e100 	.word	0xe000e100

080010f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	6039      	str	r1, [r7, #0]
 80010fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	2b00      	cmp	r3, #0
 8001106:	db0a      	blt.n	800111e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	b2da      	uxtb	r2, r3
 800110c:	490c      	ldr	r1, [pc, #48]	@ (8001140 <__NVIC_SetPriority+0x4c>)
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	0112      	lsls	r2, r2, #4
 8001114:	b2d2      	uxtb	r2, r2
 8001116:	440b      	add	r3, r1
 8001118:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800111c:	e00a      	b.n	8001134 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	b2da      	uxtb	r2, r3
 8001122:	4908      	ldr	r1, [pc, #32]	@ (8001144 <__NVIC_SetPriority+0x50>)
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	f003 030f 	and.w	r3, r3, #15
 800112a:	3b04      	subs	r3, #4
 800112c:	0112      	lsls	r2, r2, #4
 800112e:	b2d2      	uxtb	r2, r2
 8001130:	440b      	add	r3, r1
 8001132:	761a      	strb	r2, [r3, #24]
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	e000e100 	.word	0xe000e100
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001148:	b480      	push	{r7}
 800114a:	b089      	sub	sp, #36	@ 0x24
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	f1c3 0307 	rsb	r3, r3, #7
 8001162:	2b04      	cmp	r3, #4
 8001164:	bf28      	it	cs
 8001166:	2304      	movcs	r3, #4
 8001168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3304      	adds	r3, #4
 800116e:	2b06      	cmp	r3, #6
 8001170:	d902      	bls.n	8001178 <NVIC_EncodePriority+0x30>
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3b03      	subs	r3, #3
 8001176:	e000      	b.n	800117a <NVIC_EncodePriority+0x32>
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117c:	f04f 32ff 	mov.w	r2, #4294967295
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43da      	mvns	r2, r3
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	401a      	ands	r2, r3
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001190:	f04f 31ff 	mov.w	r1, #4294967295
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	fa01 f303 	lsl.w	r3, r1, r3
 800119a:	43d9      	mvns	r1, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a0:	4313      	orrs	r3, r2
         );
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3724      	adds	r7, #36	@ 0x24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
	...

080011b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011c0:	d301      	bcc.n	80011c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011c2:	2301      	movs	r3, #1
 80011c4:	e00f      	b.n	80011e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011c6:	4a0a      	ldr	r2, [pc, #40]	@ (80011f0 <SysTick_Config+0x40>)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ce:	210f      	movs	r1, #15
 80011d0:	f04f 30ff 	mov.w	r0, #4294967295
 80011d4:	f7ff ff8e 	bl	80010f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d8:	4b05      	ldr	r3, [pc, #20]	@ (80011f0 <SysTick_Config+0x40>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011de:	4b04      	ldr	r3, [pc, #16]	@ (80011f0 <SysTick_Config+0x40>)
 80011e0:	2207      	movs	r2, #7
 80011e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	e000e010 	.word	0xe000e010

080011f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff ff29 	bl	8001054 <__NVIC_SetPriorityGrouping>
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800120a:	b580      	push	{r7, lr}
 800120c:	b086      	sub	sp, #24
 800120e:	af00      	add	r7, sp, #0
 8001210:	4603      	mov	r3, r0
 8001212:	60b9      	str	r1, [r7, #8]
 8001214:	607a      	str	r2, [r7, #4]
 8001216:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800121c:	f7ff ff3e 	bl	800109c <__NVIC_GetPriorityGrouping>
 8001220:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	68b9      	ldr	r1, [r7, #8]
 8001226:	6978      	ldr	r0, [r7, #20]
 8001228:	f7ff ff8e 	bl	8001148 <NVIC_EncodePriority>
 800122c:	4602      	mov	r2, r0
 800122e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001232:	4611      	mov	r1, r2
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff5d 	bl	80010f4 <__NVIC_SetPriority>
}
 800123a:	bf00      	nop
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	4603      	mov	r3, r0
 800124a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800124c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff31 	bl	80010b8 <__NVIC_EnableIRQ>
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff ffa2 	bl	80011b0 <SysTick_Config>
 800126c:	4603      	mov	r3, r0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d101      	bne.n	8001288 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e014      	b.n	80012b2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	791b      	ldrb	r3, [r3, #4]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	d105      	bne.n	800129e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff fc11 	bl	8000ac0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2202      	movs	r2, #2
 80012a2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2201      	movs	r2, #1
 80012ae:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
 80012c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d101      	bne.n	80012d8 <HAL_DAC_Start_DMA+0x1c>
  {
    return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e0a2      	b.n	800141e <HAL_DAC_Start_DMA+0x162>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	795b      	ldrb	r3, [r3, #5]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d101      	bne.n	80012e4 <HAL_DAC_Start_DMA+0x28>
 80012e0:	2302      	movs	r3, #2
 80012e2:	e09c      	b.n	800141e <HAL_DAC_Start_DMA+0x162>
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2201      	movs	r2, #1
 80012e8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	2202      	movs	r2, #2
 80012ee:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d129      	bne.n	800134a <HAL_DAC_Start_DMA+0x8e>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	4a4b      	ldr	r2, [pc, #300]	@ (8001428 <HAL_DAC_Start_DMA+0x16c>)
 80012fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	4a4a      	ldr	r2, [pc, #296]	@ (800142c <HAL_DAC_Start_DMA+0x170>)
 8001304:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	4a49      	ldr	r2, [pc, #292]	@ (8001430 <HAL_DAC_Start_DMA+0x174>)
 800130c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800131c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800131e:	6a3b      	ldr	r3, [r7, #32]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <HAL_DAC_Start_DMA+0x70>
 8001324:	6a3b      	ldr	r3, [r7, #32]
 8001326:	2b04      	cmp	r3, #4
 8001328:	d005      	beq.n	8001336 <HAL_DAC_Start_DMA+0x7a>
 800132a:	e009      	b.n	8001340 <HAL_DAC_Start_DMA+0x84>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	3308      	adds	r3, #8
 8001332:	613b      	str	r3, [r7, #16]
        break;
 8001334:	e033      	b.n	800139e <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	330c      	adds	r3, #12
 800133c:	613b      	str	r3, [r7, #16]
        break;
 800133e:	e02e      	b.n	800139e <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	3310      	adds	r3, #16
 8001346:	613b      	str	r3, [r7, #16]
        break;
 8001348:	e029      	b.n	800139e <HAL_DAC_Start_DMA+0xe2>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	4a39      	ldr	r2, [pc, #228]	@ (8001434 <HAL_DAC_Start_DMA+0x178>)
 8001350:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	4a38      	ldr	r2, [pc, #224]	@ (8001438 <HAL_DAC_Start_DMA+0x17c>)
 8001358:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	4a37      	ldr	r2, [pc, #220]	@ (800143c <HAL_DAC_Start_DMA+0x180>)
 8001360:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001370:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001372:	6a3b      	ldr	r3, [r7, #32]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d003      	beq.n	8001380 <HAL_DAC_Start_DMA+0xc4>
 8001378:	6a3b      	ldr	r3, [r7, #32]
 800137a:	2b04      	cmp	r3, #4
 800137c:	d005      	beq.n	800138a <HAL_DAC_Start_DMA+0xce>
 800137e:	e009      	b.n	8001394 <HAL_DAC_Start_DMA+0xd8>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	3314      	adds	r3, #20
 8001386:	613b      	str	r3, [r7, #16]
        break;
 8001388:	e009      	b.n	800139e <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	3318      	adds	r3, #24
 8001390:	613b      	str	r3, [r7, #16]
        break;
 8001392:	e004      	b.n	800139e <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	331c      	adds	r3, #28
 800139a:	613b      	str	r3, [r7, #16]
        break;
 800139c:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d111      	bne.n	80013c8 <HAL_DAC_Start_DMA+0x10c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80013b2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	6898      	ldr	r0, [r3, #8]
 80013b8:	6879      	ldr	r1, [r7, #4]
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	f000 fa59 	bl	8001874 <HAL_DMA_Start_IT>
 80013c2:	4603      	mov	r3, r0
 80013c4:	75fb      	strb	r3, [r7, #23]
 80013c6:	e010      	b.n	80013ea <HAL_DAC_Start_DMA+0x12e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80013d6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	68d8      	ldr	r0, [r3, #12]
 80013dc:	6879      	ldr	r1, [r7, #4]
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	f000 fa47 	bl	8001874 <HAL_DMA_Start_IT>
 80013e6:	4603      	mov	r3, r0
 80013e8:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2200      	movs	r2, #0
 80013ee:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80013f0:	7dfb      	ldrb	r3, [r7, #23]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d10c      	bne.n	8001410 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	6819      	ldr	r1, [r3, #0]
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	f003 0310 	and.w	r3, r3, #16
 8001402:	2201      	movs	r2, #1
 8001404:	409a      	lsls	r2, r3
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	430a      	orrs	r2, r1
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	e005      	b.n	800141c <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	f043 0204 	orr.w	r2, r3, #4
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800141c:	7dfb      	ldrb	r3, [r7, #23]
}
 800141e:	4618      	mov	r0, r3
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	080015ef 	.word	0x080015ef
 800142c:	08001611 	.word	0x08001611
 8001430:	0800162d 	.word	0x0800162d
 8001434:	080016ab 	.word	0x080016ab
 8001438:	080016cd 	.word	0x080016cd
 800143c:	080016e9 	.word	0x080016e9

08001440 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001456:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d01d      	beq.n	800149e <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d018      	beq.n	800149e <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2204      	movs	r2, #4
 8001470:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	f043 0201 	orr.w	r2, r3, #1
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001486:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001496:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f000 f845 	bl	8001528 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d01d      	beq.n	80014e4 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d018      	beq.n	80014e4 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2204      	movs	r2, #4
 80014b6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	f043 0202 	orr.w	r2, r3, #2
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80014cc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80014dc:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f000 f8d9 	bl	8001696 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 80014e4:	bf00      	nop
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800153c:	b480      	push	{r7}
 800153e:	b089      	sub	sp, #36	@ 0x24
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001548:	2300      	movs	r3, #0
 800154a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d002      	beq.n	8001558 <HAL_DAC_ConfigChannel+0x1c>
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d101      	bne.n	800155c <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e042      	b.n	80015e2 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	795b      	ldrb	r3, [r3, #5]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d101      	bne.n	8001568 <HAL_DAC_ConfigChannel+0x2c>
 8001564:	2302      	movs	r3, #2
 8001566:	e03c      	b.n	80015e2 <HAL_DAC_ConfigChannel+0xa6>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2201      	movs	r2, #1
 800156c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2202      	movs	r2, #2
 8001572:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f003 0310 	and.w	r3, r3, #16
 8001582:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 800158a:	43db      	mvns	r3, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4013      	ands	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	4313      	orrs	r3, r2
 800159c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f003 0310 	and.w	r3, r3, #16
 80015a4:	697a      	ldr	r2, [r7, #20]
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6819      	ldr	r1, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f003 0310 	and.w	r3, r3, #16
 80015c4:	22c0      	movs	r2, #192	@ 0xc0
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43da      	mvns	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	400a      	ands	r2, r1
 80015d2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2201      	movs	r2, #1
 80015d8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2200      	movs	r2, #0
 80015de:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80015e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3724      	adds	r7, #36	@ 0x24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b084      	sub	sp, #16
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015fa:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	f7ff ff75 	bl	80014ec <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2201      	movs	r2, #1
 8001606:	711a      	strb	r2, [r3, #4]
}
 8001608:	bf00      	nop
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800161c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	f7ff ff6e 	bl	8001500 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001624:	bf00      	nop
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001638:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	691b      	ldr	r3, [r3, #16]
 800163e:	f043 0204 	orr.w	r2, r3, #4
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001646:	68f8      	ldr	r0, [r7, #12]
 8001648:	f7ff ff64 	bl	8001514 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2201      	movs	r2, #1
 8001650:	711a      	strb	r2, [r3, #4]
}
 8001652:	bf00      	nop
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800165a:	b480      	push	{r7}
 800165c:	b083      	sub	sp, #12
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b084      	sub	sp, #16
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016b6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80016b8:	68f8      	ldr	r0, [r7, #12]
 80016ba:	f7ff ffce 	bl	800165a <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2201      	movs	r2, #1
 80016c2:	711a      	strb	r2, [r3, #4]
}
 80016c4:	bf00      	nop
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016d8:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	f7ff ffc7 	bl	800166e <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80016e0:	bf00      	nop
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016f4:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	f043 0204 	orr.w	r2, r3, #4
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	f7ff ffbd 	bl	8001682 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2201      	movs	r2, #1
 800170c:	711a      	strb	r2, [r3, #4]
}
 800170e:	bf00      	nop
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001724:	f7ff fc66 	bl	8000ff4 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d101      	bne.n	8001734 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e099      	b.n	8001868 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2202      	movs	r2, #2
 8001738:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f022 0201 	bic.w	r2, r2, #1
 8001752:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001754:	e00f      	b.n	8001776 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001756:	f7ff fc4d 	bl	8000ff4 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b05      	cmp	r3, #5
 8001762:	d908      	bls.n	8001776 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2220      	movs	r2, #32
 8001768:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2203      	movs	r2, #3
 800176e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e078      	b.n	8001868 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1e8      	bne.n	8001756 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	4b38      	ldr	r3, [pc, #224]	@ (8001870 <HAL_DMA_Init+0x158>)
 8001790:	4013      	ands	r3, r2
 8001792:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a1b      	ldr	r3, [r3, #32]
 80017c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017cc:	2b04      	cmp	r3, #4
 80017ce:	d107      	bne.n	80017e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d8:	4313      	orrs	r3, r2
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	4313      	orrs	r3, r2
 80017de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	f023 0307 	bic.w	r3, r3, #7
 80017f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	4313      	orrs	r3, r2
 8001800:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001806:	2b04      	cmp	r3, #4
 8001808:	d117      	bne.n	800183a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	4313      	orrs	r3, r2
 8001812:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001818:	2b00      	cmp	r3, #0
 800181a:	d00e      	beq.n	800183a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f000 fb01 	bl	8001e24 <DMA_CheckFifoParam>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d008      	beq.n	800183a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2240      	movs	r2, #64	@ 0x40
 800182c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2201      	movs	r2, #1
 8001832:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001836:	2301      	movs	r3, #1
 8001838:	e016      	b.n	8001868 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	697a      	ldr	r2, [r7, #20]
 8001840:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 fab8 	bl	8001db8 <DMA_CalcBaseAndBitshift>
 8001848:	4603      	mov	r3, r0
 800184a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001850:	223f      	movs	r2, #63	@ 0x3f
 8001852:	409a      	lsls	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2201      	movs	r2, #1
 8001862:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001866:	2300      	movs	r3, #0
}
 8001868:	4618      	mov	r0, r3
 800186a:	3718      	adds	r7, #24
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	f010803f 	.word	0xf010803f

08001874 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
 8001880:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001882:	2300      	movs	r3, #0
 8001884:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800188a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001892:	2b01      	cmp	r3, #1
 8001894:	d101      	bne.n	800189a <HAL_DMA_Start_IT+0x26>
 8001896:	2302      	movs	r3, #2
 8001898:	e040      	b.n	800191c <HAL_DMA_Start_IT+0xa8>
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2201      	movs	r2, #1
 800189e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d12f      	bne.n	800190e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2202      	movs	r2, #2
 80018b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2200      	movs	r2, #0
 80018ba:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	68b9      	ldr	r1, [r7, #8]
 80018c2:	68f8      	ldr	r0, [r7, #12]
 80018c4:	f000 fa4a 	bl	8001d5c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018cc:	223f      	movs	r2, #63	@ 0x3f
 80018ce:	409a      	lsls	r2, r3
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f042 0216 	orr.w	r2, r2, #22
 80018e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d007      	beq.n	80018fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f042 0208 	orr.w	r2, r2, #8
 80018fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 0201 	orr.w	r2, r2, #1
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	e005      	b.n	800191a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001916:	2302      	movs	r3, #2
 8001918:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800191a:	7dfb      	ldrb	r3, [r7, #23]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001930:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001932:	f7ff fb5f 	bl	8000ff4 <HAL_GetTick>
 8001936:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d008      	beq.n	8001956 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2280      	movs	r2, #128	@ 0x80
 8001948:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e052      	b.n	80019fc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 0216 	bic.w	r2, r2, #22
 8001964:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	695a      	ldr	r2, [r3, #20]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001974:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197a:	2b00      	cmp	r3, #0
 800197c:	d103      	bne.n	8001986 <HAL_DMA_Abort+0x62>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001982:	2b00      	cmp	r3, #0
 8001984:	d007      	beq.n	8001996 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f022 0208 	bic.w	r2, r2, #8
 8001994:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f022 0201 	bic.w	r2, r2, #1
 80019a4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019a6:	e013      	b.n	80019d0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019a8:	f7ff fb24 	bl	8000ff4 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b05      	cmp	r3, #5
 80019b4:	d90c      	bls.n	80019d0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2220      	movs	r2, #32
 80019ba:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2203      	movs	r2, #3
 80019c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e015      	b.n	80019fc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1e4      	bne.n	80019a8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019e2:	223f      	movs	r2, #63	@ 0x3f
 80019e4:	409a      	lsls	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d004      	beq.n	8001a22 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2280      	movs	r2, #128	@ 0x80
 8001a1c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e00c      	b.n	8001a3c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2205      	movs	r2, #5
 8001a26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f022 0201 	bic.w	r2, r2, #1
 8001a38:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a54:	4b8e      	ldr	r3, [pc, #568]	@ (8001c90 <HAL_DMA_IRQHandler+0x248>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a8e      	ldr	r2, [pc, #568]	@ (8001c94 <HAL_DMA_IRQHandler+0x24c>)
 8001a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5e:	0a9b      	lsrs	r3, r3, #10
 8001a60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a72:	2208      	movs	r2, #8
 8001a74:	409a      	lsls	r2, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d01a      	beq.n	8001ab4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d013      	beq.n	8001ab4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 0204 	bic.w	r2, r2, #4
 8001a9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aa0:	2208      	movs	r2, #8
 8001aa2:	409a      	lsls	r2, r3
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aac:	f043 0201 	orr.w	r2, r3, #1
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ab8:	2201      	movs	r2, #1
 8001aba:	409a      	lsls	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d012      	beq.n	8001aea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d00b      	beq.n	8001aea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	409a      	lsls	r2, r3
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ae2:	f043 0202 	orr.w	r2, r3, #2
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aee:	2204      	movs	r2, #4
 8001af0:	409a      	lsls	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	4013      	ands	r3, r2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d012      	beq.n	8001b20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d00b      	beq.n	8001b20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b0c:	2204      	movs	r2, #4
 8001b0e:	409a      	lsls	r2, r3
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b18:	f043 0204 	orr.w	r2, r3, #4
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b24:	2210      	movs	r2, #16
 8001b26:	409a      	lsls	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d043      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d03c      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b42:	2210      	movs	r2, #16
 8001b44:	409a      	lsls	r2, r3
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d018      	beq.n	8001b8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d108      	bne.n	8001b78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d024      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	4798      	blx	r3
 8001b76:	e01f      	b.n	8001bb8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d01b      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	4798      	blx	r3
 8001b88:	e016      	b.n	8001bb8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d107      	bne.n	8001ba8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f022 0208 	bic.w	r2, r2, #8
 8001ba6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bbc:	2220      	movs	r2, #32
 8001bbe:	409a      	lsls	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 808f 	beq.w	8001ce8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0310 	and.w	r3, r3, #16
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f000 8087 	beq.w	8001ce8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bde:	2220      	movs	r2, #32
 8001be0:	409a      	lsls	r2, r3
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b05      	cmp	r3, #5
 8001bf0:	d136      	bne.n	8001c60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0216 	bic.w	r2, r2, #22
 8001c00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	695a      	ldr	r2, [r3, #20]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d103      	bne.n	8001c22 <HAL_DMA_IRQHandler+0x1da>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d007      	beq.n	8001c32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 0208 	bic.w	r2, r2, #8
 8001c30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c36:	223f      	movs	r2, #63	@ 0x3f
 8001c38:	409a      	lsls	r2, r3
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d07e      	beq.n	8001d54 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	4798      	blx	r3
        }
        return;
 8001c5e:	e079      	b.n	8001d54 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d01d      	beq.n	8001caa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d10d      	bne.n	8001c98 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d031      	beq.n	8001ce8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	4798      	blx	r3
 8001c8c:	e02c      	b.n	8001ce8 <HAL_DMA_IRQHandler+0x2a0>
 8001c8e:	bf00      	nop
 8001c90:	20000000 	.word	0x20000000
 8001c94:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d023      	beq.n	8001ce8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	4798      	blx	r3
 8001ca8:	e01e      	b.n	8001ce8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d10f      	bne.n	8001cd8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 0210 	bic.w	r2, r2, #16
 8001cc6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d032      	beq.n	8001d56 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d022      	beq.n	8001d42 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2205      	movs	r2, #5
 8001d00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 0201 	bic.w	r2, r2, #1
 8001d12:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	3301      	adds	r3, #1
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d307      	bcc.n	8001d30 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f2      	bne.n	8001d14 <HAL_DMA_IRQHandler+0x2cc>
 8001d2e:	e000      	b.n	8001d32 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d30:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d005      	beq.n	8001d56 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	4798      	blx	r3
 8001d52:	e000      	b.n	8001d56 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001d54:	bf00      	nop
    }
  }
}
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
 8001d68:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001d78:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	2b40      	cmp	r3, #64	@ 0x40
 8001d88:	d108      	bne.n	8001d9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d9a:	e007      	b.n	8001dac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68ba      	ldr	r2, [r7, #8]
 8001da2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	60da      	str	r2, [r3, #12]
}
 8001dac:	bf00      	nop
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	3b10      	subs	r3, #16
 8001dc8:	4a14      	ldr	r2, [pc, #80]	@ (8001e1c <DMA_CalcBaseAndBitshift+0x64>)
 8001dca:	fba2 2303 	umull	r2, r3, r2, r3
 8001dce:	091b      	lsrs	r3, r3, #4
 8001dd0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001dd2:	4a13      	ldr	r2, [pc, #76]	@ (8001e20 <DMA_CalcBaseAndBitshift+0x68>)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2b03      	cmp	r3, #3
 8001de4:	d909      	bls.n	8001dfa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001dee:	f023 0303 	bic.w	r3, r3, #3
 8001df2:	1d1a      	adds	r2, r3, #4
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	659a      	str	r2, [r3, #88]	@ 0x58
 8001df8:	e007      	b.n	8001e0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001e02:	f023 0303 	bic.w	r3, r3, #3
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	aaaaaaab 	.word	0xaaaaaaab
 8001e20:	08005338 	.word	0x08005338

08001e24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d11f      	bne.n	8001e7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	2b03      	cmp	r3, #3
 8001e42:	d856      	bhi.n	8001ef2 <DMA_CheckFifoParam+0xce>
 8001e44:	a201      	add	r2, pc, #4	@ (adr r2, 8001e4c <DMA_CheckFifoParam+0x28>)
 8001e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e4a:	bf00      	nop
 8001e4c:	08001e5d 	.word	0x08001e5d
 8001e50:	08001e6f 	.word	0x08001e6f
 8001e54:	08001e5d 	.word	0x08001e5d
 8001e58:	08001ef3 	.word	0x08001ef3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d046      	beq.n	8001ef6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e6c:	e043      	b.n	8001ef6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e72:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001e76:	d140      	bne.n	8001efa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e7c:	e03d      	b.n	8001efa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e86:	d121      	bne.n	8001ecc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	2b03      	cmp	r3, #3
 8001e8c:	d837      	bhi.n	8001efe <DMA_CheckFifoParam+0xda>
 8001e8e:	a201      	add	r2, pc, #4	@ (adr r2, 8001e94 <DMA_CheckFifoParam+0x70>)
 8001e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e94:	08001ea5 	.word	0x08001ea5
 8001e98:	08001eab 	.word	0x08001eab
 8001e9c:	08001ea5 	.word	0x08001ea5
 8001ea0:	08001ebd 	.word	0x08001ebd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ea8:	e030      	b.n	8001f0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d025      	beq.n	8001f02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001eba:	e022      	b.n	8001f02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001ec4:	d11f      	bne.n	8001f06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001eca:	e01c      	b.n	8001f06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d903      	bls.n	8001eda <DMA_CheckFifoParam+0xb6>
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	2b03      	cmp	r3, #3
 8001ed6:	d003      	beq.n	8001ee0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ed8:	e018      	b.n	8001f0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	73fb      	strb	r3, [r7, #15]
      break;
 8001ede:	e015      	b.n	8001f0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d00e      	beq.n	8001f0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	73fb      	strb	r3, [r7, #15]
      break;
 8001ef0:	e00b      	b.n	8001f0a <DMA_CheckFifoParam+0xe6>
      break;
 8001ef2:	bf00      	nop
 8001ef4:	e00a      	b.n	8001f0c <DMA_CheckFifoParam+0xe8>
      break;
 8001ef6:	bf00      	nop
 8001ef8:	e008      	b.n	8001f0c <DMA_CheckFifoParam+0xe8>
      break;
 8001efa:	bf00      	nop
 8001efc:	e006      	b.n	8001f0c <DMA_CheckFifoParam+0xe8>
      break;
 8001efe:	bf00      	nop
 8001f00:	e004      	b.n	8001f0c <DMA_CheckFifoParam+0xe8>
      break;
 8001f02:	bf00      	nop
 8001f04:	e002      	b.n	8001f0c <DMA_CheckFifoParam+0xe8>
      break;   
 8001f06:	bf00      	nop
 8001f08:	e000      	b.n	8001f0c <DMA_CheckFifoParam+0xe8>
      break;
 8001f0a:	bf00      	nop
    }
  } 
  
  return status; 
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop

08001f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b089      	sub	sp, #36	@ 0x24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f32:	2300      	movs	r3, #0
 8001f34:	61fb      	str	r3, [r7, #28]
 8001f36:	e165      	b.n	8002204 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f38:	2201      	movs	r2, #1
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	f040 8154 	bne.w	80021fe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d005      	beq.n	8001f6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d130      	bne.n	8001fd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	2203      	movs	r2, #3
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4013      	ands	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	091b      	lsrs	r3, r3, #4
 8001fba:	f003 0201 	and.w	r2, r3, #1
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 0303 	and.w	r3, r3, #3
 8001fd8:	2b03      	cmp	r3, #3
 8001fda:	d017      	beq.n	800200c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	2203      	movs	r2, #3
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4313      	orrs	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f003 0303 	and.w	r3, r3, #3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d123      	bne.n	8002060 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	08da      	lsrs	r2, r3, #3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3208      	adds	r2, #8
 8002020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002024:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	220f      	movs	r2, #15
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	691a      	ldr	r2, [r3, #16]
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4313      	orrs	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	08da      	lsrs	r2, r3, #3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	3208      	adds	r2, #8
 800205a:	69b9      	ldr	r1, [r7, #24]
 800205c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	2203      	movs	r2, #3
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	43db      	mvns	r3, r3
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4013      	ands	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 0203 	and.w	r2, r3, #3
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4313      	orrs	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800209c:	2b00      	cmp	r3, #0
 800209e:	f000 80ae 	beq.w	80021fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	4b5d      	ldr	r3, [pc, #372]	@ (800221c <HAL_GPIO_Init+0x300>)
 80020a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020aa:	4a5c      	ldr	r2, [pc, #368]	@ (800221c <HAL_GPIO_Init+0x300>)
 80020ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80020b2:	4b5a      	ldr	r3, [pc, #360]	@ (800221c <HAL_GPIO_Init+0x300>)
 80020b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020be:	4a58      	ldr	r2, [pc, #352]	@ (8002220 <HAL_GPIO_Init+0x304>)
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	089b      	lsrs	r3, r3, #2
 80020c4:	3302      	adds	r3, #2
 80020c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	220f      	movs	r2, #15
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43db      	mvns	r3, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4013      	ands	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a4f      	ldr	r2, [pc, #316]	@ (8002224 <HAL_GPIO_Init+0x308>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d025      	beq.n	8002136 <HAL_GPIO_Init+0x21a>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a4e      	ldr	r2, [pc, #312]	@ (8002228 <HAL_GPIO_Init+0x30c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d01f      	beq.n	8002132 <HAL_GPIO_Init+0x216>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a4d      	ldr	r2, [pc, #308]	@ (800222c <HAL_GPIO_Init+0x310>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d019      	beq.n	800212e <HAL_GPIO_Init+0x212>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a4c      	ldr	r2, [pc, #304]	@ (8002230 <HAL_GPIO_Init+0x314>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d013      	beq.n	800212a <HAL_GPIO_Init+0x20e>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a4b      	ldr	r2, [pc, #300]	@ (8002234 <HAL_GPIO_Init+0x318>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d00d      	beq.n	8002126 <HAL_GPIO_Init+0x20a>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a4a      	ldr	r2, [pc, #296]	@ (8002238 <HAL_GPIO_Init+0x31c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d007      	beq.n	8002122 <HAL_GPIO_Init+0x206>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a49      	ldr	r2, [pc, #292]	@ (800223c <HAL_GPIO_Init+0x320>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d101      	bne.n	800211e <HAL_GPIO_Init+0x202>
 800211a:	2306      	movs	r3, #6
 800211c:	e00c      	b.n	8002138 <HAL_GPIO_Init+0x21c>
 800211e:	2307      	movs	r3, #7
 8002120:	e00a      	b.n	8002138 <HAL_GPIO_Init+0x21c>
 8002122:	2305      	movs	r3, #5
 8002124:	e008      	b.n	8002138 <HAL_GPIO_Init+0x21c>
 8002126:	2304      	movs	r3, #4
 8002128:	e006      	b.n	8002138 <HAL_GPIO_Init+0x21c>
 800212a:	2303      	movs	r3, #3
 800212c:	e004      	b.n	8002138 <HAL_GPIO_Init+0x21c>
 800212e:	2302      	movs	r3, #2
 8002130:	e002      	b.n	8002138 <HAL_GPIO_Init+0x21c>
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <HAL_GPIO_Init+0x21c>
 8002136:	2300      	movs	r3, #0
 8002138:	69fa      	ldr	r2, [r7, #28]
 800213a:	f002 0203 	and.w	r2, r2, #3
 800213e:	0092      	lsls	r2, r2, #2
 8002140:	4093      	lsls	r3, r2
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4313      	orrs	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002148:	4935      	ldr	r1, [pc, #212]	@ (8002220 <HAL_GPIO_Init+0x304>)
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	089b      	lsrs	r3, r3, #2
 800214e:	3302      	adds	r3, #2
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002156:	4b3a      	ldr	r3, [pc, #232]	@ (8002240 <HAL_GPIO_Init+0x324>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800217a:	4a31      	ldr	r2, [pc, #196]	@ (8002240 <HAL_GPIO_Init+0x324>)
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002180:	4b2f      	ldr	r3, [pc, #188]	@ (8002240 <HAL_GPIO_Init+0x324>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	43db      	mvns	r3, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4013      	ands	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021a4:	4a26      	ldr	r2, [pc, #152]	@ (8002240 <HAL_GPIO_Init+0x324>)
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021aa:	4b25      	ldr	r3, [pc, #148]	@ (8002240 <HAL_GPIO_Init+0x324>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	43db      	mvns	r3, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4013      	ands	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021ce:	4a1c      	ldr	r2, [pc, #112]	@ (8002240 <HAL_GPIO_Init+0x324>)
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002240 <HAL_GPIO_Init+0x324>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	43db      	mvns	r3, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4013      	ands	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021f8:	4a11      	ldr	r2, [pc, #68]	@ (8002240 <HAL_GPIO_Init+0x324>)
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	3301      	adds	r3, #1
 8002202:	61fb      	str	r3, [r7, #28]
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	2b0f      	cmp	r3, #15
 8002208:	f67f ae96 	bls.w	8001f38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800220c:	bf00      	nop
 800220e:	bf00      	nop
 8002210:	3724      	adds	r7, #36	@ 0x24
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40023800 	.word	0x40023800
 8002220:	40013800 	.word	0x40013800
 8002224:	40020000 	.word	0x40020000
 8002228:	40020400 	.word	0x40020400
 800222c:	40020800 	.word	0x40020800
 8002230:	40020c00 	.word	0x40020c00
 8002234:	40021000 	.word	0x40021000
 8002238:	40021400 	.word	0x40021400
 800223c:	40021800 	.word	0x40021800
 8002240:	40013c00 	.word	0x40013c00

08002244 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	460b      	mov	r3, r1
 800224e:	807b      	strh	r3, [r7, #2]
 8002250:	4613      	mov	r3, r2
 8002252:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002254:	787b      	ldrb	r3, [r7, #1]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800225a:	887a      	ldrh	r2, [r7, #2]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002260:	e003      	b.n	800226a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002262:	887b      	ldrh	r3, [r7, #2]
 8002264:	041a      	lsls	r2, r3, #16
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	619a      	str	r2, [r3, #24]
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
	...

08002278 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002282:	4b08      	ldr	r3, [pc, #32]	@ (80022a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002284:	695a      	ldr	r2, [r3, #20]
 8002286:	88fb      	ldrh	r3, [r7, #6]
 8002288:	4013      	ands	r3, r2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d006      	beq.n	800229c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800228e:	4a05      	ldr	r2, [pc, #20]	@ (80022a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002290:	88fb      	ldrh	r3, [r7, #6]
 8002292:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002294:	88fb      	ldrh	r3, [r7, #6]
 8002296:	4618      	mov	r0, r3
 8002298:	f000 f806 	bl	80022a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800229c:	bf00      	nop
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40013c00 	.word	0x40013c00

080022a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b086      	sub	sp, #24
 80022c2:	af02      	add	r7, sp, #8
 80022c4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e108      	b.n	80024e2 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d106      	bne.n	80022f0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7fe fd16 	bl	8000d1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2203      	movs	r2, #3
 80022f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022fe:	d102      	bne.n	8002306 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f002 fd1a 	bl	8004d44 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6818      	ldr	r0, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	7c1a      	ldrb	r2, [r3, #16]
 8002318:	f88d 2000 	strb.w	r2, [sp]
 800231c:	3304      	adds	r3, #4
 800231e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002320:	f002 fcac 	bl	8004c7c <USB_CoreInit>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d005      	beq.n	8002336 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2202      	movs	r2, #2
 800232e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e0d5      	b.n	80024e2 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2100      	movs	r1, #0
 800233c:	4618      	mov	r0, r3
 800233e:	f002 fd12 	bl	8004d66 <USB_SetCurrentMode>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d005      	beq.n	8002354 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2202      	movs	r2, #2
 800234c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e0c6      	b.n	80024e2 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002354:	2300      	movs	r3, #0
 8002356:	73fb      	strb	r3, [r7, #15]
 8002358:	e04a      	b.n	80023f0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800235a:	7bfa      	ldrb	r2, [r7, #15]
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	4613      	mov	r3, r2
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	4413      	add	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	440b      	add	r3, r1
 8002368:	3315      	adds	r3, #21
 800236a:	2201      	movs	r2, #1
 800236c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800236e:	7bfa      	ldrb	r2, [r7, #15]
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	4413      	add	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	440b      	add	r3, r1
 800237c:	3314      	adds	r3, #20
 800237e:	7bfa      	ldrb	r2, [r7, #15]
 8002380:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002382:	7bfa      	ldrb	r2, [r7, #15]
 8002384:	7bfb      	ldrb	r3, [r7, #15]
 8002386:	b298      	uxth	r0, r3
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	4613      	mov	r3, r2
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	4413      	add	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	440b      	add	r3, r1
 8002394:	332e      	adds	r3, #46	@ 0x2e
 8002396:	4602      	mov	r2, r0
 8002398:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800239a:	7bfa      	ldrb	r2, [r7, #15]
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	4613      	mov	r3, r2
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	4413      	add	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	440b      	add	r3, r1
 80023a8:	3318      	adds	r3, #24
 80023aa:	2200      	movs	r2, #0
 80023ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80023ae:	7bfa      	ldrb	r2, [r7, #15]
 80023b0:	6879      	ldr	r1, [r7, #4]
 80023b2:	4613      	mov	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	4413      	add	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	440b      	add	r3, r1
 80023bc:	331c      	adds	r3, #28
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80023c2:	7bfa      	ldrb	r2, [r7, #15]
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	4613      	mov	r3, r2
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	4413      	add	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	440b      	add	r3, r1
 80023d0:	3320      	adds	r3, #32
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80023d6:	7bfa      	ldrb	r2, [r7, #15]
 80023d8:	6879      	ldr	r1, [r7, #4]
 80023da:	4613      	mov	r3, r2
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	4413      	add	r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	440b      	add	r3, r1
 80023e4:	3324      	adds	r3, #36	@ 0x24
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023ea:	7bfb      	ldrb	r3, [r7, #15]
 80023ec:	3301      	adds	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	791b      	ldrb	r3, [r3, #4]
 80023f4:	7bfa      	ldrb	r2, [r7, #15]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d3af      	bcc.n	800235a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023fa:	2300      	movs	r3, #0
 80023fc:	73fb      	strb	r3, [r7, #15]
 80023fe:	e044      	b.n	800248a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002400:	7bfa      	ldrb	r2, [r7, #15]
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	4613      	mov	r3, r2
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	4413      	add	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002412:	2200      	movs	r2, #0
 8002414:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002416:	7bfa      	ldrb	r2, [r7, #15]
 8002418:	6879      	ldr	r1, [r7, #4]
 800241a:	4613      	mov	r3, r2
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	4413      	add	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	440b      	add	r3, r1
 8002424:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002428:	7bfa      	ldrb	r2, [r7, #15]
 800242a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800242c:	7bfa      	ldrb	r2, [r7, #15]
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	4613      	mov	r3, r2
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	4413      	add	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800243e:	2200      	movs	r2, #0
 8002440:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002442:	7bfa      	ldrb	r2, [r7, #15]
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	4613      	mov	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	4413      	add	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	440b      	add	r3, r1
 8002450:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002458:	7bfa      	ldrb	r2, [r7, #15]
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	4613      	mov	r3, r2
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	4413      	add	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800246e:	7bfa      	ldrb	r2, [r7, #15]
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	4613      	mov	r3, r2
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	4413      	add	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	440b      	add	r3, r1
 800247c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002484:	7bfb      	ldrb	r3, [r7, #15]
 8002486:	3301      	adds	r3, #1
 8002488:	73fb      	strb	r3, [r7, #15]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	791b      	ldrb	r3, [r3, #4]
 800248e:	7bfa      	ldrb	r2, [r7, #15]
 8002490:	429a      	cmp	r2, r3
 8002492:	d3b5      	bcc.n	8002400 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6818      	ldr	r0, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	7c1a      	ldrb	r2, [r3, #16]
 800249c:	f88d 2000 	strb.w	r2, [sp]
 80024a0:	3304      	adds	r3, #4
 80024a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024a4:	f002 fcac 	bl	8004e00 <USB_DevInit>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d005      	beq.n	80024ba <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2202      	movs	r2, #2
 80024b2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e013      	b.n	80024e2 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	7b1b      	ldrb	r3, [r3, #12]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d102      	bne.n	80024d6 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 f80a 	bl	80024ea <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f002 fe67 	bl	80051ae <USB_DevDisconnect>

  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b085      	sub	sp, #20
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002518:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800251c:	f043 0303 	orr.w	r3, r3, #3
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
	...

08002534 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d101      	bne.n	8002548 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e0cc      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002548:	4b68      	ldr	r3, [pc, #416]	@ (80026ec <HAL_RCC_ClockConfig+0x1b8>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 030f 	and.w	r3, r3, #15
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	429a      	cmp	r2, r3
 8002554:	d90c      	bls.n	8002570 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002556:	4b65      	ldr	r3, [pc, #404]	@ (80026ec <HAL_RCC_ClockConfig+0x1b8>)
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800255e:	4b63      	ldr	r3, [pc, #396]	@ (80026ec <HAL_RCC_ClockConfig+0x1b8>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	429a      	cmp	r2, r3
 800256a:	d001      	beq.n	8002570 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e0b8      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d020      	beq.n	80025be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b00      	cmp	r3, #0
 8002586:	d005      	beq.n	8002594 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002588:	4b59      	ldr	r3, [pc, #356]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	4a58      	ldr	r2, [pc, #352]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 800258e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002592:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0308 	and.w	r3, r3, #8
 800259c:	2b00      	cmp	r3, #0
 800259e:	d005      	beq.n	80025ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025a0:	4b53      	ldr	r3, [pc, #332]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	4a52      	ldr	r2, [pc, #328]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 80025a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80025aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ac:	4b50      	ldr	r3, [pc, #320]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	494d      	ldr	r1, [pc, #308]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d044      	beq.n	8002654 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d107      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d2:	4b47      	ldr	r3, [pc, #284]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d119      	bne.n	8002612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e07f      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d003      	beq.n	80025f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025ee:	2b03      	cmp	r3, #3
 80025f0:	d107      	bne.n	8002602 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025f2:	4b3f      	ldr	r3, [pc, #252]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d109      	bne.n	8002612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e06f      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002602:	4b3b      	ldr	r3, [pc, #236]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e067      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002612:	4b37      	ldr	r3, [pc, #220]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f023 0203 	bic.w	r2, r3, #3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	4934      	ldr	r1, [pc, #208]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002620:	4313      	orrs	r3, r2
 8002622:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002624:	f7fe fce6 	bl	8000ff4 <HAL_GetTick>
 8002628:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800262a:	e00a      	b.n	8002642 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800262c:	f7fe fce2 	bl	8000ff4 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	f241 3288 	movw	r2, #5000	@ 0x1388
 800263a:	4293      	cmp	r3, r2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e04f      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002642:	4b2b      	ldr	r3, [pc, #172]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 020c 	and.w	r2, r3, #12
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	429a      	cmp	r2, r3
 8002652:	d1eb      	bne.n	800262c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002654:	4b25      	ldr	r3, [pc, #148]	@ (80026ec <HAL_RCC_ClockConfig+0x1b8>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 030f 	and.w	r3, r3, #15
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d20c      	bcs.n	800267c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002662:	4b22      	ldr	r3, [pc, #136]	@ (80026ec <HAL_RCC_ClockConfig+0x1b8>)
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800266a:	4b20      	ldr	r3, [pc, #128]	@ (80026ec <HAL_RCC_ClockConfig+0x1b8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	429a      	cmp	r2, r3
 8002676:	d001      	beq.n	800267c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e032      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b00      	cmp	r3, #0
 8002686:	d008      	beq.n	800269a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002688:	4b19      	ldr	r3, [pc, #100]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	4916      	ldr	r1, [pc, #88]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002696:	4313      	orrs	r3, r2
 8002698:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d009      	beq.n	80026ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026a6:	4b12      	ldr	r3, [pc, #72]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	490e      	ldr	r1, [pc, #56]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026ba:	f000 fb7f 	bl	8002dbc <HAL_RCC_GetSysClockFreq>
 80026be:	4602      	mov	r2, r0
 80026c0:	4b0b      	ldr	r3, [pc, #44]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	091b      	lsrs	r3, r3, #4
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	490a      	ldr	r1, [pc, #40]	@ (80026f4 <HAL_RCC_ClockConfig+0x1c0>)
 80026cc:	5ccb      	ldrb	r3, [r1, r3]
 80026ce:	fa22 f303 	lsr.w	r3, r2, r3
 80026d2:	4a09      	ldr	r2, [pc, #36]	@ (80026f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026d6:	4b09      	ldr	r3, [pc, #36]	@ (80026fc <HAL_RCC_ClockConfig+0x1c8>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fe fc46 	bl	8000f6c <HAL_InitTick>

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40023c00 	.word	0x40023c00
 80026f0:	40023800 	.word	0x40023800
 80026f4:	08005320 	.word	0x08005320
 80026f8:	20000000 	.word	0x20000000
 80026fc:	20000004 	.word	0x20000004

08002700 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002704:	4b03      	ldr	r3, [pc, #12]	@ (8002714 <HAL_RCC_GetHCLKFreq+0x14>)
 8002706:	681b      	ldr	r3, [r3, #0]
}
 8002708:	4618      	mov	r0, r3
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	20000000 	.word	0x20000000

08002718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800271c:	f7ff fff0 	bl	8002700 <HAL_RCC_GetHCLKFreq>
 8002720:	4602      	mov	r2, r0
 8002722:	4b05      	ldr	r3, [pc, #20]	@ (8002738 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	0a9b      	lsrs	r3, r3, #10
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	4903      	ldr	r1, [pc, #12]	@ (800273c <HAL_RCC_GetPCLK1Freq+0x24>)
 800272e:	5ccb      	ldrb	r3, [r1, r3]
 8002730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002734:	4618      	mov	r0, r3
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40023800 	.word	0x40023800
 800273c:	08005330 	.word	0x08005330

08002740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002744:	f7ff ffdc 	bl	8002700 <HAL_RCC_GetHCLKFreq>
 8002748:	4602      	mov	r2, r0
 800274a:	4b05      	ldr	r3, [pc, #20]	@ (8002760 <HAL_RCC_GetPCLK2Freq+0x20>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	0b5b      	lsrs	r3, r3, #13
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	4903      	ldr	r1, [pc, #12]	@ (8002764 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002756:	5ccb      	ldrb	r3, [r1, r3]
 8002758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800275c:	4618      	mov	r0, r3
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40023800 	.word	0x40023800
 8002764:	08005330 	.word	0x08005330

08002768 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b08c      	sub	sp, #48	@ 0x30
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002770:	2300      	movs	r3, #0
 8002772:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8002774:	2300      	movs	r3, #0
 8002776:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002778:	2300      	movs	r3, #0
 800277a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002784:	2300      	movs	r3, #0
 8002786:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800278c:	2300      	movs	r3, #0
 800278e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8002790:	2300      	movs	r3, #0
 8002792:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b00      	cmp	r3, #0
 800279e:	d010      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80027a0:	4b6f      	ldr	r3, [pc, #444]	@ (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027a6:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ae:	496c      	ldr	r1, [pc, #432]	@ (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80027be:	2301      	movs	r3, #1
 80027c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d010      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80027ce:	4b64      	ldr	r3, [pc, #400]	@ (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027d4:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027dc:	4960      	ldr	r1, [pc, #384]	@ (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d101      	bne.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80027ec:	2301      	movs	r3, #1
 80027ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d017      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027fc:	4b58      	ldr	r3, [pc, #352]	@ (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002802:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280a:	4955      	ldr	r1, [pc, #340]	@ (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800280c:	4313      	orrs	r3, r2
 800280e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002816:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800281a:	d101      	bne.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800281c:	2301      	movs	r3, #1
 800281e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002828:	2301      	movs	r3, #1
 800282a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0308 	and.w	r3, r3, #8
 8002834:	2b00      	cmp	r3, #0
 8002836:	d017      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002838:	4b49      	ldr	r3, [pc, #292]	@ (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800283a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800283e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002846:	4946      	ldr	r1, [pc, #280]	@ (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002848:	4313      	orrs	r3, r2
 800284a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002852:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002856:	d101      	bne.n	800285c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002858:	2301      	movs	r3, #1
 800285a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002864:	2301      	movs	r3, #1
 8002866:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0320 	and.w	r3, r3, #32
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 808a 	beq.w	800298a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	60bb      	str	r3, [r7, #8]
 800287a:	4b39      	ldr	r3, [pc, #228]	@ (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287e:	4a38      	ldr	r2, [pc, #224]	@ (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002880:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002884:	6413      	str	r3, [r2, #64]	@ 0x40
 8002886:	4b36      	ldr	r3, [pc, #216]	@ (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800288e:	60bb      	str	r3, [r7, #8]
 8002890:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002892:	4b34      	ldr	r3, [pc, #208]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a33      	ldr	r2, [pc, #204]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002898:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800289c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800289e:	f7fe fba9 	bl	8000ff4 <HAL_GetTick>
 80028a2:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80028a4:	e008      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80028a6:	f7fe fba5 	bl	8000ff4 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e278      	b.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80028b8:	4b2a      	ldr	r3, [pc, #168]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0f0      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028c4:	4b26      	ldr	r3, [pc, #152]	@ (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028cc:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d02f      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028dc:	6a3a      	ldr	r2, [r7, #32]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d028      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028e2:	4b1f      	ldr	r3, [pc, #124]	@ (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028ea:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028ec:	4b1e      	ldr	r3, [pc, #120]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80028ee:	2201      	movs	r2, #1
 80028f0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80028f8:	4a19      	ldr	r2, [pc, #100]	@ (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028fa:	6a3b      	ldr	r3, [r7, #32]
 80028fc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80028fe:	4b18      	ldr	r3, [pc, #96]	@ (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b01      	cmp	r3, #1
 8002908:	d114      	bne.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800290a:	f7fe fb73 	bl	8000ff4 <HAL_GetTick>
 800290e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002910:	e00a      	b.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002912:	f7fe fb6f 	bl	8000ff4 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002920:	4293      	cmp	r3, r2
 8002922:	d901      	bls.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e240      	b.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002928:	4b0d      	ldr	r3, [pc, #52]	@ (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800292a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0ee      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002938:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800293c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002940:	d114      	bne.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002942:	4b07      	ldr	r3, [pc, #28]	@ (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002952:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002956:	4902      	ldr	r1, [pc, #8]	@ (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002958:	4313      	orrs	r3, r2
 800295a:	608b      	str	r3, [r1, #8]
 800295c:	e00c      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800295e:	bf00      	nop
 8002960:	40023800 	.word	0x40023800
 8002964:	40007000 	.word	0x40007000
 8002968:	42470e40 	.word	0x42470e40
 800296c:	4b4a      	ldr	r3, [pc, #296]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	4a49      	ldr	r2, [pc, #292]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002972:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002976:	6093      	str	r3, [r2, #8]
 8002978:	4b47      	ldr	r3, [pc, #284]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800297a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002984:	4944      	ldr	r1, [pc, #272]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002986:	4313      	orrs	r3, r2
 8002988:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0310 	and.w	r3, r3, #16
 8002992:	2b00      	cmp	r3, #0
 8002994:	d004      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800299c:	4b3f      	ldr	r3, [pc, #252]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800299e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00a      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80029ac:	4b3a      	ldr	r3, [pc, #232]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029b2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ba:	4937      	ldr	r1, [pc, #220]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00a      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80029ce:	4b32      	ldr	r3, [pc, #200]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029d4:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029dc:	492e      	ldr	r1, [pc, #184]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d011      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80029f0:	4b29      	ldr	r3, [pc, #164]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029f6:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029fe:	4926      	ldr	r1, [pc, #152]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a0e:	d101      	bne.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002a10:	2301      	movs	r3, #1
 8002a12:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00a      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002a20:	4b1d      	ldr	r3, [pc, #116]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a26:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a2e:	491a      	ldr	r1, [pc, #104]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d011      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002a42:	4b15      	ldr	r3, [pc, #84]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a48:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a50:	4911      	ldr	r1, [pc, #68]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a60:	d101      	bne.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002a62:	2301      	movs	r3, #1
 8002a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d005      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a74:	f040 80ff 	bne.w	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a78:	4b09      	ldr	r3, [pc, #36]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a7e:	f7fe fab9 	bl	8000ff4 <HAL_GetTick>
 8002a82:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a84:	e00e      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002a86:	f7fe fab5 	bl	8000ff4 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d907      	bls.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e188      	b.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	424711e0 	.word	0x424711e0
 8002aa0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002aa4:	4b7e      	ldr	r3, [pc, #504]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1ea      	bne.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d009      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d028      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d124      	bne.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002ad8:	4b71      	ldr	r3, [pc, #452]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ada:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ade:	0c1b      	lsrs	r3, r3, #16
 8002ae0:	f003 0303 	and.w	r3, r3, #3
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002aea:	4b6d      	ldr	r3, [pc, #436]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002af0:	0e1b      	lsrs	r3, r3, #24
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	019b      	lsls	r3, r3, #6
 8002b02:	431a      	orrs	r2, r3
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	085b      	lsrs	r3, r3, #1
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	041b      	lsls	r3, r3, #16
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	061b      	lsls	r3, r3, #24
 8002b12:	431a      	orrs	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	071b      	lsls	r3, r3, #28
 8002b1a:	4961      	ldr	r1, [pc, #388]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0304 	and.w	r3, r3, #4
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d004      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b36:	d00a      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d035      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b4c:	d130      	bne.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002b4e:	4b54      	ldr	r3, [pc, #336]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b54:	0c1b      	lsrs	r3, r3, #16
 8002b56:	f003 0303 	and.w	r3, r3, #3
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b60:	4b4f      	ldr	r3, [pc, #316]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b66:	0f1b      	lsrs	r3, r3, #28
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	019b      	lsls	r3, r3, #6
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	085b      	lsrs	r3, r3, #1
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	041b      	lsls	r3, r3, #16
 8002b82:	431a      	orrs	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	061b      	lsls	r3, r3, #24
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	071b      	lsls	r3, r3, #28
 8002b90:	4943      	ldr	r1, [pc, #268]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002b98:	4b41      	ldr	r3, [pc, #260]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b9e:	f023 021f 	bic.w	r2, r3, #31
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	493d      	ldr	r1, [pc, #244]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d029      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bc4:	d124      	bne.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002bc6:	4b36      	ldr	r3, [pc, #216]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bcc:	0c1b      	lsrs	r3, r3, #16
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002bd8:	4b31      	ldr	r3, [pc, #196]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bde:	0f1b      	lsrs	r3, r3, #28
 8002be0:	f003 0307 	and.w	r3, r3, #7
 8002be4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	019b      	lsls	r3, r3, #6
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	085b      	lsrs	r3, r3, #1
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	041b      	lsls	r3, r3, #16
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	061b      	lsls	r3, r3, #24
 8002c02:	431a      	orrs	r2, r3
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	071b      	lsls	r3, r3, #28
 8002c08:	4925      	ldr	r1, [pc, #148]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d016      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	019b      	lsls	r3, r3, #6
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	085b      	lsrs	r3, r3, #1
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	041b      	lsls	r3, r3, #16
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	061b      	lsls	r3, r3, #24
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	071b      	lsls	r3, r3, #28
 8002c42:	4917      	ldr	r1, [pc, #92]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002c4a:	4b16      	ldr	r3, [pc, #88]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c50:	f7fe f9d0 	bl	8000ff4 <HAL_GetTick>
 8002c54:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002c58:	f7fe f9cc 	bl	8000ff4 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e09f      	b.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0f0      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	f040 8095 	bne.w	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c84:	f7fe f9b6 	bl	8000ff4 <HAL_GetTick>
 8002c88:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c8a:	e00f      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002c8c:	f7fe f9b2 	bl	8000ff4 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d908      	bls.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e085      	b.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002c9e:	bf00      	nop
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	42470068 	.word	0x42470068
 8002ca8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002cac:	4b41      	ldr	r3, [pc, #260]	@ (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002cb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002cb8:	d0e8      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0304 	and.w	r3, r3, #4
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d009      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d02b      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d127      	bne.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002ce2:	4b34      	ldr	r3, [pc, #208]	@ (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ce8:	0c1b      	lsrs	r3, r3, #16
 8002cea:	f003 0303 	and.w	r3, r3, #3
 8002cee:	3301      	adds	r3, #1
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	699a      	ldr	r2, [r3, #24]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	69db      	ldr	r3, [r3, #28]
 8002cfc:	019b      	lsls	r3, r3, #6
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	085b      	lsrs	r3, r3, #1
 8002d04:	3b01      	subs	r3, #1
 8002d06:	041b      	lsls	r3, r3, #16
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0e:	061b      	lsls	r3, r3, #24
 8002d10:	4928      	ldr	r1, [pc, #160]	@ (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002d18:	4b26      	ldr	r3, [pc, #152]	@ (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d1e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d26:	3b01      	subs	r3, #1
 8002d28:	021b      	lsls	r3, r3, #8
 8002d2a:	4922      	ldr	r1, [pc, #136]	@ (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d01d      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d46:	d118      	bne.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d48:	4b1a      	ldr	r3, [pc, #104]	@ (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d4e:	0e1b      	lsrs	r3, r3, #24
 8002d50:	f003 030f 	and.w	r3, r3, #15
 8002d54:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	699a      	ldr	r2, [r3, #24]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	019b      	lsls	r3, r3, #6
 8002d60:	431a      	orrs	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	085b      	lsrs	r3, r3, #1
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	041b      	lsls	r3, r3, #16
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	061b      	lsls	r3, r3, #24
 8002d72:	4910      	ldr	r1, [pc, #64]	@ (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d80:	f7fe f938 	bl	8000ff4 <HAL_GetTick>
 8002d84:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002d88:	f7fe f934 	bl	8000ff4 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e007      	b.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d9a:	4b06      	ldr	r3, [pc, #24]	@ (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002da2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002da6:	d1ef      	bne.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3730      	adds	r7, #48	@ 0x30
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40023800 	.word	0x40023800
 8002db8:	42470070 	.word	0x42470070

08002dbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dc0:	b0ae      	sub	sp, #184	@ 0xb8
 8002dc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002de2:	4bcb      	ldr	r3, [pc, #812]	@ (8003110 <HAL_RCC_GetSysClockFreq+0x354>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 030c 	and.w	r3, r3, #12
 8002dea:	2b0c      	cmp	r3, #12
 8002dec:	f200 8206 	bhi.w	80031fc <HAL_RCC_GetSysClockFreq+0x440>
 8002df0:	a201      	add	r2, pc, #4	@ (adr r2, 8002df8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df6:	bf00      	nop
 8002df8:	08002e2d 	.word	0x08002e2d
 8002dfc:	080031fd 	.word	0x080031fd
 8002e00:	080031fd 	.word	0x080031fd
 8002e04:	080031fd 	.word	0x080031fd
 8002e08:	08002e35 	.word	0x08002e35
 8002e0c:	080031fd 	.word	0x080031fd
 8002e10:	080031fd 	.word	0x080031fd
 8002e14:	080031fd 	.word	0x080031fd
 8002e18:	08002e3d 	.word	0x08002e3d
 8002e1c:	080031fd 	.word	0x080031fd
 8002e20:	080031fd 	.word	0x080031fd
 8002e24:	080031fd 	.word	0x080031fd
 8002e28:	0800302d 	.word	0x0800302d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e2c:	4bb9      	ldr	r3, [pc, #740]	@ (8003114 <HAL_RCC_GetSysClockFreq+0x358>)
 8002e2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8002e32:	e1e7      	b.n	8003204 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e34:	4bb8      	ldr	r3, [pc, #736]	@ (8003118 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002e36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e3a:	e1e3      	b.n	8003204 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e3c:	4bb4      	ldr	r3, [pc, #720]	@ (8003110 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e48:	4bb1      	ldr	r3, [pc, #708]	@ (8003110 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d071      	beq.n	8002f38 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e54:	4bae      	ldr	r3, [pc, #696]	@ (8003110 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	099b      	lsrs	r3, r3, #6
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002e60:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002e64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e6c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002e70:	2300      	movs	r3, #0
 8002e72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002e76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002e7a:	4622      	mov	r2, r4
 8002e7c:	462b      	mov	r3, r5
 8002e7e:	f04f 0000 	mov.w	r0, #0
 8002e82:	f04f 0100 	mov.w	r1, #0
 8002e86:	0159      	lsls	r1, r3, #5
 8002e88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e8c:	0150      	lsls	r0, r2, #5
 8002e8e:	4602      	mov	r2, r0
 8002e90:	460b      	mov	r3, r1
 8002e92:	4621      	mov	r1, r4
 8002e94:	1a51      	subs	r1, r2, r1
 8002e96:	6439      	str	r1, [r7, #64]	@ 0x40
 8002e98:	4629      	mov	r1, r5
 8002e9a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ea0:	f04f 0200 	mov.w	r2, #0
 8002ea4:	f04f 0300 	mov.w	r3, #0
 8002ea8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002eac:	4649      	mov	r1, r9
 8002eae:	018b      	lsls	r3, r1, #6
 8002eb0:	4641      	mov	r1, r8
 8002eb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002eb6:	4641      	mov	r1, r8
 8002eb8:	018a      	lsls	r2, r1, #6
 8002eba:	4641      	mov	r1, r8
 8002ebc:	1a51      	subs	r1, r2, r1
 8002ebe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002ec0:	4649      	mov	r1, r9
 8002ec2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	f04f 0300 	mov.w	r3, #0
 8002ed0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002ed4:	4649      	mov	r1, r9
 8002ed6:	00cb      	lsls	r3, r1, #3
 8002ed8:	4641      	mov	r1, r8
 8002eda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ede:	4641      	mov	r1, r8
 8002ee0:	00ca      	lsls	r2, r1, #3
 8002ee2:	4610      	mov	r0, r2
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	4622      	mov	r2, r4
 8002eea:	189b      	adds	r3, r3, r2
 8002eec:	633b      	str	r3, [r7, #48]	@ 0x30
 8002eee:	462b      	mov	r3, r5
 8002ef0:	460a      	mov	r2, r1
 8002ef2:	eb42 0303 	adc.w	r3, r2, r3
 8002ef6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ef8:	f04f 0200 	mov.w	r2, #0
 8002efc:	f04f 0300 	mov.w	r3, #0
 8002f00:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002f04:	4629      	mov	r1, r5
 8002f06:	024b      	lsls	r3, r1, #9
 8002f08:	4621      	mov	r1, r4
 8002f0a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f0e:	4621      	mov	r1, r4
 8002f10:	024a      	lsls	r2, r1, #9
 8002f12:	4610      	mov	r0, r2
 8002f14:	4619      	mov	r1, r3
 8002f16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002f20:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002f24:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002f28:	f7fd f96c 	bl	8000204 <__aeabi_uldivmod>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	460b      	mov	r3, r1
 8002f30:	4613      	mov	r3, r2
 8002f32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f36:	e067      	b.n	8003008 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f38:	4b75      	ldr	r3, [pc, #468]	@ (8003110 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	099b      	lsrs	r3, r3, #6
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002f44:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002f48:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f50:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002f52:	2300      	movs	r3, #0
 8002f54:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002f56:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002f5a:	4622      	mov	r2, r4
 8002f5c:	462b      	mov	r3, r5
 8002f5e:	f04f 0000 	mov.w	r0, #0
 8002f62:	f04f 0100 	mov.w	r1, #0
 8002f66:	0159      	lsls	r1, r3, #5
 8002f68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f6c:	0150      	lsls	r0, r2, #5
 8002f6e:	4602      	mov	r2, r0
 8002f70:	460b      	mov	r3, r1
 8002f72:	4621      	mov	r1, r4
 8002f74:	1a51      	subs	r1, r2, r1
 8002f76:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002f78:	4629      	mov	r1, r5
 8002f7a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	f04f 0300 	mov.w	r3, #0
 8002f88:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002f8c:	4649      	mov	r1, r9
 8002f8e:	018b      	lsls	r3, r1, #6
 8002f90:	4641      	mov	r1, r8
 8002f92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f96:	4641      	mov	r1, r8
 8002f98:	018a      	lsls	r2, r1, #6
 8002f9a:	4641      	mov	r1, r8
 8002f9c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fa0:	4649      	mov	r1, r9
 8002fa2:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fa6:	f04f 0200 	mov.w	r2, #0
 8002faa:	f04f 0300 	mov.w	r3, #0
 8002fae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fb2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002fb6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fba:	4692      	mov	sl, r2
 8002fbc:	469b      	mov	fp, r3
 8002fbe:	4623      	mov	r3, r4
 8002fc0:	eb1a 0303 	adds.w	r3, sl, r3
 8002fc4:	623b      	str	r3, [r7, #32]
 8002fc6:	462b      	mov	r3, r5
 8002fc8:	eb4b 0303 	adc.w	r3, fp, r3
 8002fcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	f04f 0300 	mov.w	r3, #0
 8002fd6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002fda:	4629      	mov	r1, r5
 8002fdc:	028b      	lsls	r3, r1, #10
 8002fde:	4621      	mov	r1, r4
 8002fe0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fe4:	4621      	mov	r1, r4
 8002fe6:	028a      	lsls	r2, r1, #10
 8002fe8:	4610      	mov	r0, r2
 8002fea:	4619      	mov	r1, r3
 8002fec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	673b      	str	r3, [r7, #112]	@ 0x70
 8002ff4:	677a      	str	r2, [r7, #116]	@ 0x74
 8002ff6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002ffa:	f7fd f903 	bl	8000204 <__aeabi_uldivmod>
 8002ffe:	4602      	mov	r2, r0
 8003000:	460b      	mov	r3, r1
 8003002:	4613      	mov	r3, r2
 8003004:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003008:	4b41      	ldr	r3, [pc, #260]	@ (8003110 <HAL_RCC_GetSysClockFreq+0x354>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	0c1b      	lsrs	r3, r3, #16
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	3301      	adds	r3, #1
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800301a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800301e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003022:	fbb2 f3f3 	udiv	r3, r2, r3
 8003026:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800302a:	e0eb      	b.n	8003204 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800302c:	4b38      	ldr	r3, [pc, #224]	@ (8003110 <HAL_RCC_GetSysClockFreq+0x354>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003034:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003038:	4b35      	ldr	r3, [pc, #212]	@ (8003110 <HAL_RCC_GetSysClockFreq+0x354>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d06b      	beq.n	800311c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003044:	4b32      	ldr	r3, [pc, #200]	@ (8003110 <HAL_RCC_GetSysClockFreq+0x354>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	099b      	lsrs	r3, r3, #6
 800304a:	2200      	movs	r2, #0
 800304c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800304e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003050:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003056:	663b      	str	r3, [r7, #96]	@ 0x60
 8003058:	2300      	movs	r3, #0
 800305a:	667b      	str	r3, [r7, #100]	@ 0x64
 800305c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003060:	4622      	mov	r2, r4
 8003062:	462b      	mov	r3, r5
 8003064:	f04f 0000 	mov.w	r0, #0
 8003068:	f04f 0100 	mov.w	r1, #0
 800306c:	0159      	lsls	r1, r3, #5
 800306e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003072:	0150      	lsls	r0, r2, #5
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	4621      	mov	r1, r4
 800307a:	1a51      	subs	r1, r2, r1
 800307c:	61b9      	str	r1, [r7, #24]
 800307e:	4629      	mov	r1, r5
 8003080:	eb63 0301 	sbc.w	r3, r3, r1
 8003084:	61fb      	str	r3, [r7, #28]
 8003086:	f04f 0200 	mov.w	r2, #0
 800308a:	f04f 0300 	mov.w	r3, #0
 800308e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003092:	4659      	mov	r1, fp
 8003094:	018b      	lsls	r3, r1, #6
 8003096:	4651      	mov	r1, sl
 8003098:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800309c:	4651      	mov	r1, sl
 800309e:	018a      	lsls	r2, r1, #6
 80030a0:	4651      	mov	r1, sl
 80030a2:	ebb2 0801 	subs.w	r8, r2, r1
 80030a6:	4659      	mov	r1, fp
 80030a8:	eb63 0901 	sbc.w	r9, r3, r1
 80030ac:	f04f 0200 	mov.w	r2, #0
 80030b0:	f04f 0300 	mov.w	r3, #0
 80030b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030c0:	4690      	mov	r8, r2
 80030c2:	4699      	mov	r9, r3
 80030c4:	4623      	mov	r3, r4
 80030c6:	eb18 0303 	adds.w	r3, r8, r3
 80030ca:	613b      	str	r3, [r7, #16]
 80030cc:	462b      	mov	r3, r5
 80030ce:	eb49 0303 	adc.w	r3, r9, r3
 80030d2:	617b      	str	r3, [r7, #20]
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	f04f 0300 	mov.w	r3, #0
 80030dc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80030e0:	4629      	mov	r1, r5
 80030e2:	024b      	lsls	r3, r1, #9
 80030e4:	4621      	mov	r1, r4
 80030e6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030ea:	4621      	mov	r1, r4
 80030ec:	024a      	lsls	r2, r1, #9
 80030ee:	4610      	mov	r0, r2
 80030f0:	4619      	mov	r1, r3
 80030f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80030f6:	2200      	movs	r2, #0
 80030f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80030fa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80030fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003100:	f7fd f880 	bl	8000204 <__aeabi_uldivmod>
 8003104:	4602      	mov	r2, r0
 8003106:	460b      	mov	r3, r1
 8003108:	4613      	mov	r3, r2
 800310a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800310e:	e065      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0x420>
 8003110:	40023800 	.word	0x40023800
 8003114:	00f42400 	.word	0x00f42400
 8003118:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800311c:	4b3d      	ldr	r3, [pc, #244]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x458>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	099b      	lsrs	r3, r3, #6
 8003122:	2200      	movs	r2, #0
 8003124:	4618      	mov	r0, r3
 8003126:	4611      	mov	r1, r2
 8003128:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800312c:	653b      	str	r3, [r7, #80]	@ 0x50
 800312e:	2300      	movs	r3, #0
 8003130:	657b      	str	r3, [r7, #84]	@ 0x54
 8003132:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003136:	4642      	mov	r2, r8
 8003138:	464b      	mov	r3, r9
 800313a:	f04f 0000 	mov.w	r0, #0
 800313e:	f04f 0100 	mov.w	r1, #0
 8003142:	0159      	lsls	r1, r3, #5
 8003144:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003148:	0150      	lsls	r0, r2, #5
 800314a:	4602      	mov	r2, r0
 800314c:	460b      	mov	r3, r1
 800314e:	4641      	mov	r1, r8
 8003150:	1a51      	subs	r1, r2, r1
 8003152:	60b9      	str	r1, [r7, #8]
 8003154:	4649      	mov	r1, r9
 8003156:	eb63 0301 	sbc.w	r3, r3, r1
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	f04f 0200 	mov.w	r2, #0
 8003160:	f04f 0300 	mov.w	r3, #0
 8003164:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003168:	4659      	mov	r1, fp
 800316a:	018b      	lsls	r3, r1, #6
 800316c:	4651      	mov	r1, sl
 800316e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003172:	4651      	mov	r1, sl
 8003174:	018a      	lsls	r2, r1, #6
 8003176:	4651      	mov	r1, sl
 8003178:	1a54      	subs	r4, r2, r1
 800317a:	4659      	mov	r1, fp
 800317c:	eb63 0501 	sbc.w	r5, r3, r1
 8003180:	f04f 0200 	mov.w	r2, #0
 8003184:	f04f 0300 	mov.w	r3, #0
 8003188:	00eb      	lsls	r3, r5, #3
 800318a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800318e:	00e2      	lsls	r2, r4, #3
 8003190:	4614      	mov	r4, r2
 8003192:	461d      	mov	r5, r3
 8003194:	4643      	mov	r3, r8
 8003196:	18e3      	adds	r3, r4, r3
 8003198:	603b      	str	r3, [r7, #0]
 800319a:	464b      	mov	r3, r9
 800319c:	eb45 0303 	adc.w	r3, r5, r3
 80031a0:	607b      	str	r3, [r7, #4]
 80031a2:	f04f 0200 	mov.w	r2, #0
 80031a6:	f04f 0300 	mov.w	r3, #0
 80031aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031ae:	4629      	mov	r1, r5
 80031b0:	028b      	lsls	r3, r1, #10
 80031b2:	4621      	mov	r1, r4
 80031b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031b8:	4621      	mov	r1, r4
 80031ba:	028a      	lsls	r2, r1, #10
 80031bc:	4610      	mov	r0, r2
 80031be:	4619      	mov	r1, r3
 80031c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80031c4:	2200      	movs	r2, #0
 80031c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031c8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80031ca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80031ce:	f7fd f819 	bl	8000204 <__aeabi_uldivmod>
 80031d2:	4602      	mov	r2, r0
 80031d4:	460b      	mov	r3, r1
 80031d6:	4613      	mov	r3, r2
 80031d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80031dc:	4b0d      	ldr	r3, [pc, #52]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x458>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	0f1b      	lsrs	r3, r3, #28
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80031ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80031ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80031f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80031fa:	e003      	b.n	8003204 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031fc:	4b06      	ldr	r3, [pc, #24]	@ (8003218 <HAL_RCC_GetSysClockFreq+0x45c>)
 80031fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003202:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003204:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003208:	4618      	mov	r0, r3
 800320a:	37b8      	adds	r7, #184	@ 0xb8
 800320c:	46bd      	mov	sp, r7
 800320e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003212:	bf00      	nop
 8003214:	40023800 	.word	0x40023800
 8003218:	00f42400 	.word	0x00f42400

0800321c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e28d      	b.n	800374a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b00      	cmp	r3, #0
 8003238:	f000 8083 	beq.w	8003342 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800323c:	4b94      	ldr	r3, [pc, #592]	@ (8003490 <HAL_RCC_OscConfig+0x274>)
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f003 030c 	and.w	r3, r3, #12
 8003244:	2b04      	cmp	r3, #4
 8003246:	d019      	beq.n	800327c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003248:	4b91      	ldr	r3, [pc, #580]	@ (8003490 <HAL_RCC_OscConfig+0x274>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003250:	2b08      	cmp	r3, #8
 8003252:	d106      	bne.n	8003262 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003254:	4b8e      	ldr	r3, [pc, #568]	@ (8003490 <HAL_RCC_OscConfig+0x274>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800325c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003260:	d00c      	beq.n	800327c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003262:	4b8b      	ldr	r3, [pc, #556]	@ (8003490 <HAL_RCC_OscConfig+0x274>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800326a:	2b0c      	cmp	r3, #12
 800326c:	d112      	bne.n	8003294 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800326e:	4b88      	ldr	r3, [pc, #544]	@ (8003490 <HAL_RCC_OscConfig+0x274>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003276:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800327a:	d10b      	bne.n	8003294 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800327c:	4b84      	ldr	r3, [pc, #528]	@ (8003490 <HAL_RCC_OscConfig+0x274>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d05b      	beq.n	8003340 <HAL_RCC_OscConfig+0x124>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d157      	bne.n	8003340 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e25a      	b.n	800374a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800329c:	d106      	bne.n	80032ac <HAL_RCC_OscConfig+0x90>
 800329e:	4b7c      	ldr	r3, [pc, #496]	@ (8003490 <HAL_RCC_OscConfig+0x274>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a7b      	ldr	r2, [pc, #492]	@ (8003490 <HAL_RCC_OscConfig+0x274>)
 80032a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	e01d      	b.n	80032e8 <HAL_RCC_OscConfig+0xcc>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032b4:	d10c      	bne.n	80032d0 <HAL_RCC_OscConfig+0xb4>
 80032b6:	4b76      	ldr	r3, [pc, #472]	@ (8003490 <HAL_RCC_OscConfig+0x274>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a75      	ldr	r2, [pc, #468]	@ (8003490 <HAL_RCC_OscConfig+0x274>)
 80032bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032c0:	6013      	str	r3, [r2, #0]
 80032c2:	4b73      	ldr	r3, [pc, #460]	@ (8003490 <HAL_RCC_OscConfig+0x274>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a72      	ldr	r2, [pc, #456]	@ (8003490 <HAL_RCC_OscConfig+0x274>)
 80032c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	e00b      	b.n	80032e8 <HAL_RCC_OscConfig+0xcc>
 80032d0:	4b6f      	ldr	r3, [pc, #444]	@ (8003490 <HAL_RCC_OscConfig+0x274>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a6e      	ldr	r2, [pc, #440]	@ (8003490 <HAL_RCC_OscConfig+0x274>)
 80032d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032da:	6013      	str	r3, [r2, #0]
 80032dc:	4b6c      	ldr	r3, [pc, #432]	@ (8003490 <HAL_RCC_OscConfig+0x274>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a6b      	ldr	r2, [pc, #428]	@ (8003490 <HAL_RCC_OscConfig+0x274>)
 80032e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d013      	beq.n	8003318 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f0:	f7fd fe80 	bl	8000ff4 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032f8:	f7fd fe7c 	bl	8000ff4 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b64      	cmp	r3, #100	@ 0x64
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e21f      	b.n	800374a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800330a:	4b61      	ldr	r3, [pc, #388]	@ (8003490 <HAL_RCC_OscConfig+0x274>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d0f0      	beq.n	80032f8 <HAL_RCC_OscConfig+0xdc>
 8003316:	e014      	b.n	8003342 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003318:	f7fd fe6c 	bl	8000ff4 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003320:	f7fd fe68 	bl	8000ff4 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b64      	cmp	r3, #100	@ 0x64
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e20b      	b.n	800374a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003332:	4b57      	ldr	r3, [pc, #348]	@ (8003490 <HAL_RCC_OscConfig+0x274>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1f0      	bne.n	8003320 <HAL_RCC_OscConfig+0x104>
 800333e:	e000      	b.n	8003342 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d06f      	beq.n	800342e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800334e:	4b50      	ldr	r3, [pc, #320]	@ (8003490 <HAL_RCC_OscConfig+0x274>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 030c 	and.w	r3, r3, #12
 8003356:	2b00      	cmp	r3, #0
 8003358:	d017      	beq.n	800338a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800335a:	4b4d      	ldr	r3, [pc, #308]	@ (8003490 <HAL_RCC_OscConfig+0x274>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003362:	2b08      	cmp	r3, #8
 8003364:	d105      	bne.n	8003372 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003366:	4b4a      	ldr	r3, [pc, #296]	@ (8003490 <HAL_RCC_OscConfig+0x274>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00b      	beq.n	800338a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003372:	4b47      	ldr	r3, [pc, #284]	@ (8003490 <HAL_RCC_OscConfig+0x274>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800337a:	2b0c      	cmp	r3, #12
 800337c:	d11c      	bne.n	80033b8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800337e:	4b44      	ldr	r3, [pc, #272]	@ (8003490 <HAL_RCC_OscConfig+0x274>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d116      	bne.n	80033b8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800338a:	4b41      	ldr	r3, [pc, #260]	@ (8003490 <HAL_RCC_OscConfig+0x274>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d005      	beq.n	80033a2 <HAL_RCC_OscConfig+0x186>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d001      	beq.n	80033a2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e1d3      	b.n	800374a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a2:	4b3b      	ldr	r3, [pc, #236]	@ (8003490 <HAL_RCC_OscConfig+0x274>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	4937      	ldr	r1, [pc, #220]	@ (8003490 <HAL_RCC_OscConfig+0x274>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033b6:	e03a      	b.n	800342e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d020      	beq.n	8003402 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033c0:	4b34      	ldr	r3, [pc, #208]	@ (8003494 <HAL_RCC_OscConfig+0x278>)
 80033c2:	2201      	movs	r2, #1
 80033c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c6:	f7fd fe15 	bl	8000ff4 <HAL_GetTick>
 80033ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033cc:	e008      	b.n	80033e0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033ce:	f7fd fe11 	bl	8000ff4 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d901      	bls.n	80033e0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e1b4      	b.n	800374a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e0:	4b2b      	ldr	r3, [pc, #172]	@ (8003490 <HAL_RCC_OscConfig+0x274>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d0f0      	beq.n	80033ce <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ec:	4b28      	ldr	r3, [pc, #160]	@ (8003490 <HAL_RCC_OscConfig+0x274>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	4925      	ldr	r1, [pc, #148]	@ (8003490 <HAL_RCC_OscConfig+0x274>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	600b      	str	r3, [r1, #0]
 8003400:	e015      	b.n	800342e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003402:	4b24      	ldr	r3, [pc, #144]	@ (8003494 <HAL_RCC_OscConfig+0x278>)
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003408:	f7fd fdf4 	bl	8000ff4 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003410:	f7fd fdf0 	bl	8000ff4 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e193      	b.n	800374a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003422:	4b1b      	ldr	r3, [pc, #108]	@ (8003490 <HAL_RCC_OscConfig+0x274>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1f0      	bne.n	8003410 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0308 	and.w	r3, r3, #8
 8003436:	2b00      	cmp	r3, #0
 8003438:	d036      	beq.n	80034a8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d016      	beq.n	8003470 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003442:	4b15      	ldr	r3, [pc, #84]	@ (8003498 <HAL_RCC_OscConfig+0x27c>)
 8003444:	2201      	movs	r2, #1
 8003446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003448:	f7fd fdd4 	bl	8000ff4 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003450:	f7fd fdd0 	bl	8000ff4 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e173      	b.n	800374a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003462:	4b0b      	ldr	r3, [pc, #44]	@ (8003490 <HAL_RCC_OscConfig+0x274>)
 8003464:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0f0      	beq.n	8003450 <HAL_RCC_OscConfig+0x234>
 800346e:	e01b      	b.n	80034a8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003470:	4b09      	ldr	r3, [pc, #36]	@ (8003498 <HAL_RCC_OscConfig+0x27c>)
 8003472:	2200      	movs	r2, #0
 8003474:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003476:	f7fd fdbd 	bl	8000ff4 <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800347c:	e00e      	b.n	800349c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800347e:	f7fd fdb9 	bl	8000ff4 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d907      	bls.n	800349c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e15c      	b.n	800374a <HAL_RCC_OscConfig+0x52e>
 8003490:	40023800 	.word	0x40023800
 8003494:	42470000 	.word	0x42470000
 8003498:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800349c:	4b8a      	ldr	r3, [pc, #552]	@ (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 800349e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1ea      	bne.n	800347e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 8097 	beq.w	80035e4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034b6:	2300      	movs	r3, #0
 80034b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ba:	4b83      	ldr	r3, [pc, #524]	@ (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 80034bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10f      	bne.n	80034e6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034c6:	2300      	movs	r3, #0
 80034c8:	60bb      	str	r3, [r7, #8]
 80034ca:	4b7f      	ldr	r3, [pc, #508]	@ (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 80034cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ce:	4a7e      	ldr	r2, [pc, #504]	@ (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 80034d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80034d6:	4b7c      	ldr	r3, [pc, #496]	@ (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 80034d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034de:	60bb      	str	r3, [r7, #8]
 80034e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034e2:	2301      	movs	r3, #1
 80034e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e6:	4b79      	ldr	r3, [pc, #484]	@ (80036cc <HAL_RCC_OscConfig+0x4b0>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d118      	bne.n	8003524 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034f2:	4b76      	ldr	r3, [pc, #472]	@ (80036cc <HAL_RCC_OscConfig+0x4b0>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a75      	ldr	r2, [pc, #468]	@ (80036cc <HAL_RCC_OscConfig+0x4b0>)
 80034f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034fe:	f7fd fd79 	bl	8000ff4 <HAL_GetTick>
 8003502:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003504:	e008      	b.n	8003518 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003506:	f7fd fd75 	bl	8000ff4 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e118      	b.n	800374a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003518:	4b6c      	ldr	r3, [pc, #432]	@ (80036cc <HAL_RCC_OscConfig+0x4b0>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0f0      	beq.n	8003506 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d106      	bne.n	800353a <HAL_RCC_OscConfig+0x31e>
 800352c:	4b66      	ldr	r3, [pc, #408]	@ (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 800352e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003530:	4a65      	ldr	r2, [pc, #404]	@ (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 8003532:	f043 0301 	orr.w	r3, r3, #1
 8003536:	6713      	str	r3, [r2, #112]	@ 0x70
 8003538:	e01c      	b.n	8003574 <HAL_RCC_OscConfig+0x358>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	2b05      	cmp	r3, #5
 8003540:	d10c      	bne.n	800355c <HAL_RCC_OscConfig+0x340>
 8003542:	4b61      	ldr	r3, [pc, #388]	@ (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 8003544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003546:	4a60      	ldr	r2, [pc, #384]	@ (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 8003548:	f043 0304 	orr.w	r3, r3, #4
 800354c:	6713      	str	r3, [r2, #112]	@ 0x70
 800354e:	4b5e      	ldr	r3, [pc, #376]	@ (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 8003550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003552:	4a5d      	ldr	r2, [pc, #372]	@ (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 8003554:	f043 0301 	orr.w	r3, r3, #1
 8003558:	6713      	str	r3, [r2, #112]	@ 0x70
 800355a:	e00b      	b.n	8003574 <HAL_RCC_OscConfig+0x358>
 800355c:	4b5a      	ldr	r3, [pc, #360]	@ (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 800355e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003560:	4a59      	ldr	r2, [pc, #356]	@ (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 8003562:	f023 0301 	bic.w	r3, r3, #1
 8003566:	6713      	str	r3, [r2, #112]	@ 0x70
 8003568:	4b57      	ldr	r3, [pc, #348]	@ (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 800356a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800356c:	4a56      	ldr	r2, [pc, #344]	@ (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 800356e:	f023 0304 	bic.w	r3, r3, #4
 8003572:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d015      	beq.n	80035a8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357c:	f7fd fd3a 	bl	8000ff4 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003582:	e00a      	b.n	800359a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003584:	f7fd fd36 	bl	8000ff4 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003592:	4293      	cmp	r3, r2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e0d7      	b.n	800374a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800359a:	4b4b      	ldr	r3, [pc, #300]	@ (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 800359c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0ee      	beq.n	8003584 <HAL_RCC_OscConfig+0x368>
 80035a6:	e014      	b.n	80035d2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a8:	f7fd fd24 	bl	8000ff4 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ae:	e00a      	b.n	80035c6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035b0:	f7fd fd20 	bl	8000ff4 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035be:	4293      	cmp	r3, r2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e0c1      	b.n	800374a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035c6:	4b40      	ldr	r3, [pc, #256]	@ (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 80035c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1ee      	bne.n	80035b0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035d2:	7dfb      	ldrb	r3, [r7, #23]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d105      	bne.n	80035e4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035d8:	4b3b      	ldr	r3, [pc, #236]	@ (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 80035da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035dc:	4a3a      	ldr	r2, [pc, #232]	@ (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 80035de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 80ad 	beq.w	8003748 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035ee:	4b36      	ldr	r3, [pc, #216]	@ (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 030c 	and.w	r3, r3, #12
 80035f6:	2b08      	cmp	r3, #8
 80035f8:	d060      	beq.n	80036bc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d145      	bne.n	800368e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003602:	4b33      	ldr	r3, [pc, #204]	@ (80036d0 <HAL_RCC_OscConfig+0x4b4>)
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003608:	f7fd fcf4 	bl	8000ff4 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003610:	f7fd fcf0 	bl	8000ff4 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e093      	b.n	800374a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003622:	4b29      	ldr	r3, [pc, #164]	@ (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1f0      	bne.n	8003610 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	69da      	ldr	r2, [r3, #28]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	431a      	orrs	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363c:	019b      	lsls	r3, r3, #6
 800363e:	431a      	orrs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003644:	085b      	lsrs	r3, r3, #1
 8003646:	3b01      	subs	r3, #1
 8003648:	041b      	lsls	r3, r3, #16
 800364a:	431a      	orrs	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003650:	061b      	lsls	r3, r3, #24
 8003652:	431a      	orrs	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003658:	071b      	lsls	r3, r3, #28
 800365a:	491b      	ldr	r1, [pc, #108]	@ (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 800365c:	4313      	orrs	r3, r2
 800365e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003660:	4b1b      	ldr	r3, [pc, #108]	@ (80036d0 <HAL_RCC_OscConfig+0x4b4>)
 8003662:	2201      	movs	r2, #1
 8003664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003666:	f7fd fcc5 	bl	8000ff4 <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800366e:	f7fd fcc1 	bl	8000ff4 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e064      	b.n	800374a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003680:	4b11      	ldr	r3, [pc, #68]	@ (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0f0      	beq.n	800366e <HAL_RCC_OscConfig+0x452>
 800368c:	e05c      	b.n	8003748 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800368e:	4b10      	ldr	r3, [pc, #64]	@ (80036d0 <HAL_RCC_OscConfig+0x4b4>)
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003694:	f7fd fcae 	bl	8000ff4 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800369c:	f7fd fcaa 	bl	8000ff4 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e04d      	b.n	800374a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ae:	4b06      	ldr	r3, [pc, #24]	@ (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1f0      	bne.n	800369c <HAL_RCC_OscConfig+0x480>
 80036ba:	e045      	b.n	8003748 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d107      	bne.n	80036d4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e040      	b.n	800374a <HAL_RCC_OscConfig+0x52e>
 80036c8:	40023800 	.word	0x40023800
 80036cc:	40007000 	.word	0x40007000
 80036d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036d4:	4b1f      	ldr	r3, [pc, #124]	@ (8003754 <HAL_RCC_OscConfig+0x538>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d030      	beq.n	8003744 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d129      	bne.n	8003744 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d122      	bne.n	8003744 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003704:	4013      	ands	r3, r2
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800370a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800370c:	4293      	cmp	r3, r2
 800370e:	d119      	bne.n	8003744 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800371a:	085b      	lsrs	r3, r3, #1
 800371c:	3b01      	subs	r3, #1
 800371e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003720:	429a      	cmp	r2, r3
 8003722:	d10f      	bne.n	8003744 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800372e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003730:	429a      	cmp	r2, r3
 8003732:	d107      	bne.n	8003744 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800373e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003740:	429a      	cmp	r2, r3
 8003742:	d001      	beq.n	8003748 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e000      	b.n	800374a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	40023800 	.word	0x40023800

08003758 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e041      	b.n	80037ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d106      	bne.n	8003784 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7fd fa20 	bl	8000bc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2202      	movs	r2, #2
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3304      	adds	r3, #4
 8003794:	4619      	mov	r1, r3
 8003796:	4610      	mov	r0, r2
 8003798:	f000 f9c0 	bl	8003b1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
	...

080037f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b01      	cmp	r3, #1
 800380a:	d001      	beq.n	8003810 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e04e      	b.n	80038ae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2202      	movs	r2, #2
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68da      	ldr	r2, [r3, #12]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 0201 	orr.w	r2, r2, #1
 8003826:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a23      	ldr	r2, [pc, #140]	@ (80038bc <HAL_TIM_Base_Start_IT+0xc4>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d022      	beq.n	8003878 <HAL_TIM_Base_Start_IT+0x80>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800383a:	d01d      	beq.n	8003878 <HAL_TIM_Base_Start_IT+0x80>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a1f      	ldr	r2, [pc, #124]	@ (80038c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d018      	beq.n	8003878 <HAL_TIM_Base_Start_IT+0x80>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a1e      	ldr	r2, [pc, #120]	@ (80038c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d013      	beq.n	8003878 <HAL_TIM_Base_Start_IT+0x80>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a1c      	ldr	r2, [pc, #112]	@ (80038c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d00e      	beq.n	8003878 <HAL_TIM_Base_Start_IT+0x80>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a1b      	ldr	r2, [pc, #108]	@ (80038cc <HAL_TIM_Base_Start_IT+0xd4>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d009      	beq.n	8003878 <HAL_TIM_Base_Start_IT+0x80>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a19      	ldr	r2, [pc, #100]	@ (80038d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d004      	beq.n	8003878 <HAL_TIM_Base_Start_IT+0x80>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a18      	ldr	r2, [pc, #96]	@ (80038d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d111      	bne.n	800389c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f003 0307 	and.w	r3, r3, #7
 8003882:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2b06      	cmp	r3, #6
 8003888:	d010      	beq.n	80038ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f042 0201 	orr.w	r2, r2, #1
 8003898:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800389a:	e007      	b.n	80038ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0201 	orr.w	r2, r2, #1
 80038aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	40010000 	.word	0x40010000
 80038c0:	40000400 	.word	0x40000400
 80038c4:	40000800 	.word	0x40000800
 80038c8:	40000c00 	.word	0x40000c00
 80038cc:	40010400 	.word	0x40010400
 80038d0:	40014000 	.word	0x40014000
 80038d4:	40001800 	.word	0x40001800

080038d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d020      	beq.n	800393c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d01b      	beq.n	800393c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f06f 0202 	mvn.w	r2, #2
 800390c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	f003 0303 	and.w	r3, r3, #3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f8dc 	bl	8003ae0 <HAL_TIM_IC_CaptureCallback>
 8003928:	e005      	b.n	8003936 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f8ce 	bl	8003acc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 f8df 	bl	8003af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	f003 0304 	and.w	r3, r3, #4
 8003942:	2b00      	cmp	r3, #0
 8003944:	d020      	beq.n	8003988 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f003 0304 	and.w	r3, r3, #4
 800394c:	2b00      	cmp	r3, #0
 800394e:	d01b      	beq.n	8003988 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f06f 0204 	mvn.w	r2, #4
 8003958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2202      	movs	r2, #2
 800395e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f8b6 	bl	8003ae0 <HAL_TIM_IC_CaptureCallback>
 8003974:	e005      	b.n	8003982 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f8a8 	bl	8003acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 f8b9 	bl	8003af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	f003 0308 	and.w	r3, r3, #8
 800398e:	2b00      	cmp	r3, #0
 8003990:	d020      	beq.n	80039d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f003 0308 	and.w	r3, r3, #8
 8003998:	2b00      	cmp	r3, #0
 800399a:	d01b      	beq.n	80039d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f06f 0208 	mvn.w	r2, #8
 80039a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2204      	movs	r2, #4
 80039aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	f003 0303 	and.w	r3, r3, #3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f890 	bl	8003ae0 <HAL_TIM_IC_CaptureCallback>
 80039c0:	e005      	b.n	80039ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f882 	bl	8003acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 f893 	bl	8003af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	f003 0310 	and.w	r3, r3, #16
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d020      	beq.n	8003a20 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f003 0310 	and.w	r3, r3, #16
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d01b      	beq.n	8003a20 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f06f 0210 	mvn.w	r2, #16
 80039f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2208      	movs	r2, #8
 80039f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f86a 	bl	8003ae0 <HAL_TIM_IC_CaptureCallback>
 8003a0c:	e005      	b.n	8003a1a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f85c 	bl	8003acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 f86d 	bl	8003af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00c      	beq.n	8003a44 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d007      	beq.n	8003a44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f06f 0201 	mvn.w	r2, #1
 8003a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f83a 	bl	8003ab8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00c      	beq.n	8003a68 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d007      	beq.n	8003a68 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f98c 	bl	8003d80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00c      	beq.n	8003a8c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d007      	beq.n	8003a8c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f83e 	bl	8003b08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	f003 0320 	and.w	r3, r3, #32
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00c      	beq.n	8003ab0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f003 0320 	and.w	r3, r3, #32
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d007      	beq.n	8003ab0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f06f 0220 	mvn.w	r2, #32
 8003aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f95e 	bl	8003d6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ab0:	bf00      	nop
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a46      	ldr	r2, [pc, #280]	@ (8003c48 <TIM_Base_SetConfig+0x12c>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d013      	beq.n	8003b5c <TIM_Base_SetConfig+0x40>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b3a:	d00f      	beq.n	8003b5c <TIM_Base_SetConfig+0x40>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a43      	ldr	r2, [pc, #268]	@ (8003c4c <TIM_Base_SetConfig+0x130>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d00b      	beq.n	8003b5c <TIM_Base_SetConfig+0x40>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a42      	ldr	r2, [pc, #264]	@ (8003c50 <TIM_Base_SetConfig+0x134>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d007      	beq.n	8003b5c <TIM_Base_SetConfig+0x40>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a41      	ldr	r2, [pc, #260]	@ (8003c54 <TIM_Base_SetConfig+0x138>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d003      	beq.n	8003b5c <TIM_Base_SetConfig+0x40>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a40      	ldr	r2, [pc, #256]	@ (8003c58 <TIM_Base_SetConfig+0x13c>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d108      	bne.n	8003b6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a35      	ldr	r2, [pc, #212]	@ (8003c48 <TIM_Base_SetConfig+0x12c>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d02b      	beq.n	8003bce <TIM_Base_SetConfig+0xb2>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b7c:	d027      	beq.n	8003bce <TIM_Base_SetConfig+0xb2>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a32      	ldr	r2, [pc, #200]	@ (8003c4c <TIM_Base_SetConfig+0x130>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d023      	beq.n	8003bce <TIM_Base_SetConfig+0xb2>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a31      	ldr	r2, [pc, #196]	@ (8003c50 <TIM_Base_SetConfig+0x134>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d01f      	beq.n	8003bce <TIM_Base_SetConfig+0xb2>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a30      	ldr	r2, [pc, #192]	@ (8003c54 <TIM_Base_SetConfig+0x138>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d01b      	beq.n	8003bce <TIM_Base_SetConfig+0xb2>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a2f      	ldr	r2, [pc, #188]	@ (8003c58 <TIM_Base_SetConfig+0x13c>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d017      	beq.n	8003bce <TIM_Base_SetConfig+0xb2>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a2e      	ldr	r2, [pc, #184]	@ (8003c5c <TIM_Base_SetConfig+0x140>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d013      	beq.n	8003bce <TIM_Base_SetConfig+0xb2>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a2d      	ldr	r2, [pc, #180]	@ (8003c60 <TIM_Base_SetConfig+0x144>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d00f      	beq.n	8003bce <TIM_Base_SetConfig+0xb2>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a2c      	ldr	r2, [pc, #176]	@ (8003c64 <TIM_Base_SetConfig+0x148>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d00b      	beq.n	8003bce <TIM_Base_SetConfig+0xb2>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a2b      	ldr	r2, [pc, #172]	@ (8003c68 <TIM_Base_SetConfig+0x14c>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d007      	beq.n	8003bce <TIM_Base_SetConfig+0xb2>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a2a      	ldr	r2, [pc, #168]	@ (8003c6c <TIM_Base_SetConfig+0x150>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d003      	beq.n	8003bce <TIM_Base_SetConfig+0xb2>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a29      	ldr	r2, [pc, #164]	@ (8003c70 <TIM_Base_SetConfig+0x154>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d108      	bne.n	8003be0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a10      	ldr	r2, [pc, #64]	@ (8003c48 <TIM_Base_SetConfig+0x12c>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d003      	beq.n	8003c14 <TIM_Base_SetConfig+0xf8>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a12      	ldr	r2, [pc, #72]	@ (8003c58 <TIM_Base_SetConfig+0x13c>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d103      	bne.n	8003c1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	691a      	ldr	r2, [r3, #16]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d105      	bne.n	8003c3a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	f023 0201 	bic.w	r2, r3, #1
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	611a      	str	r2, [r3, #16]
  }
}
 8003c3a:	bf00      	nop
 8003c3c:	3714      	adds	r7, #20
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	40010000 	.word	0x40010000
 8003c4c:	40000400 	.word	0x40000400
 8003c50:	40000800 	.word	0x40000800
 8003c54:	40000c00 	.word	0x40000c00
 8003c58:	40010400 	.word	0x40010400
 8003c5c:	40014000 	.word	0x40014000
 8003c60:	40014400 	.word	0x40014400
 8003c64:	40014800 	.word	0x40014800
 8003c68:	40001800 	.word	0x40001800
 8003c6c:	40001c00 	.word	0x40001c00
 8003c70:	40002000 	.word	0x40002000

08003c74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d101      	bne.n	8003c8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c88:	2302      	movs	r3, #2
 8003c8a:	e05a      	b.n	8003d42 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a21      	ldr	r2, [pc, #132]	@ (8003d50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d022      	beq.n	8003d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cd8:	d01d      	beq.n	8003d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a1d      	ldr	r2, [pc, #116]	@ (8003d54 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d018      	beq.n	8003d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a1b      	ldr	r2, [pc, #108]	@ (8003d58 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d013      	beq.n	8003d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a1a      	ldr	r2, [pc, #104]	@ (8003d5c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d00e      	beq.n	8003d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a18      	ldr	r2, [pc, #96]	@ (8003d60 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d009      	beq.n	8003d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a17      	ldr	r2, [pc, #92]	@ (8003d64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d004      	beq.n	8003d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a15      	ldr	r2, [pc, #84]	@ (8003d68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d10c      	bne.n	8003d30 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	68ba      	ldr	r2, [r7, #8]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68ba      	ldr	r2, [r7, #8]
 8003d2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	40010000 	.word	0x40010000
 8003d54:	40000400 	.word	0x40000400
 8003d58:	40000800 	.word	0x40000800
 8003d5c:	40000c00 	.word	0x40000c00
 8003d60:	40010400 	.word	0x40010400
 8003d64:	40014000 	.word	0x40014000
 8003d68:	40001800 	.word	0x40001800

08003d6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e042      	b.n	8003e2c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d106      	bne.n	8003dc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f7fc ff2a 	bl	8000c14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2224      	movs	r2, #36	@ 0x24
 8003dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68da      	ldr	r2, [r3, #12]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003dd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 fcdb 	bl	8004794 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	691a      	ldr	r2, [r3, #16]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003dec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	695a      	ldr	r2, [r3, #20]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003dfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68da      	ldr	r2, [r3, #12]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2220      	movs	r2, #32
 8003e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3708      	adds	r7, #8
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b20      	cmp	r3, #32
 8003e4c:	d112      	bne.n	8003e74 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d002      	beq.n	8003e5a <HAL_UART_Receive_IT+0x26>
 8003e54:	88fb      	ldrh	r3, [r7, #6]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e00b      	b.n	8003e76 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e64:	88fb      	ldrh	r3, [r7, #6]
 8003e66:	461a      	mov	r2, r3
 8003e68:	68b9      	ldr	r1, [r7, #8]
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f000 faba 	bl	80043e4 <UART_Start_Receive_IT>
 8003e70:	4603      	mov	r3, r0
 8003e72:	e000      	b.n	8003e76 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003e74:	2302      	movs	r3, #2
  }
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
	...

08003e80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b0ba      	sub	sp, #232	@ 0xe8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003eac:	2300      	movs	r3, #0
 8003eae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eb6:	f003 030f 	and.w	r3, r3, #15
 8003eba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003ebe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10f      	bne.n	8003ee6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eca:	f003 0320 	and.w	r3, r3, #32
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d009      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x66>
 8003ed2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ed6:	f003 0320 	and.w	r3, r3, #32
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 fb99 	bl	8004616 <UART_Receive_IT>
      return;
 8003ee4:	e25b      	b.n	800439e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003ee6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 80de 	beq.w	80040ac <HAL_UART_IRQHandler+0x22c>
 8003ef0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d106      	bne.n	8003f0a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f00:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 80d1 	beq.w	80040ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00b      	beq.n	8003f2e <HAL_UART_IRQHandler+0xae>
 8003f16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d005      	beq.n	8003f2e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f26:	f043 0201 	orr.w	r2, r3, #1
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f32:	f003 0304 	and.w	r3, r3, #4
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00b      	beq.n	8003f52 <HAL_UART_IRQHandler+0xd2>
 8003f3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d005      	beq.n	8003f52 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4a:	f043 0202 	orr.w	r2, r3, #2
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00b      	beq.n	8003f76 <HAL_UART_IRQHandler+0xf6>
 8003f5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d005      	beq.n	8003f76 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f6e:	f043 0204 	orr.w	r2, r3, #4
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f7a:	f003 0308 	and.w	r3, r3, #8
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d011      	beq.n	8003fa6 <HAL_UART_IRQHandler+0x126>
 8003f82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f86:	f003 0320 	and.w	r3, r3, #32
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d105      	bne.n	8003f9a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d005      	beq.n	8003fa6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f9e:	f043 0208 	orr.w	r2, r3, #8
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f000 81f2 	beq.w	8004394 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fb4:	f003 0320 	and.w	r3, r3, #32
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d008      	beq.n	8003fce <HAL_UART_IRQHandler+0x14e>
 8003fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fc0:	f003 0320 	and.w	r3, r3, #32
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d002      	beq.n	8003fce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 fb24 	bl	8004616 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fd8:	2b40      	cmp	r3, #64	@ 0x40
 8003fda:	bf0c      	ite	eq
 8003fdc:	2301      	moveq	r3, #1
 8003fde:	2300      	movne	r3, #0
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fea:	f003 0308 	and.w	r3, r3, #8
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d103      	bne.n	8003ffa <HAL_UART_IRQHandler+0x17a>
 8003ff2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d04f      	beq.n	800409a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 fa2c 	bl	8004458 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800400a:	2b40      	cmp	r3, #64	@ 0x40
 800400c:	d141      	bne.n	8004092 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	3314      	adds	r3, #20
 8004014:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004018:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800401c:	e853 3f00 	ldrex	r3, [r3]
 8004020:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004024:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004028:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800402c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	3314      	adds	r3, #20
 8004036:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800403a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800403e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004042:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004046:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800404a:	e841 2300 	strex	r3, r2, [r1]
 800404e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004052:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1d9      	bne.n	800400e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800405e:	2b00      	cmp	r3, #0
 8004060:	d013      	beq.n	800408a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004066:	4a7e      	ldr	r2, [pc, #504]	@ (8004260 <HAL_UART_IRQHandler+0x3e0>)
 8004068:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800406e:	4618      	mov	r0, r3
 8004070:	f7fd fcc8 	bl	8001a04 <HAL_DMA_Abort_IT>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d016      	beq.n	80040a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800407e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004084:	4610      	mov	r0, r2
 8004086:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004088:	e00e      	b.n	80040a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f994 	bl	80043b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004090:	e00a      	b.n	80040a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f990 	bl	80043b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004098:	e006      	b.n	80040a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f98c 	bl	80043b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80040a6:	e175      	b.n	8004394 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a8:	bf00      	nop
    return;
 80040aa:	e173      	b.n	8004394 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	f040 814f 	bne.w	8004354 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80040b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040ba:	f003 0310 	and.w	r3, r3, #16
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f000 8148 	beq.w	8004354 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80040c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040c8:	f003 0310 	and.w	r3, r3, #16
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 8141 	beq.w	8004354 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040d2:	2300      	movs	r3, #0
 80040d4:	60bb      	str	r3, [r7, #8]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	60bb      	str	r3, [r7, #8]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	60bb      	str	r3, [r7, #8]
 80040e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040f2:	2b40      	cmp	r3, #64	@ 0x40
 80040f4:	f040 80b6 	bne.w	8004264 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004104:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 8145 	beq.w	8004398 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004112:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004116:	429a      	cmp	r2, r3
 8004118:	f080 813e 	bcs.w	8004398 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004122:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004128:	69db      	ldr	r3, [r3, #28]
 800412a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800412e:	f000 8088 	beq.w	8004242 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	330c      	adds	r3, #12
 8004138:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004140:	e853 3f00 	ldrex	r3, [r3]
 8004144:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004148:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800414c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004150:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	330c      	adds	r3, #12
 800415a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800415e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004162:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004166:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800416a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800416e:	e841 2300 	strex	r3, r2, [r1]
 8004172:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004176:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1d9      	bne.n	8004132 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	3314      	adds	r3, #20
 8004184:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004186:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004188:	e853 3f00 	ldrex	r3, [r3]
 800418c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800418e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004190:	f023 0301 	bic.w	r3, r3, #1
 8004194:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	3314      	adds	r3, #20
 800419e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80041a2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80041a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80041aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80041ae:	e841 2300 	strex	r3, r2, [r1]
 80041b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80041b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1e1      	bne.n	800417e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	3314      	adds	r3, #20
 80041c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041c4:	e853 3f00 	ldrex	r3, [r3]
 80041c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80041ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	3314      	adds	r3, #20
 80041da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80041de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80041e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80041e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80041e6:	e841 2300 	strex	r3, r2, [r1]
 80041ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80041ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1e3      	bne.n	80041ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	330c      	adds	r3, #12
 8004206:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004208:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800420a:	e853 3f00 	ldrex	r3, [r3]
 800420e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004210:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004212:	f023 0310 	bic.w	r3, r3, #16
 8004216:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	330c      	adds	r3, #12
 8004220:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004224:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004226:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004228:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800422a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800422c:	e841 2300 	strex	r3, r2, [r1]
 8004230:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004232:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1e3      	bne.n	8004200 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800423c:	4618      	mov	r0, r3
 800423e:	f7fd fb71 	bl	8001924 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2202      	movs	r2, #2
 8004246:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004250:	b29b      	uxth	r3, r3
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	b29b      	uxth	r3, r3
 8004256:	4619      	mov	r1, r3
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f8b7 	bl	80043cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800425e:	e09b      	b.n	8004398 <HAL_UART_IRQHandler+0x518>
 8004260:	0800451f 	.word	0x0800451f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800426c:	b29b      	uxth	r3, r3
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004278:	b29b      	uxth	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	f000 808e 	beq.w	800439c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004280:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 8089 	beq.w	800439c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	330c      	adds	r3, #12
 8004290:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004294:	e853 3f00 	ldrex	r3, [r3]
 8004298:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800429a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800429c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	330c      	adds	r3, #12
 80042aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80042ae:	647a      	str	r2, [r7, #68]	@ 0x44
 80042b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042b6:	e841 2300 	strex	r3, r2, [r1]
 80042ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1e3      	bne.n	800428a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	3314      	adds	r3, #20
 80042c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042cc:	e853 3f00 	ldrex	r3, [r3]
 80042d0:	623b      	str	r3, [r7, #32]
   return(result);
 80042d2:	6a3b      	ldr	r3, [r7, #32]
 80042d4:	f023 0301 	bic.w	r3, r3, #1
 80042d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	3314      	adds	r3, #20
 80042e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80042e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80042e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042ee:	e841 2300 	strex	r3, r2, [r1]
 80042f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1e3      	bne.n	80042c2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2220      	movs	r2, #32
 80042fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	330c      	adds	r3, #12
 800430e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	e853 3f00 	ldrex	r3, [r3]
 8004316:	60fb      	str	r3, [r7, #12]
   return(result);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f023 0310 	bic.w	r3, r3, #16
 800431e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	330c      	adds	r3, #12
 8004328:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800432c:	61fa      	str	r2, [r7, #28]
 800432e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004330:	69b9      	ldr	r1, [r7, #24]
 8004332:	69fa      	ldr	r2, [r7, #28]
 8004334:	e841 2300 	strex	r3, r2, [r1]
 8004338:	617b      	str	r3, [r7, #20]
   return(result);
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1e3      	bne.n	8004308 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2202      	movs	r2, #2
 8004344:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004346:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800434a:	4619      	mov	r1, r3
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 f83d 	bl	80043cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004352:	e023      	b.n	800439c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004358:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800435c:	2b00      	cmp	r3, #0
 800435e:	d009      	beq.n	8004374 <HAL_UART_IRQHandler+0x4f4>
 8004360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004364:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 f8ea 	bl	8004546 <UART_Transmit_IT>
    return;
 8004372:	e014      	b.n	800439e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00e      	beq.n	800439e <HAL_UART_IRQHandler+0x51e>
 8004380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004388:	2b00      	cmp	r3, #0
 800438a:	d008      	beq.n	800439e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 f92a 	bl	80045e6 <UART_EndTransmit_IT>
    return;
 8004392:	e004      	b.n	800439e <HAL_UART_IRQHandler+0x51e>
    return;
 8004394:	bf00      	nop
 8004396:	e002      	b.n	800439e <HAL_UART_IRQHandler+0x51e>
      return;
 8004398:	bf00      	nop
 800439a:	e000      	b.n	800439e <HAL_UART_IRQHandler+0x51e>
      return;
 800439c:	bf00      	nop
  }
}
 800439e:	37e8      	adds	r7, #232	@ 0xe8
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	460b      	mov	r3, r1
 80043d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	4613      	mov	r3, r2
 80043f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	88fa      	ldrh	r2, [r7, #6]
 80043fc:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	88fa      	ldrh	r2, [r7, #6]
 8004402:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2222      	movs	r2, #34	@ 0x22
 800440e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d007      	beq.n	800442a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68da      	ldr	r2, [r3, #12]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004428:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	695a      	ldr	r2, [r3, #20]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f042 0201 	orr.w	r2, r2, #1
 8004438:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68da      	ldr	r2, [r3, #12]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f042 0220 	orr.w	r2, r2, #32
 8004448:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004458:	b480      	push	{r7}
 800445a:	b095      	sub	sp, #84	@ 0x54
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	330c      	adds	r3, #12
 8004466:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800446a:	e853 3f00 	ldrex	r3, [r3]
 800446e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004472:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004476:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	330c      	adds	r3, #12
 800447e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004480:	643a      	str	r2, [r7, #64]	@ 0x40
 8004482:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004484:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004486:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004488:	e841 2300 	strex	r3, r2, [r1]
 800448c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800448e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1e5      	bne.n	8004460 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	3314      	adds	r3, #20
 800449a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	e853 3f00 	ldrex	r3, [r3]
 80044a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	f023 0301 	bic.w	r3, r3, #1
 80044aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	3314      	adds	r3, #20
 80044b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044bc:	e841 2300 	strex	r3, r2, [r1]
 80044c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1e5      	bne.n	8004494 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d119      	bne.n	8004504 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	330c      	adds	r3, #12
 80044d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	e853 3f00 	ldrex	r3, [r3]
 80044de:	60bb      	str	r3, [r7, #8]
   return(result);
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	f023 0310 	bic.w	r3, r3, #16
 80044e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	330c      	adds	r3, #12
 80044ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044f0:	61ba      	str	r2, [r7, #24]
 80044f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f4:	6979      	ldr	r1, [r7, #20]
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	e841 2300 	strex	r3, r2, [r1]
 80044fc:	613b      	str	r3, [r7, #16]
   return(result);
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1e5      	bne.n	80044d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2220      	movs	r2, #32
 8004508:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004512:	bf00      	nop
 8004514:	3754      	adds	r7, #84	@ 0x54
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b084      	sub	sp, #16
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800452a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f7ff ff3d 	bl	80043b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800453e:	bf00      	nop
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004546:	b480      	push	{r7}
 8004548:	b085      	sub	sp, #20
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b21      	cmp	r3, #33	@ 0x21
 8004558:	d13e      	bne.n	80045d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004562:	d114      	bne.n	800458e <UART_Transmit_IT+0x48>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d110      	bne.n	800458e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	881b      	ldrh	r3, [r3, #0]
 8004576:	461a      	mov	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004580:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	1c9a      	adds	r2, r3, #2
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	621a      	str	r2, [r3, #32]
 800458c:	e008      	b.n	80045a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	1c59      	adds	r1, r3, #1
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6211      	str	r1, [r2, #32]
 8004598:	781a      	ldrb	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	3b01      	subs	r3, #1
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	4619      	mov	r1, r3
 80045ae:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10f      	bne.n	80045d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68da      	ldr	r2, [r3, #12]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80045c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68da      	ldr	r2, [r3, #12]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80045d4:	2300      	movs	r3, #0
 80045d6:	e000      	b.n	80045da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80045d8:	2302      	movs	r3, #2
  }
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3714      	adds	r7, #20
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b082      	sub	sp, #8
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2220      	movs	r2, #32
 8004602:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7ff fecc 	bl	80043a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3708      	adds	r7, #8
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b08c      	sub	sp, #48	@ 0x30
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b22      	cmp	r3, #34	@ 0x22
 8004628:	f040 80ae 	bne.w	8004788 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004634:	d117      	bne.n	8004666 <UART_Receive_IT+0x50>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d113      	bne.n	8004666 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800463e:	2300      	movs	r3, #0
 8004640:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004646:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	b29b      	uxth	r3, r3
 8004650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004654:	b29a      	uxth	r2, r3
 8004656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004658:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800465e:	1c9a      	adds	r2, r3, #2
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	629a      	str	r2, [r3, #40]	@ 0x28
 8004664:	e026      	b.n	80046b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800466a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800466c:	2300      	movs	r3, #0
 800466e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004678:	d007      	beq.n	800468a <UART_Receive_IT+0x74>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10a      	bne.n	8004698 <UART_Receive_IT+0x82>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d106      	bne.n	8004698 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	b2da      	uxtb	r2, r3
 8004692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004694:	701a      	strb	r2, [r3, #0]
 8004696:	e008      	b.n	80046aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046a4:	b2da      	uxtb	r2, r3
 80046a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ae:	1c5a      	adds	r2, r3, #1
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	3b01      	subs	r3, #1
 80046bc:	b29b      	uxth	r3, r3
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	4619      	mov	r1, r3
 80046c2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d15d      	bne.n	8004784 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 0220 	bic.w	r2, r2, #32
 80046d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68da      	ldr	r2, [r3, #12]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80046e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	695a      	ldr	r2, [r3, #20]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 0201 	bic.w	r2, r2, #1
 80046f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2220      	movs	r2, #32
 80046fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800470a:	2b01      	cmp	r3, #1
 800470c:	d135      	bne.n	800477a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	330c      	adds	r3, #12
 800471a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	e853 3f00 	ldrex	r3, [r3]
 8004722:	613b      	str	r3, [r7, #16]
   return(result);
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	f023 0310 	bic.w	r3, r3, #16
 800472a:	627b      	str	r3, [r7, #36]	@ 0x24
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	330c      	adds	r3, #12
 8004732:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004734:	623a      	str	r2, [r7, #32]
 8004736:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004738:	69f9      	ldr	r1, [r7, #28]
 800473a:	6a3a      	ldr	r2, [r7, #32]
 800473c:	e841 2300 	strex	r3, r2, [r1]
 8004740:	61bb      	str	r3, [r7, #24]
   return(result);
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1e5      	bne.n	8004714 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0310 	and.w	r3, r3, #16
 8004752:	2b10      	cmp	r3, #16
 8004754:	d10a      	bne.n	800476c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004756:	2300      	movs	r3, #0
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	60fb      	str	r3, [r7, #12]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	60fb      	str	r3, [r7, #12]
 800476a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004770:	4619      	mov	r1, r3
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f7ff fe2a 	bl	80043cc <HAL_UARTEx_RxEventCallback>
 8004778:	e002      	b.n	8004780 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7fc f954 	bl	8000a28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004780:	2300      	movs	r3, #0
 8004782:	e002      	b.n	800478a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004784:	2300      	movs	r3, #0
 8004786:	e000      	b.n	800478a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004788:	2302      	movs	r3, #2
  }
}
 800478a:	4618      	mov	r0, r3
 800478c:	3730      	adds	r7, #48	@ 0x30
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
	...

08004794 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004798:	b0c0      	sub	sp, #256	@ 0x100
 800479a:	af00      	add	r7, sp, #0
 800479c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80047ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047b0:	68d9      	ldr	r1, [r3, #12]
 80047b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	ea40 0301 	orr.w	r3, r0, r1
 80047bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047c2:	689a      	ldr	r2, [r3, #8]
 80047c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	431a      	orrs	r2, r3
 80047cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	431a      	orrs	r2, r3
 80047d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	4313      	orrs	r3, r2
 80047dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80047e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80047ec:	f021 010c 	bic.w	r1, r1, #12
 80047f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80047fa:	430b      	orrs	r3, r1
 80047fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800480a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800480e:	6999      	ldr	r1, [r3, #24]
 8004810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	ea40 0301 	orr.w	r3, r0, r1
 800481a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800481c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	4b8f      	ldr	r3, [pc, #572]	@ (8004a60 <UART_SetConfig+0x2cc>)
 8004824:	429a      	cmp	r2, r3
 8004826:	d005      	beq.n	8004834 <UART_SetConfig+0xa0>
 8004828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	4b8d      	ldr	r3, [pc, #564]	@ (8004a64 <UART_SetConfig+0x2d0>)
 8004830:	429a      	cmp	r2, r3
 8004832:	d104      	bne.n	800483e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004834:	f7fd ff84 	bl	8002740 <HAL_RCC_GetPCLK2Freq>
 8004838:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800483c:	e003      	b.n	8004846 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800483e:	f7fd ff6b 	bl	8002718 <HAL_RCC_GetPCLK1Freq>
 8004842:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800484a:	69db      	ldr	r3, [r3, #28]
 800484c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004850:	f040 810c 	bne.w	8004a6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004854:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004858:	2200      	movs	r2, #0
 800485a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800485e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004862:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004866:	4622      	mov	r2, r4
 8004868:	462b      	mov	r3, r5
 800486a:	1891      	adds	r1, r2, r2
 800486c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800486e:	415b      	adcs	r3, r3
 8004870:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004872:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004876:	4621      	mov	r1, r4
 8004878:	eb12 0801 	adds.w	r8, r2, r1
 800487c:	4629      	mov	r1, r5
 800487e:	eb43 0901 	adc.w	r9, r3, r1
 8004882:	f04f 0200 	mov.w	r2, #0
 8004886:	f04f 0300 	mov.w	r3, #0
 800488a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800488e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004892:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004896:	4690      	mov	r8, r2
 8004898:	4699      	mov	r9, r3
 800489a:	4623      	mov	r3, r4
 800489c:	eb18 0303 	adds.w	r3, r8, r3
 80048a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80048a4:	462b      	mov	r3, r5
 80048a6:	eb49 0303 	adc.w	r3, r9, r3
 80048aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80048ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80048ba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80048be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80048c2:	460b      	mov	r3, r1
 80048c4:	18db      	adds	r3, r3, r3
 80048c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80048c8:	4613      	mov	r3, r2
 80048ca:	eb42 0303 	adc.w	r3, r2, r3
 80048ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80048d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80048d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80048d8:	f7fb fc94 	bl	8000204 <__aeabi_uldivmod>
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	4b61      	ldr	r3, [pc, #388]	@ (8004a68 <UART_SetConfig+0x2d4>)
 80048e2:	fba3 2302 	umull	r2, r3, r3, r2
 80048e6:	095b      	lsrs	r3, r3, #5
 80048e8:	011c      	lsls	r4, r3, #4
 80048ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048ee:	2200      	movs	r2, #0
 80048f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80048f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80048f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80048fc:	4642      	mov	r2, r8
 80048fe:	464b      	mov	r3, r9
 8004900:	1891      	adds	r1, r2, r2
 8004902:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004904:	415b      	adcs	r3, r3
 8004906:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004908:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800490c:	4641      	mov	r1, r8
 800490e:	eb12 0a01 	adds.w	sl, r2, r1
 8004912:	4649      	mov	r1, r9
 8004914:	eb43 0b01 	adc.w	fp, r3, r1
 8004918:	f04f 0200 	mov.w	r2, #0
 800491c:	f04f 0300 	mov.w	r3, #0
 8004920:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004924:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004928:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800492c:	4692      	mov	sl, r2
 800492e:	469b      	mov	fp, r3
 8004930:	4643      	mov	r3, r8
 8004932:	eb1a 0303 	adds.w	r3, sl, r3
 8004936:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800493a:	464b      	mov	r3, r9
 800493c:	eb4b 0303 	adc.w	r3, fp, r3
 8004940:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004950:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004954:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004958:	460b      	mov	r3, r1
 800495a:	18db      	adds	r3, r3, r3
 800495c:	643b      	str	r3, [r7, #64]	@ 0x40
 800495e:	4613      	mov	r3, r2
 8004960:	eb42 0303 	adc.w	r3, r2, r3
 8004964:	647b      	str	r3, [r7, #68]	@ 0x44
 8004966:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800496a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800496e:	f7fb fc49 	bl	8000204 <__aeabi_uldivmod>
 8004972:	4602      	mov	r2, r0
 8004974:	460b      	mov	r3, r1
 8004976:	4611      	mov	r1, r2
 8004978:	4b3b      	ldr	r3, [pc, #236]	@ (8004a68 <UART_SetConfig+0x2d4>)
 800497a:	fba3 2301 	umull	r2, r3, r3, r1
 800497e:	095b      	lsrs	r3, r3, #5
 8004980:	2264      	movs	r2, #100	@ 0x64
 8004982:	fb02 f303 	mul.w	r3, r2, r3
 8004986:	1acb      	subs	r3, r1, r3
 8004988:	00db      	lsls	r3, r3, #3
 800498a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800498e:	4b36      	ldr	r3, [pc, #216]	@ (8004a68 <UART_SetConfig+0x2d4>)
 8004990:	fba3 2302 	umull	r2, r3, r3, r2
 8004994:	095b      	lsrs	r3, r3, #5
 8004996:	005b      	lsls	r3, r3, #1
 8004998:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800499c:	441c      	add	r4, r3
 800499e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049a2:	2200      	movs	r2, #0
 80049a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80049a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80049ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80049b0:	4642      	mov	r2, r8
 80049b2:	464b      	mov	r3, r9
 80049b4:	1891      	adds	r1, r2, r2
 80049b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80049b8:	415b      	adcs	r3, r3
 80049ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80049c0:	4641      	mov	r1, r8
 80049c2:	1851      	adds	r1, r2, r1
 80049c4:	6339      	str	r1, [r7, #48]	@ 0x30
 80049c6:	4649      	mov	r1, r9
 80049c8:	414b      	adcs	r3, r1
 80049ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80049cc:	f04f 0200 	mov.w	r2, #0
 80049d0:	f04f 0300 	mov.w	r3, #0
 80049d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80049d8:	4659      	mov	r1, fp
 80049da:	00cb      	lsls	r3, r1, #3
 80049dc:	4651      	mov	r1, sl
 80049de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049e2:	4651      	mov	r1, sl
 80049e4:	00ca      	lsls	r2, r1, #3
 80049e6:	4610      	mov	r0, r2
 80049e8:	4619      	mov	r1, r3
 80049ea:	4603      	mov	r3, r0
 80049ec:	4642      	mov	r2, r8
 80049ee:	189b      	adds	r3, r3, r2
 80049f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80049f4:	464b      	mov	r3, r9
 80049f6:	460a      	mov	r2, r1
 80049f8:	eb42 0303 	adc.w	r3, r2, r3
 80049fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a0c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004a10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004a14:	460b      	mov	r3, r1
 8004a16:	18db      	adds	r3, r3, r3
 8004a18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	eb42 0303 	adc.w	r3, r2, r3
 8004a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004a2a:	f7fb fbeb 	bl	8000204 <__aeabi_uldivmod>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	460b      	mov	r3, r1
 8004a32:	4b0d      	ldr	r3, [pc, #52]	@ (8004a68 <UART_SetConfig+0x2d4>)
 8004a34:	fba3 1302 	umull	r1, r3, r3, r2
 8004a38:	095b      	lsrs	r3, r3, #5
 8004a3a:	2164      	movs	r1, #100	@ 0x64
 8004a3c:	fb01 f303 	mul.w	r3, r1, r3
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	3332      	adds	r3, #50	@ 0x32
 8004a46:	4a08      	ldr	r2, [pc, #32]	@ (8004a68 <UART_SetConfig+0x2d4>)
 8004a48:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4c:	095b      	lsrs	r3, r3, #5
 8004a4e:	f003 0207 	and.w	r2, r3, #7
 8004a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4422      	add	r2, r4
 8004a5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a5c:	e106      	b.n	8004c6c <UART_SetConfig+0x4d8>
 8004a5e:	bf00      	nop
 8004a60:	40011000 	.word	0x40011000
 8004a64:	40011400 	.word	0x40011400
 8004a68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a70:	2200      	movs	r2, #0
 8004a72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004a76:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004a7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004a7e:	4642      	mov	r2, r8
 8004a80:	464b      	mov	r3, r9
 8004a82:	1891      	adds	r1, r2, r2
 8004a84:	6239      	str	r1, [r7, #32]
 8004a86:	415b      	adcs	r3, r3
 8004a88:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a8e:	4641      	mov	r1, r8
 8004a90:	1854      	adds	r4, r2, r1
 8004a92:	4649      	mov	r1, r9
 8004a94:	eb43 0501 	adc.w	r5, r3, r1
 8004a98:	f04f 0200 	mov.w	r2, #0
 8004a9c:	f04f 0300 	mov.w	r3, #0
 8004aa0:	00eb      	lsls	r3, r5, #3
 8004aa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004aa6:	00e2      	lsls	r2, r4, #3
 8004aa8:	4614      	mov	r4, r2
 8004aaa:	461d      	mov	r5, r3
 8004aac:	4643      	mov	r3, r8
 8004aae:	18e3      	adds	r3, r4, r3
 8004ab0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ab4:	464b      	mov	r3, r9
 8004ab6:	eb45 0303 	adc.w	r3, r5, r3
 8004aba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004aca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ace:	f04f 0200 	mov.w	r2, #0
 8004ad2:	f04f 0300 	mov.w	r3, #0
 8004ad6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004ada:	4629      	mov	r1, r5
 8004adc:	008b      	lsls	r3, r1, #2
 8004ade:	4621      	mov	r1, r4
 8004ae0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ae4:	4621      	mov	r1, r4
 8004ae6:	008a      	lsls	r2, r1, #2
 8004ae8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004aec:	f7fb fb8a 	bl	8000204 <__aeabi_uldivmod>
 8004af0:	4602      	mov	r2, r0
 8004af2:	460b      	mov	r3, r1
 8004af4:	4b60      	ldr	r3, [pc, #384]	@ (8004c78 <UART_SetConfig+0x4e4>)
 8004af6:	fba3 2302 	umull	r2, r3, r3, r2
 8004afa:	095b      	lsrs	r3, r3, #5
 8004afc:	011c      	lsls	r4, r3, #4
 8004afe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b02:	2200      	movs	r2, #0
 8004b04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b08:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004b0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004b10:	4642      	mov	r2, r8
 8004b12:	464b      	mov	r3, r9
 8004b14:	1891      	adds	r1, r2, r2
 8004b16:	61b9      	str	r1, [r7, #24]
 8004b18:	415b      	adcs	r3, r3
 8004b1a:	61fb      	str	r3, [r7, #28]
 8004b1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b20:	4641      	mov	r1, r8
 8004b22:	1851      	adds	r1, r2, r1
 8004b24:	6139      	str	r1, [r7, #16]
 8004b26:	4649      	mov	r1, r9
 8004b28:	414b      	adcs	r3, r1
 8004b2a:	617b      	str	r3, [r7, #20]
 8004b2c:	f04f 0200 	mov.w	r2, #0
 8004b30:	f04f 0300 	mov.w	r3, #0
 8004b34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b38:	4659      	mov	r1, fp
 8004b3a:	00cb      	lsls	r3, r1, #3
 8004b3c:	4651      	mov	r1, sl
 8004b3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b42:	4651      	mov	r1, sl
 8004b44:	00ca      	lsls	r2, r1, #3
 8004b46:	4610      	mov	r0, r2
 8004b48:	4619      	mov	r1, r3
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	4642      	mov	r2, r8
 8004b4e:	189b      	adds	r3, r3, r2
 8004b50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b54:	464b      	mov	r3, r9
 8004b56:	460a      	mov	r2, r1
 8004b58:	eb42 0303 	adc.w	r3, r2, r3
 8004b5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b6a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004b6c:	f04f 0200 	mov.w	r2, #0
 8004b70:	f04f 0300 	mov.w	r3, #0
 8004b74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004b78:	4649      	mov	r1, r9
 8004b7a:	008b      	lsls	r3, r1, #2
 8004b7c:	4641      	mov	r1, r8
 8004b7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b82:	4641      	mov	r1, r8
 8004b84:	008a      	lsls	r2, r1, #2
 8004b86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004b8a:	f7fb fb3b 	bl	8000204 <__aeabi_uldivmod>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	460b      	mov	r3, r1
 8004b92:	4611      	mov	r1, r2
 8004b94:	4b38      	ldr	r3, [pc, #224]	@ (8004c78 <UART_SetConfig+0x4e4>)
 8004b96:	fba3 2301 	umull	r2, r3, r3, r1
 8004b9a:	095b      	lsrs	r3, r3, #5
 8004b9c:	2264      	movs	r2, #100	@ 0x64
 8004b9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ba2:	1acb      	subs	r3, r1, r3
 8004ba4:	011b      	lsls	r3, r3, #4
 8004ba6:	3332      	adds	r3, #50	@ 0x32
 8004ba8:	4a33      	ldr	r2, [pc, #204]	@ (8004c78 <UART_SetConfig+0x4e4>)
 8004baa:	fba2 2303 	umull	r2, r3, r2, r3
 8004bae:	095b      	lsrs	r3, r3, #5
 8004bb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bb4:	441c      	add	r4, r3
 8004bb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bba:	2200      	movs	r2, #0
 8004bbc:	673b      	str	r3, [r7, #112]	@ 0x70
 8004bbe:	677a      	str	r2, [r7, #116]	@ 0x74
 8004bc0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004bc4:	4642      	mov	r2, r8
 8004bc6:	464b      	mov	r3, r9
 8004bc8:	1891      	adds	r1, r2, r2
 8004bca:	60b9      	str	r1, [r7, #8]
 8004bcc:	415b      	adcs	r3, r3
 8004bce:	60fb      	str	r3, [r7, #12]
 8004bd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bd4:	4641      	mov	r1, r8
 8004bd6:	1851      	adds	r1, r2, r1
 8004bd8:	6039      	str	r1, [r7, #0]
 8004bda:	4649      	mov	r1, r9
 8004bdc:	414b      	adcs	r3, r1
 8004bde:	607b      	str	r3, [r7, #4]
 8004be0:	f04f 0200 	mov.w	r2, #0
 8004be4:	f04f 0300 	mov.w	r3, #0
 8004be8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004bec:	4659      	mov	r1, fp
 8004bee:	00cb      	lsls	r3, r1, #3
 8004bf0:	4651      	mov	r1, sl
 8004bf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bf6:	4651      	mov	r1, sl
 8004bf8:	00ca      	lsls	r2, r1, #3
 8004bfa:	4610      	mov	r0, r2
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	4603      	mov	r3, r0
 8004c00:	4642      	mov	r2, r8
 8004c02:	189b      	adds	r3, r3, r2
 8004c04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c06:	464b      	mov	r3, r9
 8004c08:	460a      	mov	r2, r1
 8004c0a:	eb42 0303 	adc.w	r3, r2, r3
 8004c0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c1a:	667a      	str	r2, [r7, #100]	@ 0x64
 8004c1c:	f04f 0200 	mov.w	r2, #0
 8004c20:	f04f 0300 	mov.w	r3, #0
 8004c24:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004c28:	4649      	mov	r1, r9
 8004c2a:	008b      	lsls	r3, r1, #2
 8004c2c:	4641      	mov	r1, r8
 8004c2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c32:	4641      	mov	r1, r8
 8004c34:	008a      	lsls	r2, r1, #2
 8004c36:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004c3a:	f7fb fae3 	bl	8000204 <__aeabi_uldivmod>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	460b      	mov	r3, r1
 8004c42:	4b0d      	ldr	r3, [pc, #52]	@ (8004c78 <UART_SetConfig+0x4e4>)
 8004c44:	fba3 1302 	umull	r1, r3, r3, r2
 8004c48:	095b      	lsrs	r3, r3, #5
 8004c4a:	2164      	movs	r1, #100	@ 0x64
 8004c4c:	fb01 f303 	mul.w	r3, r1, r3
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	011b      	lsls	r3, r3, #4
 8004c54:	3332      	adds	r3, #50	@ 0x32
 8004c56:	4a08      	ldr	r2, [pc, #32]	@ (8004c78 <UART_SetConfig+0x4e4>)
 8004c58:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5c:	095b      	lsrs	r3, r3, #5
 8004c5e:	f003 020f 	and.w	r2, r3, #15
 8004c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4422      	add	r2, r4
 8004c6a:	609a      	str	r2, [r3, #8]
}
 8004c6c:	bf00      	nop
 8004c6e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004c72:	46bd      	mov	sp, r7
 8004c74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c78:	51eb851f 	.word	0x51eb851f

08004c7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c7c:	b084      	sub	sp, #16
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b084      	sub	sp, #16
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
 8004c86:	f107 001c 	add.w	r0, r7, #28
 8004c8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c8e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d123      	bne.n	8004cde <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c9a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004caa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004cbe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d105      	bne.n	8004cd2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 fa9a 	bl	800520c <USB_CoreReset>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	73fb      	strb	r3, [r7, #15]
 8004cdc:	e01b      	b.n	8004d16 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 fa8e 	bl	800520c <USB_CoreReset>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004cf4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d106      	bne.n	8004d0a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d00:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	639a      	str	r2, [r3, #56]	@ 0x38
 8004d08:	e005      	b.n	8004d16 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d0e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004d16:	7fbb      	ldrb	r3, [r7, #30]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d10b      	bne.n	8004d34 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f043 0206 	orr.w	r2, r3, #6
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f043 0220 	orr.w	r2, r3, #32
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d40:	b004      	add	sp, #16
 8004d42:	4770      	bx	lr

08004d44 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f023 0201 	bic.w	r2, r3, #1
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b084      	sub	sp, #16
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
 8004d6e:	460b      	mov	r3, r1
 8004d70:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004d72:	2300      	movs	r3, #0
 8004d74:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004d82:	78fb      	ldrb	r3, [r7, #3]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d115      	bne.n	8004db4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004d94:	200a      	movs	r0, #10
 8004d96:	f7fc f939 	bl	800100c <HAL_Delay>
      ms += 10U;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	330a      	adds	r3, #10
 8004d9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 fa25 	bl	80051f0 <USB_GetMode>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d01e      	beq.n	8004dea <USB_SetCurrentMode+0x84>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2bc7      	cmp	r3, #199	@ 0xc7
 8004db0:	d9f0      	bls.n	8004d94 <USB_SetCurrentMode+0x2e>
 8004db2:	e01a      	b.n	8004dea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004db4:	78fb      	ldrb	r3, [r7, #3]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d115      	bne.n	8004de6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004dc6:	200a      	movs	r0, #10
 8004dc8:	f7fc f920 	bl	800100c <HAL_Delay>
      ms += 10U;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	330a      	adds	r3, #10
 8004dd0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 fa0c 	bl	80051f0 <USB_GetMode>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d005      	beq.n	8004dea <USB_SetCurrentMode+0x84>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2bc7      	cmp	r3, #199	@ 0xc7
 8004de2:	d9f0      	bls.n	8004dc6 <USB_SetCurrentMode+0x60>
 8004de4:	e001      	b.n	8004dea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e005      	b.n	8004df6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2bc8      	cmp	r3, #200	@ 0xc8
 8004dee:	d101      	bne.n	8004df4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e000      	b.n	8004df6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
	...

08004e00 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e00:	b084      	sub	sp, #16
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b086      	sub	sp, #24
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
 8004e0a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004e0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004e12:	2300      	movs	r3, #0
 8004e14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	613b      	str	r3, [r7, #16]
 8004e1e:	e009      	b.n	8004e34 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	3340      	adds	r3, #64	@ 0x40
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4413      	add	r3, r2
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	3301      	adds	r3, #1
 8004e32:	613b      	str	r3, [r7, #16]
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	2b0e      	cmp	r3, #14
 8004e38:	d9f2      	bls.n	8004e20 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004e3a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d11c      	bne.n	8004e7c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e50:	f043 0302 	orr.w	r3, r3, #2
 8004e54:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e5a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	601a      	str	r2, [r3, #0]
 8004e7a:	e005      	b.n	8004e88 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e80:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004e8e:	461a      	mov	r2, r3
 8004e90:	2300      	movs	r3, #0
 8004e92:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e94:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d10d      	bne.n	8004eb8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d104      	bne.n	8004eae <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f968 	bl	800517c <USB_SetDevSpeed>
 8004eac:	e008      	b.n	8004ec0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004eae:	2101      	movs	r1, #1
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 f963 	bl	800517c <USB_SetDevSpeed>
 8004eb6:	e003      	b.n	8004ec0 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004eb8:	2103      	movs	r1, #3
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f95e 	bl	800517c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004ec0:	2110      	movs	r1, #16
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 f8fa 	bl	80050bc <USB_FlushTxFifo>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d001      	beq.n	8004ed2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f924 	bl	8005120 <USB_FlushRxFifo>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ee8:	461a      	mov	r2, r3
 8004eea:	2300      	movs	r3, #0
 8004eec:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f00:	461a      	mov	r2, r3
 8004f02:	2300      	movs	r3, #0
 8004f04:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f06:	2300      	movs	r3, #0
 8004f08:	613b      	str	r3, [r7, #16]
 8004f0a:	e043      	b.n	8004f94 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	015a      	lsls	r2, r3, #5
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	4413      	add	r3, r2
 8004f14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f22:	d118      	bne.n	8004f56 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10a      	bne.n	8004f40 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	015a      	lsls	r2, r3, #5
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f36:	461a      	mov	r2, r3
 8004f38:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004f3c:	6013      	str	r3, [r2, #0]
 8004f3e:	e013      	b.n	8004f68 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	015a      	lsls	r2, r3, #5
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	4413      	add	r3, r2
 8004f48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004f52:	6013      	str	r3, [r2, #0]
 8004f54:	e008      	b.n	8004f68 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	015a      	lsls	r2, r3, #5
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f62:	461a      	mov	r2, r3
 8004f64:	2300      	movs	r3, #0
 8004f66:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	015a      	lsls	r2, r3, #5
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	4413      	add	r3, r2
 8004f70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f74:	461a      	mov	r2, r3
 8004f76:	2300      	movs	r3, #0
 8004f78:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	015a      	lsls	r2, r3, #5
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	4413      	add	r3, r2
 8004f82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f86:	461a      	mov	r2, r3
 8004f88:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004f8c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	3301      	adds	r3, #1
 8004f92:	613b      	str	r3, [r7, #16]
 8004f94:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004f98:	461a      	mov	r2, r3
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d3b5      	bcc.n	8004f0c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	613b      	str	r3, [r7, #16]
 8004fa4:	e043      	b.n	800502e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	015a      	lsls	r2, r3, #5
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	4413      	add	r3, r2
 8004fae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004fb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fbc:	d118      	bne.n	8004ff0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10a      	bne.n	8004fda <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	015a      	lsls	r2, r3, #5
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	4413      	add	r3, r2
 8004fcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004fd6:	6013      	str	r3, [r2, #0]
 8004fd8:	e013      	b.n	8005002 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	015a      	lsls	r2, r3, #5
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004fec:	6013      	str	r3, [r2, #0]
 8004fee:	e008      	b.n	8005002 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	015a      	lsls	r2, r3, #5
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	2300      	movs	r3, #0
 8005000:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	015a      	lsls	r2, r3, #5
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	4413      	add	r3, r2
 800500a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800500e:	461a      	mov	r2, r3
 8005010:	2300      	movs	r3, #0
 8005012:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	015a      	lsls	r2, r3, #5
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	4413      	add	r3, r2
 800501c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005020:	461a      	mov	r2, r3
 8005022:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005026:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	3301      	adds	r3, #1
 800502c:	613b      	str	r3, [r7, #16]
 800502e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005032:	461a      	mov	r2, r3
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	4293      	cmp	r3, r2
 8005038:	d3b5      	bcc.n	8004fa6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005048:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800504c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800505a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800505c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005060:	2b00      	cmp	r3, #0
 8005062:	d105      	bne.n	8005070 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	f043 0210 	orr.w	r2, r3, #16
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	699a      	ldr	r2, [r3, #24]
 8005074:	4b10      	ldr	r3, [pc, #64]	@ (80050b8 <USB_DevInit+0x2b8>)
 8005076:	4313      	orrs	r3, r2
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800507c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005080:	2b00      	cmp	r3, #0
 8005082:	d005      	beq.n	8005090 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	699b      	ldr	r3, [r3, #24]
 8005088:	f043 0208 	orr.w	r2, r3, #8
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005090:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005094:	2b01      	cmp	r3, #1
 8005096:	d107      	bne.n	80050a8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80050a0:	f043 0304 	orr.w	r3, r3, #4
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80050a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3718      	adds	r7, #24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050b4:	b004      	add	sp, #16
 80050b6:	4770      	bx	lr
 80050b8:	803c3800 	.word	0x803c3800

080050bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80050c6:	2300      	movs	r3, #0
 80050c8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	3301      	adds	r3, #1
 80050ce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050d6:	d901      	bls.n	80050dc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e01b      	b.n	8005114 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	daf2      	bge.n	80050ca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80050e4:	2300      	movs	r3, #0
 80050e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	019b      	lsls	r3, r3, #6
 80050ec:	f043 0220 	orr.w	r2, r3, #32
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	3301      	adds	r3, #1
 80050f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005100:	d901      	bls.n	8005106 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e006      	b.n	8005114 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	f003 0320 	and.w	r3, r3, #32
 800510e:	2b20      	cmp	r3, #32
 8005110:	d0f0      	beq.n	80050f4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005128:	2300      	movs	r3, #0
 800512a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	3301      	adds	r3, #1
 8005130:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005138:	d901      	bls.n	800513e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e018      	b.n	8005170 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	2b00      	cmp	r3, #0
 8005144:	daf2      	bge.n	800512c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005146:	2300      	movs	r3, #0
 8005148:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2210      	movs	r2, #16
 800514e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	3301      	adds	r3, #1
 8005154:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800515c:	d901      	bls.n	8005162 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e006      	b.n	8005170 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	f003 0310 	and.w	r3, r3, #16
 800516a:	2b10      	cmp	r3, #16
 800516c:	d0f0      	beq.n	8005150 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3714      	adds	r7, #20
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	460b      	mov	r3, r1
 8005186:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	78fb      	ldrb	r3, [r7, #3]
 8005196:	68f9      	ldr	r1, [r7, #12]
 8005198:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800519c:	4313      	orrs	r3, r2
 800519e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3714      	adds	r7, #20
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr

080051ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b085      	sub	sp, #20
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80051c8:	f023 0303 	bic.w	r3, r3, #3
 80051cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051dc:	f043 0302 	orr.w	r3, r3, #2
 80051e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3714      	adds	r7, #20
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	695b      	ldr	r3, [r3, #20]
 80051fc:	f003 0301 	and.w	r3, r3, #1
}
 8005200:	4618      	mov	r0, r3
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005214:	2300      	movs	r3, #0
 8005216:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	3301      	adds	r3, #1
 800521c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005224:	d901      	bls.n	800522a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e01b      	b.n	8005262 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	2b00      	cmp	r3, #0
 8005230:	daf2      	bge.n	8005218 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005232:	2300      	movs	r3, #0
 8005234:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	f043 0201 	orr.w	r2, r3, #1
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	3301      	adds	r3, #1
 8005246:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800524e:	d901      	bls.n	8005254 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e006      	b.n	8005262 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	f003 0301 	and.w	r3, r3, #1
 800525c:	2b01      	cmp	r3, #1
 800525e:	d0f0      	beq.n	8005242 <USB_CoreReset+0x36>

  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr

0800526e <memset>:
 800526e:	4402      	add	r2, r0
 8005270:	4603      	mov	r3, r0
 8005272:	4293      	cmp	r3, r2
 8005274:	d100      	bne.n	8005278 <memset+0xa>
 8005276:	4770      	bx	lr
 8005278:	f803 1b01 	strb.w	r1, [r3], #1
 800527c:	e7f9      	b.n	8005272 <memset+0x4>
	...

08005280 <__libc_init_array>:
 8005280:	b570      	push	{r4, r5, r6, lr}
 8005282:	4d0d      	ldr	r5, [pc, #52]	@ (80052b8 <__libc_init_array+0x38>)
 8005284:	4c0d      	ldr	r4, [pc, #52]	@ (80052bc <__libc_init_array+0x3c>)
 8005286:	1b64      	subs	r4, r4, r5
 8005288:	10a4      	asrs	r4, r4, #2
 800528a:	2600      	movs	r6, #0
 800528c:	42a6      	cmp	r6, r4
 800528e:	d109      	bne.n	80052a4 <__libc_init_array+0x24>
 8005290:	4d0b      	ldr	r5, [pc, #44]	@ (80052c0 <__libc_init_array+0x40>)
 8005292:	4c0c      	ldr	r4, [pc, #48]	@ (80052c4 <__libc_init_array+0x44>)
 8005294:	f000 f818 	bl	80052c8 <_init>
 8005298:	1b64      	subs	r4, r4, r5
 800529a:	10a4      	asrs	r4, r4, #2
 800529c:	2600      	movs	r6, #0
 800529e:	42a6      	cmp	r6, r4
 80052a0:	d105      	bne.n	80052ae <__libc_init_array+0x2e>
 80052a2:	bd70      	pop	{r4, r5, r6, pc}
 80052a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80052a8:	4798      	blx	r3
 80052aa:	3601      	adds	r6, #1
 80052ac:	e7ee      	b.n	800528c <__libc_init_array+0xc>
 80052ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80052b2:	4798      	blx	r3
 80052b4:	3601      	adds	r6, #1
 80052b6:	e7f2      	b.n	800529e <__libc_init_array+0x1e>
 80052b8:	08005348 	.word	0x08005348
 80052bc:	08005348 	.word	0x08005348
 80052c0:	08005348 	.word	0x08005348
 80052c4:	0800534c 	.word	0x0800534c

080052c8 <_init>:
 80052c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ca:	bf00      	nop
 80052cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ce:	bc08      	pop	{r3}
 80052d0:	469e      	mov	lr, r3
 80052d2:	4770      	bx	lr

080052d4 <_fini>:
 80052d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052d6:	bf00      	nop
 80052d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052da:	bc08      	pop	{r3}
 80052dc:	469e      	mov	lr, r3
 80052de:	4770      	bx	lr
