
Personal_DAC_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007534  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08007700  08007700  00008700  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077d0  080077d0  00009070  2**0
                  CONTENTS
  4 .ARM          00000008  080077d0  080077d0  000087d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077d8  080077d8  00009070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077d8  080077d8  000087d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080077dc  080077dc  000087dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080077e0  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001064  20000070  08007850  00009070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200010d4  08007850  000090d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b63  00000000  00000000  000090a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e57  00000000  00000000  0001dc03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  00020a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e6d  00000000  00000000  00021ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002481a  00000000  00000000  00022b55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000170b6  00000000  00000000  0004736f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1d94  00000000  00000000  0005e425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001401b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055a4  00000000  00000000  001401fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001457a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000070 	.word	0x20000070
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080076e4 	.word	0x080076e4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000074 	.word	0x20000074
 8000204:	080076e4 	.word	0x080076e4

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2uiz>:
 8000ae0:	004a      	lsls	r2, r1, #1
 8000ae2:	d211      	bcs.n	8000b08 <__aeabi_d2uiz+0x28>
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ae8:	d211      	bcs.n	8000b0e <__aeabi_d2uiz+0x2e>
 8000aea:	d50d      	bpl.n	8000b08 <__aeabi_d2uiz+0x28>
 8000aec:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d40e      	bmi.n	8000b14 <__aeabi_d2uiz+0x34>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	fa23 f002 	lsr.w	r0, r3, r2
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b12:	d102      	bne.n	8000b1a <__aeabi_d2uiz+0x3a>
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295
 8000b18:	4770      	bx	lr
 8000b1a:	f04f 0000 	mov.w	r0, #0
 8000b1e:	4770      	bx	lr

08000b20 <__aeabi_uldivmod>:
 8000b20:	b953      	cbnz	r3, 8000b38 <__aeabi_uldivmod+0x18>
 8000b22:	b94a      	cbnz	r2, 8000b38 <__aeabi_uldivmod+0x18>
 8000b24:	2900      	cmp	r1, #0
 8000b26:	bf08      	it	eq
 8000b28:	2800      	cmpeq	r0, #0
 8000b2a:	bf1c      	itt	ne
 8000b2c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b30:	f04f 30ff 	movne.w	r0, #4294967295
 8000b34:	f000 b96a 	b.w	8000e0c <__aeabi_idiv0>
 8000b38:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b40:	f000 f806 	bl	8000b50 <__udivmoddi4>
 8000b44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b4c:	b004      	add	sp, #16
 8000b4e:	4770      	bx	lr

08000b50 <__udivmoddi4>:
 8000b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b54:	9d08      	ldr	r5, [sp, #32]
 8000b56:	460c      	mov	r4, r1
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d14e      	bne.n	8000bfa <__udivmoddi4+0xaa>
 8000b5c:	4694      	mov	ip, r2
 8000b5e:	458c      	cmp	ip, r1
 8000b60:	4686      	mov	lr, r0
 8000b62:	fab2 f282 	clz	r2, r2
 8000b66:	d962      	bls.n	8000c2e <__udivmoddi4+0xde>
 8000b68:	b14a      	cbz	r2, 8000b7e <__udivmoddi4+0x2e>
 8000b6a:	f1c2 0320 	rsb	r3, r2, #32
 8000b6e:	4091      	lsls	r1, r2
 8000b70:	fa20 f303 	lsr.w	r3, r0, r3
 8000b74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b78:	4319      	orrs	r1, r3
 8000b7a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f f68c 	uxth.w	r6, ip
 8000b86:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b8e:	fb07 1114 	mls	r1, r7, r4, r1
 8000b92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b96:	fb04 f106 	mul.w	r1, r4, r6
 8000b9a:	4299      	cmp	r1, r3
 8000b9c:	d90a      	bls.n	8000bb4 <__udivmoddi4+0x64>
 8000b9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ba2:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ba6:	f080 8112 	bcs.w	8000dce <__udivmoddi4+0x27e>
 8000baa:	4299      	cmp	r1, r3
 8000bac:	f240 810f 	bls.w	8000dce <__udivmoddi4+0x27e>
 8000bb0:	3c02      	subs	r4, #2
 8000bb2:	4463      	add	r3, ip
 8000bb4:	1a59      	subs	r1, r3, r1
 8000bb6:	fa1f f38e 	uxth.w	r3, lr
 8000bba:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bbe:	fb07 1110 	mls	r1, r7, r0, r1
 8000bc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc6:	fb00 f606 	mul.w	r6, r0, r6
 8000bca:	429e      	cmp	r6, r3
 8000bcc:	d90a      	bls.n	8000be4 <__udivmoddi4+0x94>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd6:	f080 80fc 	bcs.w	8000dd2 <__udivmoddi4+0x282>
 8000bda:	429e      	cmp	r6, r3
 8000bdc:	f240 80f9 	bls.w	8000dd2 <__udivmoddi4+0x282>
 8000be0:	4463      	add	r3, ip
 8000be2:	3802      	subs	r0, #2
 8000be4:	1b9b      	subs	r3, r3, r6
 8000be6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bea:	2100      	movs	r1, #0
 8000bec:	b11d      	cbz	r5, 8000bf6 <__udivmoddi4+0xa6>
 8000bee:	40d3      	lsrs	r3, r2
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	e9c5 3200 	strd	r3, r2, [r5]
 8000bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfa:	428b      	cmp	r3, r1
 8000bfc:	d905      	bls.n	8000c0a <__udivmoddi4+0xba>
 8000bfe:	b10d      	cbz	r5, 8000c04 <__udivmoddi4+0xb4>
 8000c00:	e9c5 0100 	strd	r0, r1, [r5]
 8000c04:	2100      	movs	r1, #0
 8000c06:	4608      	mov	r0, r1
 8000c08:	e7f5      	b.n	8000bf6 <__udivmoddi4+0xa6>
 8000c0a:	fab3 f183 	clz	r1, r3
 8000c0e:	2900      	cmp	r1, #0
 8000c10:	d146      	bne.n	8000ca0 <__udivmoddi4+0x150>
 8000c12:	42a3      	cmp	r3, r4
 8000c14:	d302      	bcc.n	8000c1c <__udivmoddi4+0xcc>
 8000c16:	4290      	cmp	r0, r2
 8000c18:	f0c0 80f0 	bcc.w	8000dfc <__udivmoddi4+0x2ac>
 8000c1c:	1a86      	subs	r6, r0, r2
 8000c1e:	eb64 0303 	sbc.w	r3, r4, r3
 8000c22:	2001      	movs	r0, #1
 8000c24:	2d00      	cmp	r5, #0
 8000c26:	d0e6      	beq.n	8000bf6 <__udivmoddi4+0xa6>
 8000c28:	e9c5 6300 	strd	r6, r3, [r5]
 8000c2c:	e7e3      	b.n	8000bf6 <__udivmoddi4+0xa6>
 8000c2e:	2a00      	cmp	r2, #0
 8000c30:	f040 8090 	bne.w	8000d54 <__udivmoddi4+0x204>
 8000c34:	eba1 040c 	sub.w	r4, r1, ip
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	fa1f f78c 	uxth.w	r7, ip
 8000c40:	2101      	movs	r1, #1
 8000c42:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c46:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c4a:	fb08 4416 	mls	r4, r8, r6, r4
 8000c4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c52:	fb07 f006 	mul.w	r0, r7, r6
 8000c56:	4298      	cmp	r0, r3
 8000c58:	d908      	bls.n	8000c6c <__udivmoddi4+0x11c>
 8000c5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c62:	d202      	bcs.n	8000c6a <__udivmoddi4+0x11a>
 8000c64:	4298      	cmp	r0, r3
 8000c66:	f200 80cd 	bhi.w	8000e04 <__udivmoddi4+0x2b4>
 8000c6a:	4626      	mov	r6, r4
 8000c6c:	1a1c      	subs	r4, r3, r0
 8000c6e:	fa1f f38e 	uxth.w	r3, lr
 8000c72:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c76:	fb08 4410 	mls	r4, r8, r0, r4
 8000c7a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c7e:	fb00 f707 	mul.w	r7, r0, r7
 8000c82:	429f      	cmp	r7, r3
 8000c84:	d908      	bls.n	8000c98 <__udivmoddi4+0x148>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c8e:	d202      	bcs.n	8000c96 <__udivmoddi4+0x146>
 8000c90:	429f      	cmp	r7, r3
 8000c92:	f200 80b0 	bhi.w	8000df6 <__udivmoddi4+0x2a6>
 8000c96:	4620      	mov	r0, r4
 8000c98:	1bdb      	subs	r3, r3, r7
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	e7a5      	b.n	8000bec <__udivmoddi4+0x9c>
 8000ca0:	f1c1 0620 	rsb	r6, r1, #32
 8000ca4:	408b      	lsls	r3, r1
 8000ca6:	fa22 f706 	lsr.w	r7, r2, r6
 8000caa:	431f      	orrs	r7, r3
 8000cac:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cb0:	fa04 f301 	lsl.w	r3, r4, r1
 8000cb4:	ea43 030c 	orr.w	r3, r3, ip
 8000cb8:	40f4      	lsrs	r4, r6
 8000cba:	fa00 f801 	lsl.w	r8, r0, r1
 8000cbe:	0c38      	lsrs	r0, r7, #16
 8000cc0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cc4:	fbb4 fef0 	udiv	lr, r4, r0
 8000cc8:	fa1f fc87 	uxth.w	ip, r7
 8000ccc:	fb00 441e 	mls	r4, r0, lr, r4
 8000cd0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cd4:	fb0e f90c 	mul.w	r9, lr, ip
 8000cd8:	45a1      	cmp	r9, r4
 8000cda:	fa02 f201 	lsl.w	r2, r2, r1
 8000cde:	d90a      	bls.n	8000cf6 <__udivmoddi4+0x1a6>
 8000ce0:	193c      	adds	r4, r7, r4
 8000ce2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ce6:	f080 8084 	bcs.w	8000df2 <__udivmoddi4+0x2a2>
 8000cea:	45a1      	cmp	r9, r4
 8000cec:	f240 8081 	bls.w	8000df2 <__udivmoddi4+0x2a2>
 8000cf0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cf4:	443c      	add	r4, r7
 8000cf6:	eba4 0409 	sub.w	r4, r4, r9
 8000cfa:	fa1f f983 	uxth.w	r9, r3
 8000cfe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d02:	fb00 4413 	mls	r4, r0, r3, r4
 8000d06:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d0a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d0e:	45a4      	cmp	ip, r4
 8000d10:	d907      	bls.n	8000d22 <__udivmoddi4+0x1d2>
 8000d12:	193c      	adds	r4, r7, r4
 8000d14:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d18:	d267      	bcs.n	8000dea <__udivmoddi4+0x29a>
 8000d1a:	45a4      	cmp	ip, r4
 8000d1c:	d965      	bls.n	8000dea <__udivmoddi4+0x29a>
 8000d1e:	3b02      	subs	r3, #2
 8000d20:	443c      	add	r4, r7
 8000d22:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d26:	fba0 9302 	umull	r9, r3, r0, r2
 8000d2a:	eba4 040c 	sub.w	r4, r4, ip
 8000d2e:	429c      	cmp	r4, r3
 8000d30:	46ce      	mov	lr, r9
 8000d32:	469c      	mov	ip, r3
 8000d34:	d351      	bcc.n	8000dda <__udivmoddi4+0x28a>
 8000d36:	d04e      	beq.n	8000dd6 <__udivmoddi4+0x286>
 8000d38:	b155      	cbz	r5, 8000d50 <__udivmoddi4+0x200>
 8000d3a:	ebb8 030e 	subs.w	r3, r8, lr
 8000d3e:	eb64 040c 	sbc.w	r4, r4, ip
 8000d42:	fa04 f606 	lsl.w	r6, r4, r6
 8000d46:	40cb      	lsrs	r3, r1
 8000d48:	431e      	orrs	r6, r3
 8000d4a:	40cc      	lsrs	r4, r1
 8000d4c:	e9c5 6400 	strd	r6, r4, [r5]
 8000d50:	2100      	movs	r1, #0
 8000d52:	e750      	b.n	8000bf6 <__udivmoddi4+0xa6>
 8000d54:	f1c2 0320 	rsb	r3, r2, #32
 8000d58:	fa20 f103 	lsr.w	r1, r0, r3
 8000d5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d60:	fa24 f303 	lsr.w	r3, r4, r3
 8000d64:	4094      	lsls	r4, r2
 8000d66:	430c      	orrs	r4, r1
 8000d68:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d6c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d70:	fa1f f78c 	uxth.w	r7, ip
 8000d74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d78:	fb08 3110 	mls	r1, r8, r0, r3
 8000d7c:	0c23      	lsrs	r3, r4, #16
 8000d7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d82:	fb00 f107 	mul.w	r1, r0, r7
 8000d86:	4299      	cmp	r1, r3
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x24c>
 8000d8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d92:	d22c      	bcs.n	8000dee <__udivmoddi4+0x29e>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	d92a      	bls.n	8000dee <__udivmoddi4+0x29e>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4463      	add	r3, ip
 8000d9c:	1a5b      	subs	r3, r3, r1
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb3 f1f8 	udiv	r1, r3, r8
 8000da4:	fb08 3311 	mls	r3, r8, r1, r3
 8000da8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dac:	fb01 f307 	mul.w	r3, r1, r7
 8000db0:	42a3      	cmp	r3, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x276>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f101 36ff 	add.w	r6, r1, #4294967295
 8000dbc:	d213      	bcs.n	8000de6 <__udivmoddi4+0x296>
 8000dbe:	42a3      	cmp	r3, r4
 8000dc0:	d911      	bls.n	8000de6 <__udivmoddi4+0x296>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	4464      	add	r4, ip
 8000dc6:	1ae4      	subs	r4, r4, r3
 8000dc8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dcc:	e739      	b.n	8000c42 <__udivmoddi4+0xf2>
 8000dce:	4604      	mov	r4, r0
 8000dd0:	e6f0      	b.n	8000bb4 <__udivmoddi4+0x64>
 8000dd2:	4608      	mov	r0, r1
 8000dd4:	e706      	b.n	8000be4 <__udivmoddi4+0x94>
 8000dd6:	45c8      	cmp	r8, r9
 8000dd8:	d2ae      	bcs.n	8000d38 <__udivmoddi4+0x1e8>
 8000dda:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dde:	eb63 0c07 	sbc.w	ip, r3, r7
 8000de2:	3801      	subs	r0, #1
 8000de4:	e7a8      	b.n	8000d38 <__udivmoddi4+0x1e8>
 8000de6:	4631      	mov	r1, r6
 8000de8:	e7ed      	b.n	8000dc6 <__udivmoddi4+0x276>
 8000dea:	4603      	mov	r3, r0
 8000dec:	e799      	b.n	8000d22 <__udivmoddi4+0x1d2>
 8000dee:	4630      	mov	r0, r6
 8000df0:	e7d4      	b.n	8000d9c <__udivmoddi4+0x24c>
 8000df2:	46d6      	mov	lr, sl
 8000df4:	e77f      	b.n	8000cf6 <__udivmoddi4+0x1a6>
 8000df6:	4463      	add	r3, ip
 8000df8:	3802      	subs	r0, #2
 8000dfa:	e74d      	b.n	8000c98 <__udivmoddi4+0x148>
 8000dfc:	4606      	mov	r6, r0
 8000dfe:	4623      	mov	r3, r4
 8000e00:	4608      	mov	r0, r1
 8000e02:	e70f      	b.n	8000c24 <__udivmoddi4+0xd4>
 8000e04:	3e02      	subs	r6, #2
 8000e06:	4463      	add	r3, ip
 8000e08:	e730      	b.n	8000c6c <__udivmoddi4+0x11c>
 8000e0a:	bf00      	nop

08000e0c <__aeabi_idiv0>:
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop

08000e10 <PreprocessWave>:

uint16_t wave_count = 0;
uint16_t prev_trig = 0;

wave_data PreprocessWave(uint16_t* sine_data, uint16_t size)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b08b      	sub	sp, #44	@ 0x2c
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	80fb      	strh	r3, [r7, #6]

	//uint16_t wave_count = 0;
	bool is_falling = false;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	bool is_rising = false;
 8000e24:	2300      	movs	r3, #0
 8000e26:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    uint16_t thres = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint16_t end = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t start = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	843b      	strh	r3, [r7, #32]
	uint16_t x = size-1;
 8000e36:	88fb      	ldrh	r3, [r7, #6]
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	83fb      	strh	r3, [r7, #30]

	while(x > 0 && !is_rising && !is_falling)
 8000e3c:	e05f      	b.n	8000efe <PreprocessWave+0xee>
	{
		if(x < 5) break;
 8000e3e:	8bfb      	ldrh	r3, [r7, #30]
 8000e40:	2b04      	cmp	r3, #4
 8000e42:	d96e      	bls.n	8000f22 <PreprocessWave+0x112>

		if(sine_data[x-2] > sine_data[x-1] && sine_data[x-1] > sine_data[x])
 8000e44:	8bfb      	ldrh	r3, [r7, #30]
 8000e46:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8000e4a:	3b02      	subs	r3, #2
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	4413      	add	r3, r2
 8000e52:	881a      	ldrh	r2, [r3, #0]
 8000e54:	8bfb      	ldrh	r3, [r7, #30]
 8000e56:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	68b9      	ldr	r1, [r7, #8]
 8000e60:	440b      	add	r3, r1
 8000e62:	881b      	ldrh	r3, [r3, #0]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d91a      	bls.n	8000e9e <PreprocessWave+0x8e>
 8000e68:	8bfb      	ldrh	r3, [r7, #30]
 8000e6a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	4413      	add	r3, r2
 8000e76:	881a      	ldrh	r2, [r3, #0]
 8000e78:	8bfb      	ldrh	r3, [r7, #30]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	68b9      	ldr	r1, [r7, #8]
 8000e7e:	440b      	add	r3, r1
 8000e80:	881b      	ldrh	r3, [r3, #0]
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d90b      	bls.n	8000e9e <PreprocessWave+0x8e>
		{
			is_falling = true;
 8000e86:	2301      	movs	r3, #1
 8000e88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			thres = sine_data[x];
 8000e8c:	8bfb      	ldrh	r3, [r7, #30]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	68ba      	ldr	r2, [r7, #8]
 8000e92:	4413      	add	r3, r2
 8000e94:	881b      	ldrh	r3, [r3, #0]
 8000e96:	84bb      	strh	r3, [r7, #36]	@ 0x24
			end = x;
 8000e98:	8bfb      	ldrh	r3, [r7, #30]
 8000e9a:	847b      	strh	r3, [r7, #34]	@ 0x22
			break;
 8000e9c:	e042      	b.n	8000f24 <PreprocessWave+0x114>
		}

		if(sine_data[x-2] < sine_data[x-1] && sine_data[x-1] < sine_data[x])
 8000e9e:	8bfb      	ldrh	r3, [r7, #30]
 8000ea0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8000ea4:	3b02      	subs	r3, #2
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	68ba      	ldr	r2, [r7, #8]
 8000eaa:	4413      	add	r3, r2
 8000eac:	881a      	ldrh	r2, [r3, #0]
 8000eae:	8bfb      	ldrh	r3, [r7, #30]
 8000eb0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	68b9      	ldr	r1, [r7, #8]
 8000eba:	440b      	add	r3, r1
 8000ebc:	881b      	ldrh	r3, [r3, #0]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d21a      	bcs.n	8000ef8 <PreprocessWave+0xe8>
 8000ec2:	8bfb      	ldrh	r3, [r7, #30]
 8000ec4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	68ba      	ldr	r2, [r7, #8]
 8000ece:	4413      	add	r3, r2
 8000ed0:	881a      	ldrh	r2, [r3, #0]
 8000ed2:	8bfb      	ldrh	r3, [r7, #30]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	68b9      	ldr	r1, [r7, #8]
 8000ed8:	440b      	add	r3, r1
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d20b      	bcs.n	8000ef8 <PreprocessWave+0xe8>
		{
			is_rising = true;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			thres = sine_data[x];
 8000ee6:	8bfb      	ldrh	r3, [r7, #30]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	4413      	add	r3, r2
 8000eee:	881b      	ldrh	r3, [r3, #0]
 8000ef0:	84bb      	strh	r3, [r7, #36]	@ 0x24
			end = x;
 8000ef2:	8bfb      	ldrh	r3, [r7, #30]
 8000ef4:	847b      	strh	r3, [r7, #34]	@ 0x22
			break;
 8000ef6:	e015      	b.n	8000f24 <PreprocessWave+0x114>
		}

		x--;
 8000ef8:	8bfb      	ldrh	r3, [r7, #30]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	83fb      	strh	r3, [r7, #30]
	while(x > 0 && !is_rising && !is_falling)
 8000efe:	8bfb      	ldrh	r3, [r7, #30]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d00f      	beq.n	8000f24 <PreprocessWave+0x114>
 8000f04:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f08:	f083 0301 	eor.w	r3, r3, #1
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d008      	beq.n	8000f24 <PreprocessWave+0x114>
 8000f12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f16:	f083 0301 	eor.w	r3, r3, #1
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d18e      	bne.n	8000e3e <PreprocessWave+0x2e>
 8000f20:	e000      	b.n	8000f24 <PreprocessWave+0x114>
		if(x < 5) break;
 8000f22:	bf00      	nop
	}

	//find beginning of RMS sample and count edges for time states
	x = 2;
 8000f24:	2302      	movs	r3, #2
 8000f26:	83fb      	strh	r3, [r7, #30]
	prev_trig = 0;
 8000f28:	4b4e      	ldr	r3, [pc, #312]	@ (8001064 <PreprocessWave+0x254>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	801a      	strh	r2, [r3, #0]
	wave_count = 0;
 8000f2e:	4b4e      	ldr	r3, [pc, #312]	@ (8001068 <PreprocessWave+0x258>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	801a      	strh	r2, [r3, #0]
	while(x < end)
 8000f34:	e078      	b.n	8001028 <PreprocessWave+0x218>
	{
		if(is_rising && sine_data[x] > sine_data[x-1] && sine_data[x-1] < thres && sine_data[x+1] > thres)
 8000f36:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d036      	beq.n	8000fac <PreprocessWave+0x19c>
 8000f3e:	8bfb      	ldrh	r3, [r7, #30]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	4413      	add	r3, r2
 8000f46:	881a      	ldrh	r2, [r3, #0]
 8000f48:	8bfb      	ldrh	r3, [r7, #30]
 8000f4a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	68b9      	ldr	r1, [r7, #8]
 8000f54:	440b      	add	r3, r1
 8000f56:	881b      	ldrh	r3, [r3, #0]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d927      	bls.n	8000fac <PreprocessWave+0x19c>
 8000f5c:	8bfb      	ldrh	r3, [r7, #30]
 8000f5e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8000f62:	3b01      	subs	r3, #1
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	4413      	add	r3, r2
 8000f6a:	881b      	ldrh	r3, [r3, #0]
 8000f6c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d91c      	bls.n	8000fac <PreprocessWave+0x19c>
 8000f72:	8bfb      	ldrh	r3, [r7, #30]
 8000f74:	3301      	adds	r3, #1
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	68ba      	ldr	r2, [r7, #8]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d213      	bcs.n	8000fac <PreprocessWave+0x19c>
		{

			if(start == 0) start = x;
 8000f84:	8c3b      	ldrh	r3, [r7, #32]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d101      	bne.n	8000f8e <PreprocessWave+0x17e>
 8000f8a:	8bfb      	ldrh	r3, [r7, #30]
 8000f8c:	843b      	strh	r3, [r7, #32]

			if(x > (prev_trig + 15))
 8000f8e:	8bfa      	ldrh	r2, [r7, #30]
 8000f90:	4b34      	ldr	r3, [pc, #208]	@ (8001064 <PreprocessWave+0x254>)
 8000f92:	881b      	ldrh	r3, [r3, #0]
 8000f94:	330f      	adds	r3, #15
 8000f96:	429a      	cmp	r2, r3
 8000f98:	dd05      	ble.n	8000fa6 <PreprocessWave+0x196>
				wave_count++;
 8000f9a:	4b33      	ldr	r3, [pc, #204]	@ (8001068 <PreprocessWave+0x258>)
 8000f9c:	881b      	ldrh	r3, [r3, #0]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	4b31      	ldr	r3, [pc, #196]	@ (8001068 <PreprocessWave+0x258>)
 8000fa4:	801a      	strh	r2, [r3, #0]

			prev_trig = x;
 8000fa6:	4a2f      	ldr	r2, [pc, #188]	@ (8001064 <PreprocessWave+0x254>)
 8000fa8:	8bfb      	ldrh	r3, [r7, #30]
 8000faa:	8013      	strh	r3, [r2, #0]

		}

		if(is_falling && sine_data[x] < sine_data[x-1] && sine_data[x-1] > thres && sine_data[x+1] < thres )
 8000fac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d036      	beq.n	8001022 <PreprocessWave+0x212>
 8000fb4:	8bfb      	ldrh	r3, [r7, #30]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	68ba      	ldr	r2, [r7, #8]
 8000fba:	4413      	add	r3, r2
 8000fbc:	881a      	ldrh	r2, [r3, #0]
 8000fbe:	8bfb      	ldrh	r3, [r7, #30]
 8000fc0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8000fc4:	3b01      	subs	r3, #1
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	68b9      	ldr	r1, [r7, #8]
 8000fca:	440b      	add	r3, r1
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d227      	bcs.n	8001022 <PreprocessWave+0x212>
 8000fd2:	8bfb      	ldrh	r3, [r7, #30]
 8000fd4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	68ba      	ldr	r2, [r7, #8]
 8000fde:	4413      	add	r3, r2
 8000fe0:	881b      	ldrh	r3, [r3, #0]
 8000fe2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d21c      	bcs.n	8001022 <PreprocessWave+0x212>
 8000fe8:	8bfb      	ldrh	r3, [r7, #30]
 8000fea:	3301      	adds	r3, #1
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	881b      	ldrh	r3, [r3, #0]
 8000ff4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d913      	bls.n	8001022 <PreprocessWave+0x212>
		{
			if(start == 0) start = x;
 8000ffa:	8c3b      	ldrh	r3, [r7, #32]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d101      	bne.n	8001004 <PreprocessWave+0x1f4>
 8001000:	8bfb      	ldrh	r3, [r7, #30]
 8001002:	843b      	strh	r3, [r7, #32]

			if(x > (prev_trig + 15))
 8001004:	8bfa      	ldrh	r2, [r7, #30]
 8001006:	4b17      	ldr	r3, [pc, #92]	@ (8001064 <PreprocessWave+0x254>)
 8001008:	881b      	ldrh	r3, [r3, #0]
 800100a:	330f      	adds	r3, #15
 800100c:	429a      	cmp	r2, r3
 800100e:	dd05      	ble.n	800101c <PreprocessWave+0x20c>
				wave_count++;
 8001010:	4b15      	ldr	r3, [pc, #84]	@ (8001068 <PreprocessWave+0x258>)
 8001012:	881b      	ldrh	r3, [r3, #0]
 8001014:	3301      	adds	r3, #1
 8001016:	b29a      	uxth	r2, r3
 8001018:	4b13      	ldr	r3, [pc, #76]	@ (8001068 <PreprocessWave+0x258>)
 800101a:	801a      	strh	r2, [r3, #0]

			prev_trig = x;
 800101c:	4a11      	ldr	r2, [pc, #68]	@ (8001064 <PreprocessWave+0x254>)
 800101e:	8bfb      	ldrh	r3, [r7, #30]
 8001020:	8013      	strh	r3, [r2, #0]
		}
		x++;
 8001022:	8bfb      	ldrh	r3, [r7, #30]
 8001024:	3301      	adds	r3, #1
 8001026:	83fb      	strh	r3, [r7, #30]
	while(x < end)
 8001028:	8bfa      	ldrh	r2, [r7, #30]
 800102a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800102c:	429a      	cmp	r2, r3
 800102e:	d382      	bcc.n	8000f36 <PreprocessWave+0x126>
	}

	wave_data wd = { start, end, (end - start), wave_count };
 8001030:	8c3b      	ldrh	r3, [r7, #32]
 8001032:	82bb      	strh	r3, [r7, #20]
 8001034:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001036:	82fb      	strh	r3, [r7, #22]
 8001038:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800103a:	8c3b      	ldrh	r3, [r7, #32]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	b29b      	uxth	r3, r3
 8001040:	833b      	strh	r3, [r7, #24]
 8001042:	4b09      	ldr	r3, [pc, #36]	@ (8001068 <PreprocessWave+0x258>)
 8001044:	881b      	ldrh	r3, [r3, #0]
 8001046:	837b      	strh	r3, [r7, #26]

	return wd;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	461a      	mov	r2, r3
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	cb03      	ldmia	r3!, {r0, r1}
 8001052:	6010      	str	r0, [r2, #0]
 8001054:	6051      	str	r1, [r2, #4]

}
 8001056:	68f8      	ldr	r0, [r7, #12]
 8001058:	372c      	adds	r7, #44	@ 0x2c
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	2000008e 	.word	0x2000008e
 8001068:	2000008c 	.word	0x2000008c
 800106c:	00000000 	.word	0x00000000

08001070 <GetRmsRaw>:
 * This will calculate the RMS, Mean, Frequency, and Period of the sine wave
 * The output is raw data
 *
 */
wave_stats GetRmsRaw(uint16_t* sine_data, uint16_t size)
{
 8001070:	b590      	push	{r4, r7, lr}
 8001072:	b095      	sub	sp, #84	@ 0x54
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	4613      	mov	r3, r2
 800107c:	80fb      	strh	r3, [r7, #6]
	double acc = 0;
 800107e:	f04f 0200 	mov.w	r2, #0
 8001082:	f04f 0300 	mov.w	r3, #0
 8001086:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	double mean = 0;
 800108a:	f04f 0200 	mov.w	r2, #0
 800108e:	f04f 0300 	mov.w	r3, #0
 8001092:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	uint16_t adc_min = 4095;
 8001096:	f640 73ff 	movw	r3, #4095	@ 0xfff
 800109a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	uint16_t adc_max = 1;
 800109e:	2301      	movs	r3, #1
 80010a0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

	wave_data wd = PreprocessWave(sine_data, size);
 80010a4:	f107 0320 	add.w	r3, r7, #32
 80010a8:	88fa      	ldrh	r2, [r7, #6]
 80010aa:	68b9      	ldr	r1, [r7, #8]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff feaf 	bl	8000e10 <PreprocessWave>

	for(uint16_t i = wd.start; i < wd.end; i++)
 80010b2:	8c3b      	ldrh	r3, [r7, #32]
 80010b4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80010b8:	e04c      	b.n	8001154 <GetRmsRaw+0xe4>
	{
		acc += pow((double) (sine_data[i] / raw_scale), 2);
 80010ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	68ba      	ldr	r2, [r7, #8]
 80010c2:	4413      	add	r3, r2
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff f9f0 	bl	80004ac <__aeabi_i2d>
 80010cc:	f04f 0200 	mov.w	r2, #0
 80010d0:	4b57      	ldr	r3, [pc, #348]	@ (8001230 <GetRmsRaw+0x1c0>)
 80010d2:	f7ff fb7f 	bl	80007d4 <__aeabi_ddiv>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	ec43 2b17 	vmov	d7, r2, r3
 80010de:	ed9f 1b52 	vldr	d1, [pc, #328]	@ 8001228 <GetRmsRaw+0x1b8>
 80010e2:	eeb0 0a47 	vmov.f32	s0, s14
 80010e6:	eef0 0a67 	vmov.f32	s1, s15
 80010ea:	f005 fb3f 	bl	800676c <pow>
 80010ee:	ec53 2b10 	vmov	r2, r3, d0
 80010f2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80010f6:	f7ff f88d 	bl	8000214 <__adddf3>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
		if(sine_data[i] > adc_max) adc_max = sine_data[i];
 8001102:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	68ba      	ldr	r2, [r7, #8]
 800110a:	4413      	add	r3, r2
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8001112:	429a      	cmp	r2, r3
 8001114:	d207      	bcs.n	8001126 <GetRmsRaw+0xb6>
 8001116:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	68ba      	ldr	r2, [r7, #8]
 800111e:	4413      	add	r3, r2
 8001120:	881b      	ldrh	r3, [r3, #0]
 8001122:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
		if(sine_data[i] < adc_min) adc_min = sine_data[i];
 8001126:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	68ba      	ldr	r2, [r7, #8]
 800112e:	4413      	add	r3, r2
 8001130:	881b      	ldrh	r3, [r3, #0]
 8001132:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8001136:	429a      	cmp	r2, r3
 8001138:	d907      	bls.n	800114a <GetRmsRaw+0xda>
 800113a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	68ba      	ldr	r2, [r7, #8]
 8001142:	4413      	add	r3, r2
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	for(uint16_t i = wd.start; i < wd.end; i++)
 800114a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800114e:	3301      	adds	r3, #1
 8001150:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001154:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001156:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800115a:	429a      	cmp	r2, r3
 800115c:	d3ad      	bcc.n	80010ba <GetRmsRaw+0x4a>
	}


	mean = (acc / (float) (wd.size));
 800115e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001160:	ee07 3a90 	vmov	s15, r3
 8001164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001168:	ee17 0a90 	vmov	r0, s15
 800116c:	f7ff f9b0 	bl	80004d0 <__aeabi_f2d>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001178:	f7ff fb2c 	bl	80007d4 <__aeabi_ddiv>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

	double root = sqrt(mean);
 8001184:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8001188:	f005 fb60 	bl	800684c <sqrt>
 800118c:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30

	uint16_t rms = (uint16_t) (root * raw_scale);
 8001190:	f04f 0000 	mov.w	r0, #0
 8001194:	4926      	ldr	r1, [pc, #152]	@ (8001230 <GetRmsRaw+0x1c0>)
 8001196:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800119a:	f7ff f9f1 	bl	8000580 <__aeabi_dmul>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	4610      	mov	r0, r2
 80011a4:	4619      	mov	r1, r3
 80011a6:	f7ff fc9b 	bl	8000ae0 <__aeabi_d2uiz>
 80011aa:	4603      	mov	r3, r0
 80011ac:	85fb      	strh	r3, [r7, #46]	@ 0x2e

	float period = (float) (wd.size) / (float) wd.no_waves;
 80011ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80011b0:	ee07 3a90 	vmov	s15, r3
 80011b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80011b8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80011ba:	ee07 3a90 	vmov	s15, r3
 80011be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011c6:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

	wave_stats wave = { adc_min, adc_max, (adc_max-adc_min), (uint16_t) (mean * raw_scale), rms, period };
 80011ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80011ce:	823b      	strh	r3, [r7, #16]
 80011d0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80011d4:	827b      	strh	r3, [r7, #18]
 80011d6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80011da:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	82bb      	strh	r3, [r7, #20]
 80011e4:	f04f 0000 	mov.w	r0, #0
 80011e8:	4911      	ldr	r1, [pc, #68]	@ (8001230 <GetRmsRaw+0x1c0>)
 80011ea:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80011ee:	f7ff f9c7 	bl	8000580 <__aeabi_dmul>
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	4610      	mov	r0, r2
 80011f8:	4619      	mov	r1, r3
 80011fa:	f7ff fc71 	bl	8000ae0 <__aeabi_d2uiz>
 80011fe:	4603      	mov	r3, r0
 8001200:	b29b      	uxth	r3, r3
 8001202:	82fb      	strh	r3, [r7, #22]
 8001204:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001206:	833b      	strh	r3, [r7, #24]
 8001208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800120a:	61fb      	str	r3, [r7, #28]

	return wave;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	461c      	mov	r4, r3
 8001210:	f107 0310 	add.w	r3, r7, #16
 8001214:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001216:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800121a:	68f8      	ldr	r0, [r7, #12]
 800121c:	3754      	adds	r7, #84	@ 0x54
 800121e:	46bd      	mov	sp, r7
 8001220:	bd90      	pop	{r4, r7, pc}
 8001222:	bf00      	nop
 8001224:	f3af 8000 	nop.w
 8001228:	00000000 	.word	0x00000000
 800122c:	40000000 	.word	0x40000000
 8001230:	40b00000 	.word	0x40b00000

08001234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001234:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001238:	b086      	sub	sp, #24
 800123a:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
  adc1_conv_time =  ADCConvertTime(&hadc1);
 800123c:	482d      	ldr	r0, [pc, #180]	@ (80012f4 <main+0xc0>)
 800123e:	f000 fb87 	bl	8001950 <ADCConvertTime>
 8001242:	eeb0 7a40 	vmov.f32	s14, s0
 8001246:	eef0 7a60 	vmov.f32	s15, s1
 800124a:	4b2b      	ldr	r3, [pc, #172]	@ (80012f8 <main+0xc4>)
 800124c:	ed83 7b00 	vstr	d7, [r3]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001250:	f000 fe70 	bl	8001f34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001254:	f000 f85a 	bl	800130c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001258:	f000 fa3a 	bl	80016d0 <MX_GPIO_Init>
  MX_DMA_Init();
 800125c:	f000 fa02 	bl	8001664 <MX_DMA_Init>
  MX_DAC_Init();
 8001260:	f000 f912 	bl	8001488 <MX_DAC_Init>
  MX_TIM6_Init();
 8001264:	f000 f946 	bl	80014f4 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 8001268:	f000 f9a4 	bl	80015b4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800126c:	f000 f9cc 	bl	8001608 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 8001270:	f000 f976 	bl	8001560 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001274:	f000 f8b6 	bl	80013e4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  uint16_t bufferSize = 10;
 8001278:	230a      	movs	r3, #10
 800127a:	81fb      	strh	r3, [r7, #14]
  uint8_t dataBuffer[bufferSize];
 800127c:	89f9      	ldrh	r1, [r7, #14]
 800127e:	460b      	mov	r3, r1
 8001280:	3b01      	subs	r3, #1
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	b28b      	uxth	r3, r1
 8001286:	2200      	movs	r2, #0
 8001288:	4698      	mov	r8, r3
 800128a:	4691      	mov	r9, r2
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001298:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800129c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80012a0:	b28b      	uxth	r3, r1
 80012a2:	2200      	movs	r2, #0
 80012a4:	461c      	mov	r4, r3
 80012a6:	4615      	mov	r5, r2
 80012a8:	f04f 0200 	mov.w	r2, #0
 80012ac:	f04f 0300 	mov.w	r3, #0
 80012b0:	00eb      	lsls	r3, r5, #3
 80012b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80012b6:	00e2      	lsls	r2, r4, #3
 80012b8:	460b      	mov	r3, r1
 80012ba:	3307      	adds	r3, #7
 80012bc:	08db      	lsrs	r3, r3, #3
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	ebad 0d03 	sub.w	sp, sp, r3
 80012c4:	ab02      	add	r3, sp, #8
 80012c6:	3300      	adds	r3, #0
 80012c8:	607b      	str	r3, [r7, #4]
  HAL_UART_Receive_IT(&huart2, dataBuffer, bufferSize);
 80012ca:	89fb      	ldrh	r3, [r7, #14]
 80012cc:	461a      	mov	r2, r3
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	480a      	ldr	r0, [pc, #40]	@ (80012fc <main+0xc8>)
 80012d2:	f004 f82d 	bl	8005330 <HAL_UART_Receive_IT>

  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t *) sinewave_data, sinewave_len, DAC_ALIGN_12B_R);
 80012d6:	2320      	movs	r3, #32
 80012d8:	461a      	mov	r2, r3
 80012da:	2300      	movs	r3, #0
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	4613      	mov	r3, r2
 80012e0:	4a07      	ldr	r2, [pc, #28]	@ (8001300 <main+0xcc>)
 80012e2:	2100      	movs	r1, #0
 80012e4:	4807      	ldr	r0, [pc, #28]	@ (8001304 <main+0xd0>)
 80012e6:	f001 fc07 	bl	8002af8 <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim6);
 80012ea:	4807      	ldr	r0, [pc, #28]	@ (8001308 <main+0xd4>)
 80012ec:	f003 fe38 	bl	8004f60 <HAL_TIM_Base_Start_IT>

  //float temp_a = ((2.0 * 3.14)/ ((float) no_samples));
  //float temp_b = ((0xfff+1)/2);
  //uint16_t out_value = 2048;

  while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <main+0xbc>
 80012f4:	20000090 	.word	0x20000090
 80012f8:	20000f70 	.word	0x20000f70
 80012fc:	200001f4 	.word	0x200001f4
 8001300:	08007700 	.word	0x08007700
 8001304:	20000138 	.word	0x20000138
 8001308:	200001ac 	.word	0x200001ac

0800130c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b094      	sub	sp, #80	@ 0x50
 8001310:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001312:	f107 031c 	add.w	r3, r7, #28
 8001316:	2234      	movs	r2, #52	@ 0x34
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f006 f9b0 	bl	8007680 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001320:	f107 0308 	add.w	r3, r7, #8
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001330:	2300      	movs	r3, #0
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	4b29      	ldr	r3, [pc, #164]	@ (80013dc <SystemClock_Config+0xd0>)
 8001336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001338:	4a28      	ldr	r2, [pc, #160]	@ (80013dc <SystemClock_Config+0xd0>)
 800133a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800133e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001340:	4b26      	ldr	r3, [pc, #152]	@ (80013dc <SystemClock_Config+0xd0>)
 8001342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001344:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800134c:	2300      	movs	r3, #0
 800134e:	603b      	str	r3, [r7, #0]
 8001350:	4b23      	ldr	r3, [pc, #140]	@ (80013e0 <SystemClock_Config+0xd4>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a22      	ldr	r2, [pc, #136]	@ (80013e0 <SystemClock_Config+0xd4>)
 8001356:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800135a:	6013      	str	r3, [r2, #0]
 800135c:	4b20      	ldr	r3, [pc, #128]	@ (80013e0 <SystemClock_Config+0xd4>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001364:	603b      	str	r3, [r7, #0]
 8001366:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001368:	2301      	movs	r3, #1
 800136a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800136c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001370:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001372:	2302      	movs	r3, #2
 8001374:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001376:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800137a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800137c:	2304      	movs	r3, #4
 800137e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001380:	23a8      	movs	r3, #168	@ 0xa8
 8001382:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001384:	2302      	movs	r3, #2
 8001386:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001388:	2307      	movs	r3, #7
 800138a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800138c:	2302      	movs	r3, #2
 800138e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001390:	f107 031c 	add.w	r3, r7, #28
 8001394:	4618      	mov	r0, r3
 8001396:	f003 faf5 	bl	8004984 <HAL_RCC_OscConfig>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80013a0:	f000 faee 	bl	8001980 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a4:	230f      	movs	r3, #15
 80013a6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a8:	2302      	movs	r3, #2
 80013aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ac:	2300      	movs	r3, #0
 80013ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013b0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80013b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013ba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013bc:	f107 0308 	add.w	r3, r7, #8
 80013c0:	2105      	movs	r1, #5
 80013c2:	4618      	mov	r0, r3
 80013c4:	f002 fc6a 	bl	8003c9c <HAL_RCC_ClockConfig>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80013ce:	f000 fad7 	bl	8001980 <Error_Handler>
  }
}
 80013d2:	bf00      	nop
 80013d4:	3750      	adds	r7, #80	@ 0x50
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40007000 	.word	0x40007000

080013e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013ea:	463b      	mov	r3, r7
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013f6:	4b21      	ldr	r3, [pc, #132]	@ (800147c <MX_ADC1_Init+0x98>)
 80013f8:	4a21      	ldr	r2, [pc, #132]	@ (8001480 <MX_ADC1_Init+0x9c>)
 80013fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013fc:	4b1f      	ldr	r3, [pc, #124]	@ (800147c <MX_ADC1_Init+0x98>)
 80013fe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001402:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001404:	4b1d      	ldr	r3, [pc, #116]	@ (800147c <MX_ADC1_Init+0x98>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800140a:	4b1c      	ldr	r3, [pc, #112]	@ (800147c <MX_ADC1_Init+0x98>)
 800140c:	2200      	movs	r2, #0
 800140e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001410:	4b1a      	ldr	r3, [pc, #104]	@ (800147c <MX_ADC1_Init+0x98>)
 8001412:	2201      	movs	r2, #1
 8001414:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001416:	4b19      	ldr	r3, [pc, #100]	@ (800147c <MX_ADC1_Init+0x98>)
 8001418:	2200      	movs	r2, #0
 800141a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800141e:	4b17      	ldr	r3, [pc, #92]	@ (800147c <MX_ADC1_Init+0x98>)
 8001420:	2200      	movs	r2, #0
 8001422:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001424:	4b15      	ldr	r3, [pc, #84]	@ (800147c <MX_ADC1_Init+0x98>)
 8001426:	4a17      	ldr	r2, [pc, #92]	@ (8001484 <MX_ADC1_Init+0xa0>)
 8001428:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800142a:	4b14      	ldr	r3, [pc, #80]	@ (800147c <MX_ADC1_Init+0x98>)
 800142c:	2200      	movs	r2, #0
 800142e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001430:	4b12      	ldr	r3, [pc, #72]	@ (800147c <MX_ADC1_Init+0x98>)
 8001432:	2201      	movs	r2, #1
 8001434:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001436:	4b11      	ldr	r3, [pc, #68]	@ (800147c <MX_ADC1_Init+0x98>)
 8001438:	2201      	movs	r2, #1
 800143a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800143e:	4b0f      	ldr	r3, [pc, #60]	@ (800147c <MX_ADC1_Init+0x98>)
 8001440:	2201      	movs	r2, #1
 8001442:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001444:	480d      	ldr	r0, [pc, #52]	@ (800147c <MX_ADC1_Init+0x98>)
 8001446:	f000 fe0b 	bl	8002060 <HAL_ADC_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001450:	f000 fa96 	bl	8001980 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001454:	2303      	movs	r3, #3
 8001456:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001458:	2301      	movs	r3, #1
 800145a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800145c:	2300      	movs	r3, #0
 800145e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001460:	463b      	mov	r3, r7
 8001462:	4619      	mov	r1, r3
 8001464:	4805      	ldr	r0, [pc, #20]	@ (800147c <MX_ADC1_Init+0x98>)
 8001466:	f000 ff63 	bl	8002330 <HAL_ADC_ConfigChannel>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001470:	f000 fa86 	bl	8001980 <Error_Handler>
  /* USER CODE BEGIN ADC1_Init 2 */


  /* USER CODE END ADC1_Init 2 */

}
 8001474:	bf00      	nop
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000090 	.word	0x20000090
 8001480:	40012000 	.word	0x40012000
 8001484:	0f000001 	.word	0x0f000001

08001488 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800148e:	463b      	mov	r3, r7
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001496:	4b15      	ldr	r3, [pc, #84]	@ (80014ec <MX_DAC_Init+0x64>)
 8001498:	4a15      	ldr	r2, [pc, #84]	@ (80014f0 <MX_DAC_Init+0x68>)
 800149a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800149c:	4813      	ldr	r0, [pc, #76]	@ (80014ec <MX_DAC_Init+0x64>)
 800149e:	f001 fb08 	bl	8002ab2 <HAL_DAC_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80014a8:	f000 fa6a 	bl	8001980 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80014ac:	2304      	movs	r3, #4
 80014ae:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80014b0:	2300      	movs	r3, #0
 80014b2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80014b4:	463b      	mov	r3, r7
 80014b6:	2200      	movs	r2, #0
 80014b8:	4619      	mov	r1, r3
 80014ba:	480c      	ldr	r0, [pc, #48]	@ (80014ec <MX_DAC_Init+0x64>)
 80014bc:	f001 fbfc 	bl	8002cb8 <HAL_DAC_ConfigChannel>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80014c6:	f000 fa5b 	bl	8001980 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80014ca:	2300      	movs	r3, #0
 80014cc:	603b      	str	r3, [r7, #0]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80014ce:	463b      	mov	r3, r7
 80014d0:	2210      	movs	r2, #16
 80014d2:	4619      	mov	r1, r3
 80014d4:	4805      	ldr	r0, [pc, #20]	@ (80014ec <MX_DAC_Init+0x64>)
 80014d6:	f001 fbef 	bl	8002cb8 <HAL_DAC_ConfigChannel>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_DAC_Init+0x5c>
  {
    Error_Handler();
 80014e0:	f000 fa4e 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80014e4:	bf00      	nop
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000138 	.word	0x20000138
 80014f0:	40007400 	.word	0x40007400

080014f4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014fa:	463b      	mov	r3, r7
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001502:	4b15      	ldr	r3, [pc, #84]	@ (8001558 <MX_TIM6_Init+0x64>)
 8001504:	4a15      	ldr	r2, [pc, #84]	@ (800155c <MX_TIM6_Init+0x68>)
 8001506:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001508:	4b13      	ldr	r3, [pc, #76]	@ (8001558 <MX_TIM6_Init+0x64>)
 800150a:	2200      	movs	r2, #0
 800150c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800150e:	4b12      	ldr	r3, [pc, #72]	@ (8001558 <MX_TIM6_Init+0x64>)
 8001510:	2200      	movs	r2, #0
 8001512:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 261;
 8001514:	4b10      	ldr	r3, [pc, #64]	@ (8001558 <MX_TIM6_Init+0x64>)
 8001516:	f240 1205 	movw	r2, #261	@ 0x105
 800151a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800151c:	4b0e      	ldr	r3, [pc, #56]	@ (8001558 <MX_TIM6_Init+0x64>)
 800151e:	2200      	movs	r2, #0
 8001520:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001522:	480d      	ldr	r0, [pc, #52]	@ (8001558 <MX_TIM6_Init+0x64>)
 8001524:	f003 fccc 	bl	8004ec0 <HAL_TIM_Base_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800152e:	f000 fa27 	bl	8001980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001532:	2320      	movs	r3, #32
 8001534:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001536:	2300      	movs	r3, #0
 8001538:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800153a:	463b      	mov	r3, r7
 800153c:	4619      	mov	r1, r3
 800153e:	4806      	ldr	r0, [pc, #24]	@ (8001558 <MX_TIM6_Init+0x64>)
 8001540:	f003 fe2a 	bl	8005198 <HAL_TIMEx_MasterConfigSynchronization>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800154a:	f000 fa19 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	200001ac 	.word	0x200001ac
 800155c:	40001000 	.word	0x40001000

08001560 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001564:	4b11      	ldr	r3, [pc, #68]	@ (80015ac <MX_USART2_UART_Init+0x4c>)
 8001566:	4a12      	ldr	r2, [pc, #72]	@ (80015b0 <MX_USART2_UART_Init+0x50>)
 8001568:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800156a:	4b10      	ldr	r3, [pc, #64]	@ (80015ac <MX_USART2_UART_Init+0x4c>)
 800156c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001570:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001572:	4b0e      	ldr	r3, [pc, #56]	@ (80015ac <MX_USART2_UART_Init+0x4c>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001578:	4b0c      	ldr	r3, [pc, #48]	@ (80015ac <MX_USART2_UART_Init+0x4c>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800157e:	4b0b      	ldr	r3, [pc, #44]	@ (80015ac <MX_USART2_UART_Init+0x4c>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001584:	4b09      	ldr	r3, [pc, #36]	@ (80015ac <MX_USART2_UART_Init+0x4c>)
 8001586:	220c      	movs	r2, #12
 8001588:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158a:	4b08      	ldr	r3, [pc, #32]	@ (80015ac <MX_USART2_UART_Init+0x4c>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001590:	4b06      	ldr	r3, [pc, #24]	@ (80015ac <MX_USART2_UART_Init+0x4c>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001596:	4805      	ldr	r0, [pc, #20]	@ (80015ac <MX_USART2_UART_Init+0x4c>)
 8001598:	f003 fe7a 	bl	8005290 <HAL_UART_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015a2:	f000 f9ed 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	200001f4 	.word	0x200001f4
 80015b0:	40004400 	.word	0x40004400

080015b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015b8:	4b11      	ldr	r3, [pc, #68]	@ (8001600 <MX_USART3_UART_Init+0x4c>)
 80015ba:	4a12      	ldr	r2, [pc, #72]	@ (8001604 <MX_USART3_UART_Init+0x50>)
 80015bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015be:	4b10      	ldr	r3, [pc, #64]	@ (8001600 <MX_USART3_UART_Init+0x4c>)
 80015c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001600 <MX_USART3_UART_Init+0x4c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001600 <MX_USART3_UART_Init+0x4c>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001600 <MX_USART3_UART_Init+0x4c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015d8:	4b09      	ldr	r3, [pc, #36]	@ (8001600 <MX_USART3_UART_Init+0x4c>)
 80015da:	220c      	movs	r2, #12
 80015dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015de:	4b08      	ldr	r3, [pc, #32]	@ (8001600 <MX_USART3_UART_Init+0x4c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e4:	4b06      	ldr	r3, [pc, #24]	@ (8001600 <MX_USART3_UART_Init+0x4c>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015ea:	4805      	ldr	r0, [pc, #20]	@ (8001600 <MX_USART3_UART_Init+0x4c>)
 80015ec:	f003 fe50 	bl	8005290 <HAL_UART_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015f6:	f000 f9c3 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	2000023c 	.word	0x2000023c
 8001604:	40004800 	.word	0x40004800

08001608 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800160c:	4b14      	ldr	r3, [pc, #80]	@ (8001660 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800160e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001612:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001614:	4b12      	ldr	r3, [pc, #72]	@ (8001660 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001616:	2206      	movs	r2, #6
 8001618:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800161a:	4b11      	ldr	r3, [pc, #68]	@ (8001660 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800161c:	2202      	movs	r2, #2
 800161e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001620:	4b0f      	ldr	r3, [pc, #60]	@ (8001660 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001622:	2200      	movs	r2, #0
 8001624:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001626:	4b0e      	ldr	r3, [pc, #56]	@ (8001660 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001628:	2202      	movs	r2, #2
 800162a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800162c:	4b0c      	ldr	r3, [pc, #48]	@ (8001660 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800162e:	2201      	movs	r2, #1
 8001630:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001632:	4b0b      	ldr	r3, [pc, #44]	@ (8001660 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001634:	2200      	movs	r2, #0
 8001636:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001638:	4b09      	ldr	r3, [pc, #36]	@ (8001660 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800163a:	2200      	movs	r2, #0
 800163c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800163e:	4b08      	ldr	r3, [pc, #32]	@ (8001660 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001640:	2201      	movs	r2, #1
 8001642:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001644:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001646:	2200      	movs	r2, #0
 8001648:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800164a:	4805      	ldr	r0, [pc, #20]	@ (8001660 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800164c:	f002 f9eb 	bl	8003a26 <HAL_PCD_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001656:	f000 f993 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000284 	.word	0x20000284

08001664 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	607b      	str	r3, [r7, #4]
 800166e:	4b17      	ldr	r3, [pc, #92]	@ (80016cc <MX_DMA_Init+0x68>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	4a16      	ldr	r2, [pc, #88]	@ (80016cc <MX_DMA_Init+0x68>)
 8001674:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001678:	6313      	str	r3, [r2, #48]	@ 0x30
 800167a:	4b14      	ldr	r3, [pc, #80]	@ (80016cc <MX_DMA_Init+0x68>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	603b      	str	r3, [r7, #0]
 800168a:	4b10      	ldr	r3, [pc, #64]	@ (80016cc <MX_DMA_Init+0x68>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	4a0f      	ldr	r2, [pc, #60]	@ (80016cc <MX_DMA_Init+0x68>)
 8001690:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001694:	6313      	str	r3, [r2, #48]	@ 0x30
 8001696:	4b0d      	ldr	r3, [pc, #52]	@ (80016cc <MX_DMA_Init+0x68>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800169e:	603b      	str	r3, [r7, #0]
 80016a0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2100      	movs	r1, #0
 80016a6:	2010      	movs	r0, #16
 80016a8:	f001 f9cd 	bl	8002a46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80016ac:	2010      	movs	r0, #16
 80016ae:	f001 f9e6 	bl	8002a7e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2100      	movs	r1, #0
 80016b6:	2038      	movs	r0, #56	@ 0x38
 80016b8:	f001 f9c5 	bl	8002a46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80016bc:	2038      	movs	r0, #56	@ 0x38
 80016be:	f001 f9de 	bl	8002a7e <HAL_NVIC_EnableIRQ>

}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800

080016d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08c      	sub	sp, #48	@ 0x30
 80016d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d6:	f107 031c 	add.w	r3, r7, #28
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	609a      	str	r2, [r3, #8]
 80016e2:	60da      	str	r2, [r3, #12]
 80016e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	61bb      	str	r3, [r7, #24]
 80016ea:	4b50      	ldr	r3, [pc, #320]	@ (800182c <MX_GPIO_Init+0x15c>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ee:	4a4f      	ldr	r2, [pc, #316]	@ (800182c <MX_GPIO_Init+0x15c>)
 80016f0:	f043 0304 	orr.w	r3, r3, #4
 80016f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f6:	4b4d      	ldr	r3, [pc, #308]	@ (800182c <MX_GPIO_Init+0x15c>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	f003 0304 	and.w	r3, r3, #4
 80016fe:	61bb      	str	r3, [r7, #24]
 8001700:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	4b49      	ldr	r3, [pc, #292]	@ (800182c <MX_GPIO_Init+0x15c>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	4a48      	ldr	r2, [pc, #288]	@ (800182c <MX_GPIO_Init+0x15c>)
 800170c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001710:	6313      	str	r3, [r2, #48]	@ 0x30
 8001712:	4b46      	ldr	r3, [pc, #280]	@ (800182c <MX_GPIO_Init+0x15c>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800171a:	617b      	str	r3, [r7, #20]
 800171c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	4b42      	ldr	r3, [pc, #264]	@ (800182c <MX_GPIO_Init+0x15c>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	4a41      	ldr	r2, [pc, #260]	@ (800182c <MX_GPIO_Init+0x15c>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6313      	str	r3, [r2, #48]	@ 0x30
 800172e:	4b3f      	ldr	r3, [pc, #252]	@ (800182c <MX_GPIO_Init+0x15c>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	4b3b      	ldr	r3, [pc, #236]	@ (800182c <MX_GPIO_Init+0x15c>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	4a3a      	ldr	r2, [pc, #232]	@ (800182c <MX_GPIO_Init+0x15c>)
 8001744:	f043 0302 	orr.w	r3, r3, #2
 8001748:	6313      	str	r3, [r2, #48]	@ 0x30
 800174a:	4b38      	ldr	r3, [pc, #224]	@ (800182c <MX_GPIO_Init+0x15c>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	4b34      	ldr	r3, [pc, #208]	@ (800182c <MX_GPIO_Init+0x15c>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	4a33      	ldr	r2, [pc, #204]	@ (800182c <MX_GPIO_Init+0x15c>)
 8001760:	f043 0308 	orr.w	r3, r3, #8
 8001764:	6313      	str	r3, [r2, #48]	@ 0x30
 8001766:	4b31      	ldr	r3, [pc, #196]	@ (800182c <MX_GPIO_Init+0x15c>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	f003 0308 	and.w	r3, r3, #8
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	4b2d      	ldr	r3, [pc, #180]	@ (800182c <MX_GPIO_Init+0x15c>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177a:	4a2c      	ldr	r2, [pc, #176]	@ (800182c <MX_GPIO_Init+0x15c>)
 800177c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001780:	6313      	str	r3, [r2, #48]	@ 0x30
 8001782:	4b2a      	ldr	r3, [pc, #168]	@ (800182c <MX_GPIO_Init+0x15c>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001786:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800178e:	2200      	movs	r2, #0
 8001790:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001794:	4826      	ldr	r0, [pc, #152]	@ (8001830 <MX_GPIO_Init+0x160>)
 8001796:	f002 f909 	bl	80039ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800179a:	2200      	movs	r2, #0
 800179c:	2140      	movs	r1, #64	@ 0x40
 800179e:	4825      	ldr	r0, [pc, #148]	@ (8001834 <MX_GPIO_Init+0x164>)
 80017a0:	f002 f904 	bl	80039ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80017a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017aa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80017ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80017b4:	f107 031c 	add.w	r3, r7, #28
 80017b8:	4619      	mov	r1, r3
 80017ba:	481f      	ldr	r0, [pc, #124]	@ (8001838 <MX_GPIO_Init+0x168>)
 80017bc:	f001 ff62 	bl	8003684 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80017c0:	f244 0381 	movw	r3, #16513	@ 0x4081
 80017c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c6:	2301      	movs	r3, #1
 80017c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ce:	2300      	movs	r3, #0
 80017d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d2:	f107 031c 	add.w	r3, r7, #28
 80017d6:	4619      	mov	r1, r3
 80017d8:	4815      	ldr	r0, [pc, #84]	@ (8001830 <MX_GPIO_Init+0x160>)
 80017da:	f001 ff53 	bl	8003684 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80017de:	2340      	movs	r3, #64	@ 0x40
 80017e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e2:	2301      	movs	r3, #1
 80017e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2300      	movs	r3, #0
 80017ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80017ee:	f107 031c 	add.w	r3, r7, #28
 80017f2:	4619      	mov	r1, r3
 80017f4:	480f      	ldr	r0, [pc, #60]	@ (8001834 <MX_GPIO_Init+0x164>)
 80017f6:	f001 ff45 	bl	8003684 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80017fa:	2380      	movs	r3, #128	@ 0x80
 80017fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017fe:	2300      	movs	r3, #0
 8001800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001806:	f107 031c 	add.w	r3, r7, #28
 800180a:	4619      	mov	r1, r3
 800180c:	4809      	ldr	r0, [pc, #36]	@ (8001834 <MX_GPIO_Init+0x164>)
 800180e:	f001 ff39 	bl	8003684 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	2100      	movs	r1, #0
 8001816:	2028      	movs	r0, #40	@ 0x28
 8001818:	f001 f915 	bl	8002a46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800181c:	2028      	movs	r0, #40	@ 0x28
 800181e:	f001 f92e 	bl	8002a7e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001822:	bf00      	nop
 8001824:	3730      	adds	r7, #48	@ 0x30
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40023800 	.word	0x40023800
 8001830:	40020400 	.word	0x40020400
 8001834:	40021800 	.word	0x40021800
 8001838:	40020800 	.word	0x40020800

0800183c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  if(huart == &huart2)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a06      	ldr	r2, [pc, #24]	@ (8001860 <HAL_UART_RxCpltCallback+0x24>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d104      	bne.n	8001856 <HAL_UART_RxCpltCallback+0x1a>
  {
	  UART2_Receive(huart2.pRxBuffPtr);
 800184c:	4b04      	ldr	r3, [pc, #16]	@ (8001860 <HAL_UART_RxCpltCallback+0x24>)
 800184e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001850:	4618      	mov	r0, r3
 8001852:	f000 f807 	bl	8001864 <UART2_Receive>
  }

}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	200001f4 	.word	0x200001f4

08001864 <UART2_Receive>:

void UART2_Receive(uint8_t *rxBuffer)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]

}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <HAL_ADC_ConvCpltCallback>:



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */

	UNUSED(hadc);
	wave_stats wave = GetRmsRaw((uint16_t *) &adc1_data, 1024);
 8001880:	f107 0308 	add.w	r3, r7, #8
 8001884:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001888:	4929      	ldr	r1, [pc, #164]	@ (8001930 <HAL_ADC_ConvCpltCallback+0xb8>)
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff fbf0 	bl	8001070 <GetRmsRaw>

	adc1_mean = wave.mean * (3.6 / 4096.0);
 8001890:	89fb      	ldrh	r3, [r7, #14]
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe fe0a 	bl	80004ac <__aeabi_i2d>
 8001898:	a323      	add	r3, pc, #140	@ (adr r3, 8001928 <HAL_ADC_ConvCpltCallback+0xb0>)
 800189a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189e:	f7fe fe6f 	bl	8000580 <__aeabi_dmul>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4923      	ldr	r1, [pc, #140]	@ (8001934 <HAL_ADC_ConvCpltCallback+0xbc>)
 80018a8:	e9c1 2300 	strd	r2, r3, [r1]

	adc1_peak_to_peak = wave.peak_to_peak * (3.6 / 4096.0);
 80018ac:	89bb      	ldrh	r3, [r7, #12]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe fdfc 	bl	80004ac <__aeabi_i2d>
 80018b4:	a31c      	add	r3, pc, #112	@ (adr r3, 8001928 <HAL_ADC_ConvCpltCallback+0xb0>)
 80018b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ba:	f7fe fe61 	bl	8000580 <__aeabi_dmul>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	491d      	ldr	r1, [pc, #116]	@ (8001938 <HAL_ADC_ConvCpltCallback+0xc0>)
 80018c4:	e9c1 2300 	strd	r2, r3, [r1]

	adc1_rms = wave.rms * (3.6 / 4096.0);
 80018c8:	8a3b      	ldrh	r3, [r7, #16]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7fe fdee 	bl	80004ac <__aeabi_i2d>
 80018d0:	a315      	add	r3, pc, #84	@ (adr r3, 8001928 <HAL_ADC_ConvCpltCallback+0xb0>)
 80018d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d6:	f7fe fe53 	bl	8000580 <__aeabi_dmul>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	4917      	ldr	r1, [pc, #92]	@ (800193c <HAL_ADC_ConvCpltCallback+0xc4>)
 80018e0:	e9c1 2300 	strd	r2, r3, [r1]

	adc1_period = wave.samples_per_period * adc1_conv_time;
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe fdf2 	bl	80004d0 <__aeabi_f2d>
 80018ec:	4b14      	ldr	r3, [pc, #80]	@ (8001940 <HAL_ADC_ConvCpltCallback+0xc8>)
 80018ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f2:	f7fe fe45 	bl	8000580 <__aeabi_dmul>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4912      	ldr	r1, [pc, #72]	@ (8001944 <HAL_ADC_ConvCpltCallback+0xcc>)
 80018fc:	e9c1 2300 	strd	r2, r3, [r1]

	adc1_frequency = 1.0 / adc1_period;
 8001900:	4b10      	ldr	r3, [pc, #64]	@ (8001944 <HAL_ADC_ConvCpltCallback+0xcc>)
 8001902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001906:	f04f 0000 	mov.w	r0, #0
 800190a:	490f      	ldr	r1, [pc, #60]	@ (8001948 <HAL_ADC_ConvCpltCallback+0xd0>)
 800190c:	f7fe ff62 	bl	80007d4 <__aeabi_ddiv>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	490d      	ldr	r1, [pc, #52]	@ (800194c <HAL_ADC_ConvCpltCallback+0xd4>)
 8001916:	e9c1 2300 	strd	r2, r3, [r1]



}
 800191a:	bf00      	nop
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	f3af 8000 	nop.w
 8001928:	cccccccd 	.word	0xcccccccd
 800192c:	3f4ccccc 	.word	0x3f4ccccc
 8001930:	20000768 	.word	0x20000768
 8001934:	20000f68 	.word	0x20000f68
 8001938:	20000f90 	.word	0x20000f90
 800193c:	20000f88 	.word	0x20000f88
 8001940:	20000f70 	.word	0x20000f70
 8001944:	20000f78 	.word	0x20000f78
 8001948:	3ff00000 	.word	0x3ff00000
 800194c:	20000f80 	.word	0x20000f80

08001950 <ADCConvertTime>:

double ADCConvertTime(ADC_HandleTypeDef *hadc)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]

	//double bits = 12.0; // ? hadc->Init.Resolution == ADC_RESOLUTION_12B : 8.0;
	//double sample_time = 3.0;
	//double prescale = 4.0; //Todo: Need an implementation for this

	return (15.0) * (1.0 / (double) 21000000);
 8001958:	a307      	add	r3, pc, #28	@ (adr r3, 8001978 <ADCConvertTime+0x28>)
 800195a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001962:	eeb0 0a47 	vmov.f32	s0, s14
 8001966:	eef0 0a67 	vmov.f32	s1, s15
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	f3af 8000 	nop.w
 8001978:	e5962eca 	.word	0xe5962eca
 800197c:	3ea7f7aa 	.word	0x3ea7f7aa

08001980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001984:	b672      	cpsid	i
}
 8001986:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001988:	bf00      	nop
 800198a:	e7fd      	b.n	8001988 <Error_Handler+0x8>

0800198c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	4b10      	ldr	r3, [pc, #64]	@ (80019d8 <HAL_MspInit+0x4c>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199a:	4a0f      	ldr	r2, [pc, #60]	@ (80019d8 <HAL_MspInit+0x4c>)
 800199c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019a2:	4b0d      	ldr	r3, [pc, #52]	@ (80019d8 <HAL_MspInit+0x4c>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	603b      	str	r3, [r7, #0]
 80019b2:	4b09      	ldr	r3, [pc, #36]	@ (80019d8 <HAL_MspInit+0x4c>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b6:	4a08      	ldr	r2, [pc, #32]	@ (80019d8 <HAL_MspInit+0x4c>)
 80019b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019be:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <HAL_MspInit+0x4c>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019c6:	603b      	str	r3, [r7, #0]
 80019c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	40023800 	.word	0x40023800

080019dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08a      	sub	sp, #40	@ 0x28
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a33      	ldr	r2, [pc, #204]	@ (8001ac8 <HAL_ADC_MspInit+0xec>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d160      	bne.n	8001ac0 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	4b32      	ldr	r3, [pc, #200]	@ (8001acc <HAL_ADC_MspInit+0xf0>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a06:	4a31      	ldr	r2, [pc, #196]	@ (8001acc <HAL_ADC_MspInit+0xf0>)
 8001a08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a0e:	4b2f      	ldr	r3, [pc, #188]	@ (8001acc <HAL_ADC_MspInit+0xf0>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	4b2b      	ldr	r3, [pc, #172]	@ (8001acc <HAL_ADC_MspInit+0xf0>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a22:	4a2a      	ldr	r2, [pc, #168]	@ (8001acc <HAL_ADC_MspInit+0xf0>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a2a:	4b28      	ldr	r3, [pc, #160]	@ (8001acc <HAL_ADC_MspInit+0xf0>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a36:	2308      	movs	r3, #8
 8001a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a42:	f107 0314 	add.w	r3, r7, #20
 8001a46:	4619      	mov	r1, r3
 8001a48:	4821      	ldr	r0, [pc, #132]	@ (8001ad0 <HAL_ADC_MspInit+0xf4>)
 8001a4a:	f001 fe1b 	bl	8003684 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001a4e:	4b21      	ldr	r3, [pc, #132]	@ (8001ad4 <HAL_ADC_MspInit+0xf8>)
 8001a50:	4a21      	ldr	r2, [pc, #132]	@ (8001ad8 <HAL_ADC_MspInit+0xfc>)
 8001a52:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001a54:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad4 <HAL_ADC_MspInit+0xf8>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad4 <HAL_ADC_MspInit+0xf8>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a60:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad4 <HAL_ADC_MspInit+0xf8>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a66:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad4 <HAL_ADC_MspInit+0xf8>)
 8001a68:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a6c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a6e:	4b19      	ldr	r3, [pc, #100]	@ (8001ad4 <HAL_ADC_MspInit+0xf8>)
 8001a70:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a74:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a76:	4b17      	ldr	r3, [pc, #92]	@ (8001ad4 <HAL_ADC_MspInit+0xf8>)
 8001a78:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a7c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001a7e:	4b15      	ldr	r3, [pc, #84]	@ (8001ad4 <HAL_ADC_MspInit+0xf8>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001a84:	4b13      	ldr	r3, [pc, #76]	@ (8001ad4 <HAL_ADC_MspInit+0xf8>)
 8001a86:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001a8a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001a8c:	4b11      	ldr	r3, [pc, #68]	@ (8001ad4 <HAL_ADC_MspInit+0xf8>)
 8001a8e:	2204      	movs	r2, #4
 8001a90:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001a92:	4b10      	ldr	r3, [pc, #64]	@ (8001ad4 <HAL_ADC_MspInit+0xf8>)
 8001a94:	2203      	movs	r2, #3
 8001a96:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8001a98:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad4 <HAL_ADC_MspInit+0xf8>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad4 <HAL_ADC_MspInit+0xf8>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001aa4:	480b      	ldr	r0, [pc, #44]	@ (8001ad4 <HAL_ADC_MspInit+0xf8>)
 8001aa6:	f001 f9eb 	bl	8002e80 <HAL_DMA_Init>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <HAL_ADC_MspInit+0xd8>
    {
      Error_Handler();
 8001ab0:	f7ff ff66 	bl	8001980 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a07      	ldr	r2, [pc, #28]	@ (8001ad4 <HAL_ADC_MspInit+0xf8>)
 8001ab8:	639a      	str	r2, [r3, #56]	@ 0x38
 8001aba:	4a06      	ldr	r2, [pc, #24]	@ (8001ad4 <HAL_ADC_MspInit+0xf8>)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ac0:	bf00      	nop
 8001ac2:	3728      	adds	r7, #40	@ 0x28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40012000 	.word	0x40012000
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40020000 	.word	0x40020000
 8001ad4:	200000d8 	.word	0x200000d8
 8001ad8:	40026410 	.word	0x40026410

08001adc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08a      	sub	sp, #40	@ 0x28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae4:	f107 0314 	add.w	r3, r7, #20
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a30      	ldr	r2, [pc, #192]	@ (8001bbc <HAL_DAC_MspInit+0xe0>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d159      	bne.n	8001bb2 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	4b2f      	ldr	r3, [pc, #188]	@ (8001bc0 <HAL_DAC_MspInit+0xe4>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b06:	4a2e      	ldr	r2, [pc, #184]	@ (8001bc0 <HAL_DAC_MspInit+0xe4>)
 8001b08:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001b0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b0e:	4b2c      	ldr	r3, [pc, #176]	@ (8001bc0 <HAL_DAC_MspInit+0xe4>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b12:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b16:	613b      	str	r3, [r7, #16]
 8001b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	4b28      	ldr	r3, [pc, #160]	@ (8001bc0 <HAL_DAC_MspInit+0xe4>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b22:	4a27      	ldr	r2, [pc, #156]	@ (8001bc0 <HAL_DAC_MspInit+0xe4>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b2a:	4b25      	ldr	r3, [pc, #148]	@ (8001bc0 <HAL_DAC_MspInit+0xe4>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001b36:	2330      	movs	r3, #48	@ 0x30
 8001b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b42:	f107 0314 	add.w	r3, r7, #20
 8001b46:	4619      	mov	r1, r3
 8001b48:	481e      	ldr	r0, [pc, #120]	@ (8001bc4 <HAL_DAC_MspInit+0xe8>)
 8001b4a:	f001 fd9b 	bl	8003684 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001bc8 <HAL_DAC_MspInit+0xec>)
 8001b50:	4a1e      	ldr	r2, [pc, #120]	@ (8001bcc <HAL_DAC_MspInit+0xf0>)
 8001b52:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001b54:	4b1c      	ldr	r3, [pc, #112]	@ (8001bc8 <HAL_DAC_MspInit+0xec>)
 8001b56:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001b5a:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001bc8 <HAL_DAC_MspInit+0xec>)
 8001b5e:	2240      	movs	r2, #64	@ 0x40
 8001b60:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b62:	4b19      	ldr	r3, [pc, #100]	@ (8001bc8 <HAL_DAC_MspInit+0xec>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001b68:	4b17      	ldr	r3, [pc, #92]	@ (8001bc8 <HAL_DAC_MspInit+0xec>)
 8001b6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b6e:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b70:	4b15      	ldr	r3, [pc, #84]	@ (8001bc8 <HAL_DAC_MspInit+0xec>)
 8001b72:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b76:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b78:	4b13      	ldr	r3, [pc, #76]	@ (8001bc8 <HAL_DAC_MspInit+0xec>)
 8001b7a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b7e:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001b80:	4b11      	ldr	r3, [pc, #68]	@ (8001bc8 <HAL_DAC_MspInit+0xec>)
 8001b82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b86:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001b88:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc8 <HAL_DAC_MspInit+0xec>)
 8001b8a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b8e:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b90:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc8 <HAL_DAC_MspInit+0xec>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001b96:	480c      	ldr	r0, [pc, #48]	@ (8001bc8 <HAL_DAC_MspInit+0xec>)
 8001b98:	f001 f972 	bl	8002e80 <HAL_DMA_Init>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8001ba2:	f7ff feed 	bl	8001980 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a07      	ldr	r2, [pc, #28]	@ (8001bc8 <HAL_DAC_MspInit+0xec>)
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	4a06      	ldr	r2, [pc, #24]	@ (8001bc8 <HAL_DAC_MspInit+0xec>)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001bb2:	bf00      	nop
 8001bb4:	3728      	adds	r7, #40	@ 0x28
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40007400 	.word	0x40007400
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	40020000 	.word	0x40020000
 8001bc8:	2000014c 	.word	0x2000014c
 8001bcc:	40026088 	.word	0x40026088

08001bd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a0b      	ldr	r2, [pc, #44]	@ (8001c0c <HAL_TIM_Base_MspInit+0x3c>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d10d      	bne.n	8001bfe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	4b0a      	ldr	r3, [pc, #40]	@ (8001c10 <HAL_TIM_Base_MspInit+0x40>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bea:	4a09      	ldr	r2, [pc, #36]	@ (8001c10 <HAL_TIM_Base_MspInit+0x40>)
 8001bec:	f043 0310 	orr.w	r3, r3, #16
 8001bf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bf2:	4b07      	ldr	r3, [pc, #28]	@ (8001c10 <HAL_TIM_Base_MspInit+0x40>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf6:	f003 0310 	and.w	r3, r3, #16
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001bfe:	bf00      	nop
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	40001000 	.word	0x40001000
 8001c10:	40023800 	.word	0x40023800

08001c14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08c      	sub	sp, #48	@ 0x30
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1c:	f107 031c 	add.w	r3, r7, #28
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	60da      	str	r2, [r3, #12]
 8001c2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a36      	ldr	r2, [pc, #216]	@ (8001d0c <HAL_UART_MspInit+0xf8>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d134      	bne.n	8001ca0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	61bb      	str	r3, [r7, #24]
 8001c3a:	4b35      	ldr	r3, [pc, #212]	@ (8001d10 <HAL_UART_MspInit+0xfc>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3e:	4a34      	ldr	r2, [pc, #208]	@ (8001d10 <HAL_UART_MspInit+0xfc>)
 8001c40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c46:	4b32      	ldr	r3, [pc, #200]	@ (8001d10 <HAL_UART_MspInit+0xfc>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c4e:	61bb      	str	r3, [r7, #24]
 8001c50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	617b      	str	r3, [r7, #20]
 8001c56:	4b2e      	ldr	r3, [pc, #184]	@ (8001d10 <HAL_UART_MspInit+0xfc>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5a:	4a2d      	ldr	r2, [pc, #180]	@ (8001d10 <HAL_UART_MspInit+0xfc>)
 8001c5c:	f043 0308 	orr.w	r3, r3, #8
 8001c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c62:	4b2b      	ldr	r3, [pc, #172]	@ (8001d10 <HAL_UART_MspInit+0xfc>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	617b      	str	r3, [r7, #20]
 8001c6c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001c6e:	2360      	movs	r3, #96	@ 0x60
 8001c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c72:	2302      	movs	r3, #2
 8001c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c7e:	2307      	movs	r3, #7
 8001c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c82:	f107 031c 	add.w	r3, r7, #28
 8001c86:	4619      	mov	r1, r3
 8001c88:	4822      	ldr	r0, [pc, #136]	@ (8001d14 <HAL_UART_MspInit+0x100>)
 8001c8a:	f001 fcfb 	bl	8003684 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2100      	movs	r1, #0
 8001c92:	2026      	movs	r0, #38	@ 0x26
 8001c94:	f000 fed7 	bl	8002a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c98:	2026      	movs	r0, #38	@ 0x26
 8001c9a:	f000 fef0 	bl	8002a7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c9e:	e031      	b.n	8001d04 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a1c      	ldr	r2, [pc, #112]	@ (8001d18 <HAL_UART_MspInit+0x104>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d12c      	bne.n	8001d04 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	4b18      	ldr	r3, [pc, #96]	@ (8001d10 <HAL_UART_MspInit+0xfc>)
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb2:	4a17      	ldr	r2, [pc, #92]	@ (8001d10 <HAL_UART_MspInit+0xfc>)
 8001cb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cba:	4b15      	ldr	r3, [pc, #84]	@ (8001d10 <HAL_UART_MspInit+0xfc>)
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	4b11      	ldr	r3, [pc, #68]	@ (8001d10 <HAL_UART_MspInit+0xfc>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cce:	4a10      	ldr	r2, [pc, #64]	@ (8001d10 <HAL_UART_MspInit+0xfc>)
 8001cd0:	f043 0308 	orr.w	r3, r3, #8
 8001cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d10 <HAL_UART_MspInit+0xfc>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001ce2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ce6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cf4:	2307      	movs	r3, #7
 8001cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cf8:	f107 031c 	add.w	r3, r7, #28
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4805      	ldr	r0, [pc, #20]	@ (8001d14 <HAL_UART_MspInit+0x100>)
 8001d00:	f001 fcc0 	bl	8003684 <HAL_GPIO_Init>
}
 8001d04:	bf00      	nop
 8001d06:	3730      	adds	r7, #48	@ 0x30
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40004400 	.word	0x40004400
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40020c00 	.word	0x40020c00
 8001d18:	40004800 	.word	0x40004800

08001d1c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b0a0      	sub	sp, #128	@ 0x80
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d24:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d34:	f107 0310 	add.w	r3, r7, #16
 8001d38:	225c      	movs	r2, #92	@ 0x5c
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f005 fc9f 	bl	8007680 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d4a:	d14e      	bne.n	8001dea <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001d4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d50:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001d52:	2300      	movs	r3, #0
 8001d54:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d56:	f107 0310 	add.w	r3, r7, #16
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f002 f8b8 	bl	8003ed0 <HAL_RCCEx_PeriphCLKConfig>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8001d66:	f7ff fe0b 	bl	8001980 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	4b21      	ldr	r3, [pc, #132]	@ (8001df4 <HAL_PCD_MspInit+0xd8>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d72:	4a20      	ldr	r2, [pc, #128]	@ (8001df4 <HAL_PCD_MspInit+0xd8>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d7a:	4b1e      	ldr	r3, [pc, #120]	@ (8001df4 <HAL_PCD_MspInit+0xd8>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001d86:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001d8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d94:	2303      	movs	r3, #3
 8001d96:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001d98:	230a      	movs	r3, #10
 8001d9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001da0:	4619      	mov	r1, r3
 8001da2:	4815      	ldr	r0, [pc, #84]	@ (8001df8 <HAL_PCD_MspInit+0xdc>)
 8001da4:	f001 fc6e 	bl	8003684 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001da8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001dac:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dae:	2300      	movs	r3, #0
 8001db0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001db6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001dba:	4619      	mov	r1, r3
 8001dbc:	480e      	ldr	r0, [pc, #56]	@ (8001df8 <HAL_PCD_MspInit+0xdc>)
 8001dbe:	f001 fc61 	bl	8003684 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8001df4 <HAL_PCD_MspInit+0xd8>)
 8001dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dc6:	4a0b      	ldr	r2, [pc, #44]	@ (8001df4 <HAL_PCD_MspInit+0xd8>)
 8001dc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001dcc:	6353      	str	r3, [r2, #52]	@ 0x34
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60bb      	str	r3, [r7, #8]
 8001dd2:	4b08      	ldr	r3, [pc, #32]	@ (8001df4 <HAL_PCD_MspInit+0xd8>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd6:	4a07      	ldr	r2, [pc, #28]	@ (8001df4 <HAL_PCD_MspInit+0xd8>)
 8001dd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ddc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dde:	4b05      	ldr	r3, [pc, #20]	@ (8001df4 <HAL_PCD_MspInit+0xd8>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001dea:	bf00      	nop
 8001dec:	3780      	adds	r7, #128	@ 0x80
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40023800 	.word	0x40023800
 8001df8:	40020000 	.word	0x40020000

08001dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e00:	bf00      	nop
 8001e02:	e7fd      	b.n	8001e00 <NMI_Handler+0x4>

08001e04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e08:	bf00      	nop
 8001e0a:	e7fd      	b.n	8001e08 <HardFault_Handler+0x4>

08001e0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e10:	bf00      	nop
 8001e12:	e7fd      	b.n	8001e10 <MemManage_Handler+0x4>

08001e14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e18:	bf00      	nop
 8001e1a:	e7fd      	b.n	8001e18 <BusFault_Handler+0x4>

08001e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e20:	bf00      	nop
 8001e22:	e7fd      	b.n	8001e20 <UsageFault_Handler+0x4>

08001e24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e52:	f000 f8c1 	bl	8001fd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
	...

08001e5c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001e60:	4802      	ldr	r0, [pc, #8]	@ (8001e6c <DMA1_Stream5_IRQHandler+0x10>)
 8001e62:	f001 f9a5 	bl	80031b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	2000014c 	.word	0x2000014c

08001e70 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e74:	4802      	ldr	r0, [pc, #8]	@ (8001e80 <USART2_IRQHandler+0x10>)
 8001e76:	f003 fa81 	bl	800537c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	200001f4 	.word	0x200001f4

08001e84 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc1_data, 1024);
 8001e88:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e8c:	4904      	ldr	r1, [pc, #16]	@ (8001ea0 <EXTI15_10_IRQHandler+0x1c>)
 8001e8e:	4805      	ldr	r0, [pc, #20]	@ (8001ea4 <EXTI15_10_IRQHandler+0x20>)
 8001e90:	f000 f92a 	bl	80020e8 <HAL_ADC_Start_DMA>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001e94:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001e98:	f001 fda2 	bl	80039e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e9c:	bf00      	nop
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	20000768 	.word	0x20000768
 8001ea4:	20000090 	.word	0x20000090

08001ea8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001eac:	4802      	ldr	r0, [pc, #8]	@ (8001eb8 <DMA2_Stream0_IRQHandler+0x10>)
 8001eae:	f001 f97f 	bl	80031b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	200000d8 	.word	0x200000d8

08001ebc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ec0:	4b06      	ldr	r3, [pc, #24]	@ (8001edc <SystemInit+0x20>)
 8001ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ec6:	4a05      	ldr	r2, [pc, #20]	@ (8001edc <SystemInit+0x20>)
 8001ec8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ecc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ed0:	bf00      	nop
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ee0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f18 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ee4:	f7ff ffea 	bl	8001ebc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ee8:	480c      	ldr	r0, [pc, #48]	@ (8001f1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001eea:	490d      	ldr	r1, [pc, #52]	@ (8001f20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001eec:	4a0d      	ldr	r2, [pc, #52]	@ (8001f24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001eee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ef0:	e002      	b.n	8001ef8 <LoopCopyDataInit>

08001ef2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ef2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ef4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ef6:	3304      	adds	r3, #4

08001ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ef8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001efa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001efc:	d3f9      	bcc.n	8001ef2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001efe:	4a0a      	ldr	r2, [pc, #40]	@ (8001f28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f00:	4c0a      	ldr	r4, [pc, #40]	@ (8001f2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f04:	e001      	b.n	8001f0a <LoopFillZerobss>

08001f06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f08:	3204      	adds	r2, #4

08001f0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f0c:	d3fb      	bcc.n	8001f06 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001f0e:	f005 fbc5 	bl	800769c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f12:	f7ff f98f 	bl	8001234 <main>
  bx  lr    
 8001f16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f20:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001f24:	080077e0 	.word	0x080077e0
  ldr r2, =_sbss
 8001f28:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001f2c:	200010d4 	.word	0x200010d4

08001f30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f30:	e7fe      	b.n	8001f30 <ADC_IRQHandler>
	...

08001f34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f38:	4b0e      	ldr	r3, [pc, #56]	@ (8001f74 <HAL_Init+0x40>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f74 <HAL_Init+0x40>)
 8001f3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f44:	4b0b      	ldr	r3, [pc, #44]	@ (8001f74 <HAL_Init+0x40>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a0a      	ldr	r2, [pc, #40]	@ (8001f74 <HAL_Init+0x40>)
 8001f4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f50:	4b08      	ldr	r3, [pc, #32]	@ (8001f74 <HAL_Init+0x40>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a07      	ldr	r2, [pc, #28]	@ (8001f74 <HAL_Init+0x40>)
 8001f56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f5c:	2003      	movs	r0, #3
 8001f5e:	f000 fd67 	bl	8002a30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f62:	2000      	movs	r0, #0
 8001f64:	f000 f808 	bl	8001f78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f68:	f7ff fd10 	bl	800198c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40023c00 	.word	0x40023c00

08001f78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f80:	4b12      	ldr	r3, [pc, #72]	@ (8001fcc <HAL_InitTick+0x54>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	4b12      	ldr	r3, [pc, #72]	@ (8001fd0 <HAL_InitTick+0x58>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f96:	4618      	mov	r0, r3
 8001f98:	f000 fd7f 	bl	8002a9a <HAL_SYSTICK_Config>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e00e      	b.n	8001fc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b0f      	cmp	r3, #15
 8001faa:	d80a      	bhi.n	8001fc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fac:	2200      	movs	r2, #0
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb4:	f000 fd47 	bl	8002a46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fb8:	4a06      	ldr	r2, [pc, #24]	@ (8001fd4 <HAL_InitTick+0x5c>)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	e000      	b.n	8001fc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	20000000 	.word	0x20000000
 8001fd0:	20000008 	.word	0x20000008
 8001fd4:	20000004 	.word	0x20000004

08001fd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fdc:	4b06      	ldr	r3, [pc, #24]	@ (8001ff8 <HAL_IncTick+0x20>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4b06      	ldr	r3, [pc, #24]	@ (8001ffc <HAL_IncTick+0x24>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	4a04      	ldr	r2, [pc, #16]	@ (8001ffc <HAL_IncTick+0x24>)
 8001fea:	6013      	str	r3, [r2, #0]
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	20000008 	.word	0x20000008
 8001ffc:	20000f98 	.word	0x20000f98

08002000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  return uwTick;
 8002004:	4b03      	ldr	r3, [pc, #12]	@ (8002014 <HAL_GetTick+0x14>)
 8002006:	681b      	ldr	r3, [r3, #0]
}
 8002008:	4618      	mov	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	20000f98 	.word	0x20000f98

08002018 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002020:	f7ff ffee 	bl	8002000 <HAL_GetTick>
 8002024:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002030:	d005      	beq.n	800203e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002032:	4b0a      	ldr	r3, [pc, #40]	@ (800205c <HAL_Delay+0x44>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	461a      	mov	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4413      	add	r3, r2
 800203c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800203e:	bf00      	nop
 8002040:	f7ff ffde 	bl	8002000 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	429a      	cmp	r2, r3
 800204e:	d8f7      	bhi.n	8002040 <HAL_Delay+0x28>
  {
  }
}
 8002050:	bf00      	nop
 8002052:	bf00      	nop
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000008 	.word	0x20000008

08002060 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002068:	2300      	movs	r3, #0
 800206a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e033      	b.n	80020de <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207a:	2b00      	cmp	r3, #0
 800207c:	d109      	bne.n	8002092 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff fcac 	bl	80019dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002096:	f003 0310 	and.w	r3, r3, #16
 800209a:	2b00      	cmp	r3, #0
 800209c:	d118      	bne.n	80020d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80020a6:	f023 0302 	bic.w	r3, r3, #2
 80020aa:	f043 0202 	orr.w	r2, r3, #2
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 fa6e 	bl	8002594 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c2:	f023 0303 	bic.w	r3, r3, #3
 80020c6:	f043 0201 	orr.w	r2, r3, #1
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	641a      	str	r2, [r3, #64]	@ 0x40
 80020ce:	e001      	b.n	80020d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
	...

080020e8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80020f4:	2300      	movs	r3, #0
 80020f6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d101      	bne.n	8002106 <HAL_ADC_Start_DMA+0x1e>
 8002102:	2302      	movs	r3, #2
 8002104:	e0e9      	b.n	80022da <HAL_ADC_Start_DMA+0x1f2>
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	2b01      	cmp	r3, #1
 800211a:	d018      	beq.n	800214e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f042 0201 	orr.w	r2, r2, #1
 800212a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800212c:	4b6d      	ldr	r3, [pc, #436]	@ (80022e4 <HAL_ADC_Start_DMA+0x1fc>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a6d      	ldr	r2, [pc, #436]	@ (80022e8 <HAL_ADC_Start_DMA+0x200>)
 8002132:	fba2 2303 	umull	r2, r3, r2, r3
 8002136:	0c9a      	lsrs	r2, r3, #18
 8002138:	4613      	mov	r3, r2
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	4413      	add	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002140:	e002      	b.n	8002148 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	3b01      	subs	r3, #1
 8002146:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1f9      	bne.n	8002142 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002158:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800215c:	d107      	bne.n	800216e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800216c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b01      	cmp	r3, #1
 800217a:	f040 80a1 	bne.w	80022c0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002182:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002186:	f023 0301 	bic.w	r3, r3, #1
 800218a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800219c:	2b00      	cmp	r3, #0
 800219e:	d007      	beq.n	80021b0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021a8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021bc:	d106      	bne.n	80021cc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c2:	f023 0206 	bic.w	r2, r3, #6
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	645a      	str	r2, [r3, #68]	@ 0x44
 80021ca:	e002      	b.n	80021d2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021da:	4b44      	ldr	r3, [pc, #272]	@ (80022ec <HAL_ADC_Start_DMA+0x204>)
 80021dc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021e2:	4a43      	ldr	r2, [pc, #268]	@ (80022f0 <HAL_ADC_Start_DMA+0x208>)
 80021e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ea:	4a42      	ldr	r2, [pc, #264]	@ (80022f4 <HAL_ADC_Start_DMA+0x20c>)
 80021ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021f2:	4a41      	ldr	r2, [pc, #260]	@ (80022f8 <HAL_ADC_Start_DMA+0x210>)
 80021f4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80021fe:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800220e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	689a      	ldr	r2, [r3, #8]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800221e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	334c      	adds	r3, #76	@ 0x4c
 800222a:	4619      	mov	r1, r3
 800222c:	68ba      	ldr	r2, [r7, #8]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f000 fed4 	bl	8002fdc <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f003 031f 	and.w	r3, r3, #31
 800223c:	2b00      	cmp	r3, #0
 800223e:	d12a      	bne.n	8002296 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a2d      	ldr	r2, [pc, #180]	@ (80022fc <HAL_ADC_Start_DMA+0x214>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d015      	beq.n	8002276 <HAL_ADC_Start_DMA+0x18e>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a2c      	ldr	r2, [pc, #176]	@ (8002300 <HAL_ADC_Start_DMA+0x218>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d105      	bne.n	8002260 <HAL_ADC_Start_DMA+0x178>
 8002254:	4b25      	ldr	r3, [pc, #148]	@ (80022ec <HAL_ADC_Start_DMA+0x204>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 031f 	and.w	r3, r3, #31
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00a      	beq.n	8002276 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a27      	ldr	r2, [pc, #156]	@ (8002304 <HAL_ADC_Start_DMA+0x21c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d136      	bne.n	80022d8 <HAL_ADC_Start_DMA+0x1f0>
 800226a:	4b20      	ldr	r3, [pc, #128]	@ (80022ec <HAL_ADC_Start_DMA+0x204>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f003 0310 	and.w	r3, r3, #16
 8002272:	2b00      	cmp	r3, #0
 8002274:	d130      	bne.n	80022d8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d129      	bne.n	80022d8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689a      	ldr	r2, [r3, #8]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002292:	609a      	str	r2, [r3, #8]
 8002294:	e020      	b.n	80022d8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a18      	ldr	r2, [pc, #96]	@ (80022fc <HAL_ADC_Start_DMA+0x214>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d11b      	bne.n	80022d8 <HAL_ADC_Start_DMA+0x1f0>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d114      	bne.n	80022d8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80022bc:	609a      	str	r2, [r3, #8]
 80022be:	e00b      	b.n	80022d8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c4:	f043 0210 	orr.w	r2, r3, #16
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d0:	f043 0201 	orr.w	r2, r3, #1
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20000000 	.word	0x20000000
 80022e8:	431bde83 	.word	0x431bde83
 80022ec:	40012300 	.word	0x40012300
 80022f0:	0800278d 	.word	0x0800278d
 80022f4:	08002847 	.word	0x08002847
 80022f8:	08002863 	.word	0x08002863
 80022fc:	40012000 	.word	0x40012000
 8002300:	40012100 	.word	0x40012100
 8002304:	40012200 	.word	0x40012200

08002308 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800233a:	2300      	movs	r3, #0
 800233c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002344:	2b01      	cmp	r3, #1
 8002346:	d101      	bne.n	800234c <HAL_ADC_ConfigChannel+0x1c>
 8002348:	2302      	movs	r3, #2
 800234a:	e113      	b.n	8002574 <HAL_ADC_ConfigChannel+0x244>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b09      	cmp	r3, #9
 800235a:	d925      	bls.n	80023a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68d9      	ldr	r1, [r3, #12]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	b29b      	uxth	r3, r3
 8002368:	461a      	mov	r2, r3
 800236a:	4613      	mov	r3, r2
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	4413      	add	r3, r2
 8002370:	3b1e      	subs	r3, #30
 8002372:	2207      	movs	r2, #7
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	43da      	mvns	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	400a      	ands	r2, r1
 8002380:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68d9      	ldr	r1, [r3, #12]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	b29b      	uxth	r3, r3
 8002392:	4618      	mov	r0, r3
 8002394:	4603      	mov	r3, r0
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	4403      	add	r3, r0
 800239a:	3b1e      	subs	r3, #30
 800239c:	409a      	lsls	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	430a      	orrs	r2, r1
 80023a4:	60da      	str	r2, [r3, #12]
 80023a6:	e022      	b.n	80023ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6919      	ldr	r1, [r3, #16]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	461a      	mov	r2, r3
 80023b6:	4613      	mov	r3, r2
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	4413      	add	r3, r2
 80023bc:	2207      	movs	r2, #7
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43da      	mvns	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	400a      	ands	r2, r1
 80023ca:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6919      	ldr	r1, [r3, #16]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	689a      	ldr	r2, [r3, #8]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	b29b      	uxth	r3, r3
 80023dc:	4618      	mov	r0, r3
 80023de:	4603      	mov	r3, r0
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	4403      	add	r3, r0
 80023e4:	409a      	lsls	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b06      	cmp	r3, #6
 80023f4:	d824      	bhi.n	8002440 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	4613      	mov	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4413      	add	r3, r2
 8002406:	3b05      	subs	r3, #5
 8002408:	221f      	movs	r2, #31
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43da      	mvns	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	400a      	ands	r2, r1
 8002416:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	b29b      	uxth	r3, r3
 8002424:	4618      	mov	r0, r3
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685a      	ldr	r2, [r3, #4]
 800242a:	4613      	mov	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	3b05      	subs	r3, #5
 8002432:	fa00 f203 	lsl.w	r2, r0, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	430a      	orrs	r2, r1
 800243c:	635a      	str	r2, [r3, #52]	@ 0x34
 800243e:	e04c      	b.n	80024da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2b0c      	cmp	r3, #12
 8002446:	d824      	bhi.n	8002492 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	4613      	mov	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4413      	add	r3, r2
 8002458:	3b23      	subs	r3, #35	@ 0x23
 800245a:	221f      	movs	r2, #31
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	43da      	mvns	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	400a      	ands	r2, r1
 8002468:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	b29b      	uxth	r3, r3
 8002476:	4618      	mov	r0, r3
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	3b23      	subs	r3, #35	@ 0x23
 8002484:	fa00 f203 	lsl.w	r2, r0, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	430a      	orrs	r2, r1
 800248e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002490:	e023      	b.n	80024da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	4613      	mov	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	3b41      	subs	r3, #65	@ 0x41
 80024a4:	221f      	movs	r2, #31
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43da      	mvns	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	400a      	ands	r2, r1
 80024b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	b29b      	uxth	r3, r3
 80024c0:	4618      	mov	r0, r3
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	4613      	mov	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	3b41      	subs	r3, #65	@ 0x41
 80024ce:	fa00 f203 	lsl.w	r2, r0, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024da:	4b29      	ldr	r3, [pc, #164]	@ (8002580 <HAL_ADC_ConfigChannel+0x250>)
 80024dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a28      	ldr	r2, [pc, #160]	@ (8002584 <HAL_ADC_ConfigChannel+0x254>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d10f      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x1d8>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2b12      	cmp	r3, #18
 80024ee:	d10b      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a1d      	ldr	r2, [pc, #116]	@ (8002584 <HAL_ADC_ConfigChannel+0x254>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d12b      	bne.n	800256a <HAL_ADC_ConfigChannel+0x23a>
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a1c      	ldr	r2, [pc, #112]	@ (8002588 <HAL_ADC_ConfigChannel+0x258>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d003      	beq.n	8002524 <HAL_ADC_ConfigChannel+0x1f4>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b11      	cmp	r3, #17
 8002522:	d122      	bne.n	800256a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a11      	ldr	r2, [pc, #68]	@ (8002588 <HAL_ADC_ConfigChannel+0x258>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d111      	bne.n	800256a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002546:	4b11      	ldr	r3, [pc, #68]	@ (800258c <HAL_ADC_ConfigChannel+0x25c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a11      	ldr	r2, [pc, #68]	@ (8002590 <HAL_ADC_ConfigChannel+0x260>)
 800254c:	fba2 2303 	umull	r2, r3, r2, r3
 8002550:	0c9a      	lsrs	r2, r3, #18
 8002552:	4613      	mov	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800255c:	e002      	b.n	8002564 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	3b01      	subs	r3, #1
 8002562:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f9      	bne.n	800255e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	40012300 	.word	0x40012300
 8002584:	40012000 	.word	0x40012000
 8002588:	10000012 	.word	0x10000012
 800258c:	20000000 	.word	0x20000000
 8002590:	431bde83 	.word	0x431bde83

08002594 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800259c:	4b79      	ldr	r3, [pc, #484]	@ (8002784 <ADC_Init+0x1f0>)
 800259e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	431a      	orrs	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6859      	ldr	r1, [r3, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	021a      	lsls	r2, r3, #8
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	430a      	orrs	r2, r1
 80025dc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80025ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6859      	ldr	r1, [r3, #4]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689a      	ldr	r2, [r3, #8]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800260e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6899      	ldr	r1, [r3, #8]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68da      	ldr	r2, [r3, #12]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	430a      	orrs	r2, r1
 8002620:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002626:	4a58      	ldr	r2, [pc, #352]	@ (8002788 <ADC_Init+0x1f4>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d022      	beq.n	8002672 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800263a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6899      	ldr	r1, [r3, #8]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	430a      	orrs	r2, r1
 800264c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800265c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6899      	ldr	r1, [r3, #8]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	430a      	orrs	r2, r1
 800266e:	609a      	str	r2, [r3, #8]
 8002670:	e00f      	b.n	8002692 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002680:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002690:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 0202 	bic.w	r2, r2, #2
 80026a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6899      	ldr	r1, [r3, #8]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	7e1b      	ldrb	r3, [r3, #24]
 80026ac:	005a      	lsls	r2, r3, #1
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d01b      	beq.n	80026f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026ce:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80026de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6859      	ldr	r1, [r3, #4]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ea:	3b01      	subs	r3, #1
 80026ec:	035a      	lsls	r2, r3, #13
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	e007      	b.n	8002708 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002706:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002716:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	3b01      	subs	r3, #1
 8002724:	051a      	lsls	r2, r3, #20
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800273c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6899      	ldr	r1, [r3, #8]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800274a:	025a      	lsls	r2, r3, #9
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	430a      	orrs	r2, r1
 8002752:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689a      	ldr	r2, [r3, #8]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002762:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6899      	ldr	r1, [r3, #8]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	029a      	lsls	r2, r3, #10
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	609a      	str	r2, [r3, #8]
}
 8002778:	bf00      	nop
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	40012300 	.word	0x40012300
 8002788:	0f000001 	.word	0x0f000001

0800278c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002798:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d13c      	bne.n	8002820 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027aa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d12b      	bne.n	8002818 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d127      	bne.n	8002818 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ce:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d006      	beq.n	80027e4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d119      	bne.n	8002818 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0220 	bic.w	r2, r2, #32
 80027f2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002804:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d105      	bne.n	8002818 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002810:	f043 0201 	orr.w	r2, r3, #1
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f7ff f82d 	bl	8001878 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800281e:	e00e      	b.n	800283e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002824:	f003 0310 	and.w	r3, r3, #16
 8002828:	2b00      	cmp	r3, #0
 800282a:	d003      	beq.n	8002834 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f7ff fd75 	bl	800231c <HAL_ADC_ErrorCallback>
}
 8002832:	e004      	b.n	800283e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	4798      	blx	r3
}
 800283e:	bf00      	nop
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b084      	sub	sp, #16
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002852:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f7ff fd57 	bl	8002308 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800285a:	bf00      	nop
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b084      	sub	sp, #16
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800286e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2240      	movs	r2, #64	@ 0x40
 8002874:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800287a:	f043 0204 	orr.w	r2, r3, #4
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f7ff fd4a 	bl	800231c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002888:	bf00      	nop
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028a0:	4b0c      	ldr	r3, [pc, #48]	@ (80028d4 <__NVIC_SetPriorityGrouping+0x44>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028ac:	4013      	ands	r3, r2
 80028ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028c2:	4a04      	ldr	r2, [pc, #16]	@ (80028d4 <__NVIC_SetPriorityGrouping+0x44>)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	60d3      	str	r3, [r2, #12]
}
 80028c8:	bf00      	nop
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	e000ed00 	.word	0xe000ed00

080028d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028dc:	4b04      	ldr	r3, [pc, #16]	@ (80028f0 <__NVIC_GetPriorityGrouping+0x18>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	0a1b      	lsrs	r3, r3, #8
 80028e2:	f003 0307 	and.w	r3, r3, #7
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	e000ed00 	.word	0xe000ed00

080028f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002902:	2b00      	cmp	r3, #0
 8002904:	db0b      	blt.n	800291e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002906:	79fb      	ldrb	r3, [r7, #7]
 8002908:	f003 021f 	and.w	r2, r3, #31
 800290c:	4907      	ldr	r1, [pc, #28]	@ (800292c <__NVIC_EnableIRQ+0x38>)
 800290e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002912:	095b      	lsrs	r3, r3, #5
 8002914:	2001      	movs	r0, #1
 8002916:	fa00 f202 	lsl.w	r2, r0, r2
 800291a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	e000e100 	.word	0xe000e100

08002930 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	6039      	str	r1, [r7, #0]
 800293a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800293c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002940:	2b00      	cmp	r3, #0
 8002942:	db0a      	blt.n	800295a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	b2da      	uxtb	r2, r3
 8002948:	490c      	ldr	r1, [pc, #48]	@ (800297c <__NVIC_SetPriority+0x4c>)
 800294a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294e:	0112      	lsls	r2, r2, #4
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	440b      	add	r3, r1
 8002954:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002958:	e00a      	b.n	8002970 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	b2da      	uxtb	r2, r3
 800295e:	4908      	ldr	r1, [pc, #32]	@ (8002980 <__NVIC_SetPriority+0x50>)
 8002960:	79fb      	ldrb	r3, [r7, #7]
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	3b04      	subs	r3, #4
 8002968:	0112      	lsls	r2, r2, #4
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	440b      	add	r3, r1
 800296e:	761a      	strb	r2, [r3, #24]
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	e000e100 	.word	0xe000e100
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002984:	b480      	push	{r7}
 8002986:	b089      	sub	sp, #36	@ 0x24
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f1c3 0307 	rsb	r3, r3, #7
 800299e:	2b04      	cmp	r3, #4
 80029a0:	bf28      	it	cs
 80029a2:	2304      	movcs	r3, #4
 80029a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	3304      	adds	r3, #4
 80029aa:	2b06      	cmp	r3, #6
 80029ac:	d902      	bls.n	80029b4 <NVIC_EncodePriority+0x30>
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	3b03      	subs	r3, #3
 80029b2:	e000      	b.n	80029b6 <NVIC_EncodePriority+0x32>
 80029b4:	2300      	movs	r3, #0
 80029b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b8:	f04f 32ff 	mov.w	r2, #4294967295
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	43da      	mvns	r2, r3
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	401a      	ands	r2, r3
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029cc:	f04f 31ff 	mov.w	r1, #4294967295
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	fa01 f303 	lsl.w	r3, r1, r3
 80029d6:	43d9      	mvns	r1, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029dc:	4313      	orrs	r3, r2
         );
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3724      	adds	r7, #36	@ 0x24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
	...

080029ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029fc:	d301      	bcc.n	8002a02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029fe:	2301      	movs	r3, #1
 8002a00:	e00f      	b.n	8002a22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a02:	4a0a      	ldr	r2, [pc, #40]	@ (8002a2c <SysTick_Config+0x40>)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3b01      	subs	r3, #1
 8002a08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a0a:	210f      	movs	r1, #15
 8002a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a10:	f7ff ff8e 	bl	8002930 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a14:	4b05      	ldr	r3, [pc, #20]	@ (8002a2c <SysTick_Config+0x40>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a1a:	4b04      	ldr	r3, [pc, #16]	@ (8002a2c <SysTick_Config+0x40>)
 8002a1c:	2207      	movs	r2, #7
 8002a1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	e000e010 	.word	0xe000e010

08002a30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f7ff ff29 	bl	8002890 <__NVIC_SetPriorityGrouping>
}
 8002a3e:	bf00      	nop
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b086      	sub	sp, #24
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	60b9      	str	r1, [r7, #8]
 8002a50:	607a      	str	r2, [r7, #4]
 8002a52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a58:	f7ff ff3e 	bl	80028d8 <__NVIC_GetPriorityGrouping>
 8002a5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	68b9      	ldr	r1, [r7, #8]
 8002a62:	6978      	ldr	r0, [r7, #20]
 8002a64:	f7ff ff8e 	bl	8002984 <NVIC_EncodePriority>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a6e:	4611      	mov	r1, r2
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff ff5d 	bl	8002930 <__NVIC_SetPriority>
}
 8002a76:	bf00      	nop
 8002a78:	3718      	adds	r7, #24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b082      	sub	sp, #8
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	4603      	mov	r3, r0
 8002a86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff ff31 	bl	80028f4 <__NVIC_EnableIRQ>
}
 8002a92:	bf00      	nop
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7ff ffa2 	bl	80029ec <SysTick_Config>
 8002aa8:	4603      	mov	r3, r0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e014      	b.n	8002aee <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	791b      	ldrb	r3, [r3, #4]
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d105      	bne.n	8002ada <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff f801 	bl	8001adc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2202      	movs	r2, #2
 8002ade:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
	...

08002af8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
 8002b04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <HAL_DAC_Start_DMA+0x1c>
  {
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e0a2      	b.n	8002c5a <HAL_DAC_Start_DMA+0x162>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	795b      	ldrb	r3, [r3, #5]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d101      	bne.n	8002b20 <HAL_DAC_Start_DMA+0x28>
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	e09c      	b.n	8002c5a <HAL_DAC_Start_DMA+0x162>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2201      	movs	r2, #1
 8002b24:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2202      	movs	r2, #2
 8002b2a:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d129      	bne.n	8002b86 <HAL_DAC_Start_DMA+0x8e>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	4a4b      	ldr	r2, [pc, #300]	@ (8002c64 <HAL_DAC_Start_DMA+0x16c>)
 8002b38:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	4a4a      	ldr	r2, [pc, #296]	@ (8002c68 <HAL_DAC_Start_DMA+0x170>)
 8002b40:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	4a49      	ldr	r2, [pc, #292]	@ (8002c6c <HAL_DAC_Start_DMA+0x174>)
 8002b48:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002b58:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002b5a:	6a3b      	ldr	r3, [r7, #32]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <HAL_DAC_Start_DMA+0x70>
 8002b60:	6a3b      	ldr	r3, [r7, #32]
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	d005      	beq.n	8002b72 <HAL_DAC_Start_DMA+0x7a>
 8002b66:	e009      	b.n	8002b7c <HAL_DAC_Start_DMA+0x84>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	3308      	adds	r3, #8
 8002b6e:	613b      	str	r3, [r7, #16]
        break;
 8002b70:	e033      	b.n	8002bda <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	330c      	adds	r3, #12
 8002b78:	613b      	str	r3, [r7, #16]
        break;
 8002b7a:	e02e      	b.n	8002bda <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	3310      	adds	r3, #16
 8002b82:	613b      	str	r3, [r7, #16]
        break;
 8002b84:	e029      	b.n	8002bda <HAL_DAC_Start_DMA+0xe2>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	4a39      	ldr	r2, [pc, #228]	@ (8002c70 <HAL_DAC_Start_DMA+0x178>)
 8002b8c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	4a38      	ldr	r2, [pc, #224]	@ (8002c74 <HAL_DAC_Start_DMA+0x17c>)
 8002b94:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	4a37      	ldr	r2, [pc, #220]	@ (8002c78 <HAL_DAC_Start_DMA+0x180>)
 8002b9c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002bac:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002bae:	6a3b      	ldr	r3, [r7, #32]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d003      	beq.n	8002bbc <HAL_DAC_Start_DMA+0xc4>
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d005      	beq.n	8002bc6 <HAL_DAC_Start_DMA+0xce>
 8002bba:	e009      	b.n	8002bd0 <HAL_DAC_Start_DMA+0xd8>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	3314      	adds	r3, #20
 8002bc2:	613b      	str	r3, [r7, #16]
        break;
 8002bc4:	e009      	b.n	8002bda <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	3318      	adds	r3, #24
 8002bcc:	613b      	str	r3, [r7, #16]
        break;
 8002bce:	e004      	b.n	8002bda <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	331c      	adds	r3, #28
 8002bd6:	613b      	str	r3, [r7, #16]
        break;
 8002bd8:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d111      	bne.n	8002c04 <HAL_DAC_Start_DMA+0x10c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002bee:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6898      	ldr	r0, [r3, #8]
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	f000 f9ef 	bl	8002fdc <HAL_DMA_Start_IT>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	75fb      	strb	r3, [r7, #23]
 8002c02:	e010      	b.n	8002c26 <HAL_DAC_Start_DMA+0x12e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002c12:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	68d8      	ldr	r0, [r3, #12]
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	f000 f9dd 	bl	8002fdc <HAL_DMA_Start_IT>
 8002c22:	4603      	mov	r3, r0
 8002c24:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002c2c:	7dfb      	ldrb	r3, [r7, #23]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10c      	bne.n	8002c4c <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6819      	ldr	r1, [r3, #0]
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	f003 0310 	and.w	r3, r3, #16
 8002c3e:	2201      	movs	r2, #1
 8002c40:	409a      	lsls	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	430a      	orrs	r2, r1
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	e005      	b.n	8002c58 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	f043 0204 	orr.w	r2, r3, #4
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002c58:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	08002d6b 	.word	0x08002d6b
 8002c68:	08002d8d 	.word	0x08002d8d
 8002c6c:	08002da9 	.word	0x08002da9
 8002c70:	08002e13 	.word	0x08002e13
 8002c74:	08002e35 	.word	0x08002e35
 8002c78:	08002e51 	.word	0x08002e51

08002c7c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b089      	sub	sp, #36	@ 0x24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d002      	beq.n	8002cd4 <HAL_DAC_ConfigChannel+0x1c>
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e042      	b.n	8002d5e <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	795b      	ldrb	r3, [r3, #5]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d101      	bne.n	8002ce4 <HAL_DAC_ConfigChannel+0x2c>
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	e03c      	b.n	8002d5e <HAL_DAC_ConfigChannel+0xa6>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2202      	movs	r2, #2
 8002cee:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f003 0310 	and.w	r3, r3, #16
 8002cfe:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002d06:	43db      	mvns	r3, r3
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f003 0310 	and.w	r3, r3, #16
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6819      	ldr	r1, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f003 0310 	and.w	r3, r3, #16
 8002d40:	22c0      	movs	r2, #192	@ 0xc0
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	43da      	mvns	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	400a      	ands	r2, r1
 8002d4e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2201      	movs	r2, #1
 8002d54:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002d5c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3724      	adds	r7, #36	@ 0x24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b084      	sub	sp, #16
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d76:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f7ff ff7f 	bl	8002c7c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2201      	movs	r2, #1
 8002d82:	711a      	strb	r2, [r3, #4]
}
 8002d84:	bf00      	nop
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d98:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f7ff ff78 	bl	8002c90 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002da0:	bf00      	nop
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db4:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	f043 0204 	orr.w	r2, r3, #4
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f7ff ff6e 	bl	8002ca4 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	711a      	strb	r2, [r3, #4]
}
 8002dce:	bf00      	nop
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b083      	sub	sp, #12
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002df2:	bf00      	nop
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b084      	sub	sp, #16
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e1e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f7ff ffd8 	bl	8002dd6 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	711a      	strb	r2, [r3, #4]
}
 8002e2c:	bf00      	nop
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e40:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f7ff ffd1 	bl	8002dea <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002e48:	bf00      	nop
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e5c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	f043 0204 	orr.w	r2, r3, #4
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f7ff ffc7 	bl	8002dfe <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2201      	movs	r2, #1
 8002e74:	711a      	strb	r2, [r3, #4]
}
 8002e76:	bf00      	nop
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e8c:	f7ff f8b8 	bl	8002000 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e099      	b.n	8002fd0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0201 	bic.w	r2, r2, #1
 8002eba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ebc:	e00f      	b.n	8002ede <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ebe:	f7ff f89f 	bl	8002000 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b05      	cmp	r3, #5
 8002eca:	d908      	bls.n	8002ede <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2203      	movs	r2, #3
 8002ed6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e078      	b.n	8002fd0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1e8      	bne.n	8002ebe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	4b38      	ldr	r3, [pc, #224]	@ (8002fd8 <HAL_DMA_Init+0x158>)
 8002ef8:	4013      	ands	r3, r2
 8002efa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f34:	2b04      	cmp	r3, #4
 8002f36:	d107      	bne.n	8002f48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f40:	4313      	orrs	r3, r2
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	f023 0307 	bic.w	r3, r3, #7
 8002f5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d117      	bne.n	8002fa2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00e      	beq.n	8002fa2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 fb01 	bl	800358c <DMA_CheckFifoParam>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d008      	beq.n	8002fa2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2240      	movs	r2, #64	@ 0x40
 8002f94:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e016      	b.n	8002fd0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 fab8 	bl	8003520 <DMA_CalcBaseAndBitshift>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb8:	223f      	movs	r2, #63	@ 0x3f
 8002fba:	409a      	lsls	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3718      	adds	r7, #24
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	f010803f 	.word	0xf010803f

08002fdc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
 8002fe8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fea:	2300      	movs	r3, #0
 8002fec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d101      	bne.n	8003002 <HAL_DMA_Start_IT+0x26>
 8002ffe:	2302      	movs	r3, #2
 8003000:	e040      	b.n	8003084 <HAL_DMA_Start_IT+0xa8>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b01      	cmp	r3, #1
 8003014:	d12f      	bne.n	8003076 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2202      	movs	r2, #2
 800301a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	68b9      	ldr	r1, [r7, #8]
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 fa4a 	bl	80034c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003034:	223f      	movs	r2, #63	@ 0x3f
 8003036:	409a      	lsls	r2, r3
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f042 0216 	orr.w	r2, r2, #22
 800304a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003050:	2b00      	cmp	r3, #0
 8003052:	d007      	beq.n	8003064 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f042 0208 	orr.w	r2, r2, #8
 8003062:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f042 0201 	orr.w	r2, r2, #1
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	e005      	b.n	8003082 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800307e:	2302      	movs	r3, #2
 8003080:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003082:	7dfb      	ldrb	r3, [r7, #23]
}
 8003084:	4618      	mov	r0, r3
 8003086:	3718      	adds	r7, #24
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003098:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800309a:	f7fe ffb1 	bl	8002000 <HAL_GetTick>
 800309e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d008      	beq.n	80030be <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2280      	movs	r2, #128	@ 0x80
 80030b0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e052      	b.n	8003164 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0216 	bic.w	r2, r2, #22
 80030cc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	695a      	ldr	r2, [r3, #20]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030dc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d103      	bne.n	80030ee <HAL_DMA_Abort+0x62>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d007      	beq.n	80030fe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 0208 	bic.w	r2, r2, #8
 80030fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 0201 	bic.w	r2, r2, #1
 800310c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800310e:	e013      	b.n	8003138 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003110:	f7fe ff76 	bl	8002000 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b05      	cmp	r3, #5
 800311c:	d90c      	bls.n	8003138 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2220      	movs	r2, #32
 8003122:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2203      	movs	r2, #3
 8003128:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e015      	b.n	8003164 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1e4      	bne.n	8003110 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800314a:	223f      	movs	r2, #63	@ 0x3f
 800314c:	409a      	lsls	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d004      	beq.n	800318a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2280      	movs	r2, #128	@ 0x80
 8003184:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e00c      	b.n	80031a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2205      	movs	r2, #5
 800318e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 0201 	bic.w	r2, r2, #1
 80031a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80031b8:	2300      	movs	r3, #0
 80031ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80031bc:	4b8e      	ldr	r3, [pc, #568]	@ (80033f8 <HAL_DMA_IRQHandler+0x248>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a8e      	ldr	r2, [pc, #568]	@ (80033fc <HAL_DMA_IRQHandler+0x24c>)
 80031c2:	fba2 2303 	umull	r2, r3, r2, r3
 80031c6:	0a9b      	lsrs	r3, r3, #10
 80031c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031da:	2208      	movs	r2, #8
 80031dc:	409a      	lsls	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	4013      	ands	r3, r2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d01a      	beq.n	800321c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d013      	beq.n	800321c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0204 	bic.w	r2, r2, #4
 8003202:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003208:	2208      	movs	r2, #8
 800320a:	409a      	lsls	r2, r3
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003214:	f043 0201 	orr.w	r2, r3, #1
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003220:	2201      	movs	r2, #1
 8003222:	409a      	lsls	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	4013      	ands	r3, r2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d012      	beq.n	8003252 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00b      	beq.n	8003252 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800323e:	2201      	movs	r2, #1
 8003240:	409a      	lsls	r2, r3
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800324a:	f043 0202 	orr.w	r2, r3, #2
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003256:	2204      	movs	r2, #4
 8003258:	409a      	lsls	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	4013      	ands	r3, r2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d012      	beq.n	8003288 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00b      	beq.n	8003288 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003274:	2204      	movs	r2, #4
 8003276:	409a      	lsls	r2, r3
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003280:	f043 0204 	orr.w	r2, r3, #4
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800328c:	2210      	movs	r2, #16
 800328e:	409a      	lsls	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4013      	ands	r3, r2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d043      	beq.n	8003320 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0308 	and.w	r3, r3, #8
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d03c      	beq.n	8003320 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032aa:	2210      	movs	r2, #16
 80032ac:	409a      	lsls	r2, r3
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d018      	beq.n	80032f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d108      	bne.n	80032e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d024      	beq.n	8003320 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	4798      	blx	r3
 80032de:	e01f      	b.n	8003320 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d01b      	beq.n	8003320 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	4798      	blx	r3
 80032f0:	e016      	b.n	8003320 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d107      	bne.n	8003310 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 0208 	bic.w	r2, r2, #8
 800330e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003314:	2b00      	cmp	r3, #0
 8003316:	d003      	beq.n	8003320 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003324:	2220      	movs	r2, #32
 8003326:	409a      	lsls	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4013      	ands	r3, r2
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 808f 	beq.w	8003450 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0310 	and.w	r3, r3, #16
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 8087 	beq.w	8003450 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003346:	2220      	movs	r2, #32
 8003348:	409a      	lsls	r2, r3
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b05      	cmp	r3, #5
 8003358:	d136      	bne.n	80033c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 0216 	bic.w	r2, r2, #22
 8003368:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	695a      	ldr	r2, [r3, #20]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003378:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337e:	2b00      	cmp	r3, #0
 8003380:	d103      	bne.n	800338a <HAL_DMA_IRQHandler+0x1da>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003386:	2b00      	cmp	r3, #0
 8003388:	d007      	beq.n	800339a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 0208 	bic.w	r2, r2, #8
 8003398:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800339e:	223f      	movs	r2, #63	@ 0x3f
 80033a0:	409a      	lsls	r2, r3
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d07e      	beq.n	80034bc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	4798      	blx	r3
        }
        return;
 80033c6:	e079      	b.n	80034bc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d01d      	beq.n	8003412 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10d      	bne.n	8003400 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d031      	beq.n	8003450 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	4798      	blx	r3
 80033f4:	e02c      	b.n	8003450 <HAL_DMA_IRQHandler+0x2a0>
 80033f6:	bf00      	nop
 80033f8:	20000000 	.word	0x20000000
 80033fc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003404:	2b00      	cmp	r3, #0
 8003406:	d023      	beq.n	8003450 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	4798      	blx	r3
 8003410:	e01e      	b.n	8003450 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10f      	bne.n	8003440 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0210 	bic.w	r2, r2, #16
 800342e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003444:	2b00      	cmp	r3, #0
 8003446:	d003      	beq.n	8003450 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003454:	2b00      	cmp	r3, #0
 8003456:	d032      	beq.n	80034be <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b00      	cmp	r3, #0
 8003462:	d022      	beq.n	80034aa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2205      	movs	r2, #5
 8003468:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0201 	bic.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	3301      	adds	r3, #1
 8003480:	60bb      	str	r3, [r7, #8]
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	429a      	cmp	r2, r3
 8003486:	d307      	bcc.n	8003498 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1f2      	bne.n	800347c <HAL_DMA_IRQHandler+0x2cc>
 8003496:	e000      	b.n	800349a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003498:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d005      	beq.n	80034be <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	4798      	blx	r3
 80034ba:	e000      	b.n	80034be <HAL_DMA_IRQHandler+0x30e>
        return;
 80034bc:	bf00      	nop
    }
  }
}
 80034be:	3718      	adds	r7, #24
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
 80034d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80034e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	2b40      	cmp	r3, #64	@ 0x40
 80034f0:	d108      	bne.n	8003504 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003502:	e007      	b.n	8003514 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	60da      	str	r2, [r3, #12]
}
 8003514:	bf00      	nop
 8003516:	3714      	adds	r7, #20
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	b2db      	uxtb	r3, r3
 800352e:	3b10      	subs	r3, #16
 8003530:	4a14      	ldr	r2, [pc, #80]	@ (8003584 <DMA_CalcBaseAndBitshift+0x64>)
 8003532:	fba2 2303 	umull	r2, r3, r2, r3
 8003536:	091b      	lsrs	r3, r3, #4
 8003538:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800353a:	4a13      	ldr	r2, [pc, #76]	@ (8003588 <DMA_CalcBaseAndBitshift+0x68>)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4413      	add	r3, r2
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	461a      	mov	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2b03      	cmp	r3, #3
 800354c:	d909      	bls.n	8003562 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003556:	f023 0303 	bic.w	r3, r3, #3
 800355a:	1d1a      	adds	r2, r3, #4
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003560:	e007      	b.n	8003572 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800356a:	f023 0303 	bic.w	r3, r3, #3
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003576:	4618      	mov	r0, r3
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	aaaaaaab 	.word	0xaaaaaaab
 8003588:	08007798 	.word	0x08007798

0800358c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003594:	2300      	movs	r3, #0
 8003596:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d11f      	bne.n	80035e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	2b03      	cmp	r3, #3
 80035aa:	d856      	bhi.n	800365a <DMA_CheckFifoParam+0xce>
 80035ac:	a201      	add	r2, pc, #4	@ (adr r2, 80035b4 <DMA_CheckFifoParam+0x28>)
 80035ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b2:	bf00      	nop
 80035b4:	080035c5 	.word	0x080035c5
 80035b8:	080035d7 	.word	0x080035d7
 80035bc:	080035c5 	.word	0x080035c5
 80035c0:	0800365b 	.word	0x0800365b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d046      	beq.n	800365e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035d4:	e043      	b.n	800365e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035da:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80035de:	d140      	bne.n	8003662 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035e4:	e03d      	b.n	8003662 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035ee:	d121      	bne.n	8003634 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	2b03      	cmp	r3, #3
 80035f4:	d837      	bhi.n	8003666 <DMA_CheckFifoParam+0xda>
 80035f6:	a201      	add	r2, pc, #4	@ (adr r2, 80035fc <DMA_CheckFifoParam+0x70>)
 80035f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fc:	0800360d 	.word	0x0800360d
 8003600:	08003613 	.word	0x08003613
 8003604:	0800360d 	.word	0x0800360d
 8003608:	08003625 	.word	0x08003625
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	73fb      	strb	r3, [r7, #15]
      break;
 8003610:	e030      	b.n	8003674 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003616:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d025      	beq.n	800366a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003622:	e022      	b.n	800366a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003628:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800362c:	d11f      	bne.n	800366e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003632:	e01c      	b.n	800366e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	2b02      	cmp	r3, #2
 8003638:	d903      	bls.n	8003642 <DMA_CheckFifoParam+0xb6>
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	2b03      	cmp	r3, #3
 800363e:	d003      	beq.n	8003648 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003640:	e018      	b.n	8003674 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	73fb      	strb	r3, [r7, #15]
      break;
 8003646:	e015      	b.n	8003674 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800364c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00e      	beq.n	8003672 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	73fb      	strb	r3, [r7, #15]
      break;
 8003658:	e00b      	b.n	8003672 <DMA_CheckFifoParam+0xe6>
      break;
 800365a:	bf00      	nop
 800365c:	e00a      	b.n	8003674 <DMA_CheckFifoParam+0xe8>
      break;
 800365e:	bf00      	nop
 8003660:	e008      	b.n	8003674 <DMA_CheckFifoParam+0xe8>
      break;
 8003662:	bf00      	nop
 8003664:	e006      	b.n	8003674 <DMA_CheckFifoParam+0xe8>
      break;
 8003666:	bf00      	nop
 8003668:	e004      	b.n	8003674 <DMA_CheckFifoParam+0xe8>
      break;
 800366a:	bf00      	nop
 800366c:	e002      	b.n	8003674 <DMA_CheckFifoParam+0xe8>
      break;   
 800366e:	bf00      	nop
 8003670:	e000      	b.n	8003674 <DMA_CheckFifoParam+0xe8>
      break;
 8003672:	bf00      	nop
    }
  } 
  
  return status; 
 8003674:	7bfb      	ldrb	r3, [r7, #15]
}
 8003676:	4618      	mov	r0, r3
 8003678:	3714      	adds	r7, #20
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop

08003684 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003684:	b480      	push	{r7}
 8003686:	b089      	sub	sp, #36	@ 0x24
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800368e:	2300      	movs	r3, #0
 8003690:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003692:	2300      	movs	r3, #0
 8003694:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003696:	2300      	movs	r3, #0
 8003698:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800369a:	2300      	movs	r3, #0
 800369c:	61fb      	str	r3, [r7, #28]
 800369e:	e165      	b.n	800396c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036a0:	2201      	movs	r2, #1
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	4013      	ands	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	f040 8154 	bne.w	8003966 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f003 0303 	and.w	r3, r3, #3
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d005      	beq.n	80036d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d130      	bne.n	8003738 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	2203      	movs	r2, #3
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	43db      	mvns	r3, r3
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	4013      	ands	r3, r2
 80036ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	68da      	ldr	r2, [r3, #12]
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	fa02 f303 	lsl.w	r3, r2, r3
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800370c:	2201      	movs	r2, #1
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	43db      	mvns	r3, r3
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	4013      	ands	r3, r2
 800371a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	091b      	lsrs	r3, r3, #4
 8003722:	f003 0201 	and.w	r2, r3, #1
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	fa02 f303 	lsl.w	r3, r2, r3
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	4313      	orrs	r3, r2
 8003730:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f003 0303 	and.w	r3, r3, #3
 8003740:	2b03      	cmp	r3, #3
 8003742:	d017      	beq.n	8003774 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	2203      	movs	r2, #3
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	43db      	mvns	r3, r3
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4013      	ands	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	4313      	orrs	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f003 0303 	and.w	r3, r3, #3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d123      	bne.n	80037c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	08da      	lsrs	r2, r3, #3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	3208      	adds	r2, #8
 8003788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800378c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	f003 0307 	and.w	r3, r3, #7
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	220f      	movs	r2, #15
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	43db      	mvns	r3, r3
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	4013      	ands	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	691a      	ldr	r2, [r3, #16]
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	08da      	lsrs	r2, r3, #3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	3208      	adds	r2, #8
 80037c2:	69b9      	ldr	r1, [r7, #24]
 80037c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	2203      	movs	r2, #3
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	43db      	mvns	r3, r3
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	4013      	ands	r3, r2
 80037de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f003 0203 	and.w	r2, r3, #3
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 80ae 	beq.w	8003966 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800380a:	2300      	movs	r3, #0
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	4b5d      	ldr	r3, [pc, #372]	@ (8003984 <HAL_GPIO_Init+0x300>)
 8003810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003812:	4a5c      	ldr	r2, [pc, #368]	@ (8003984 <HAL_GPIO_Init+0x300>)
 8003814:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003818:	6453      	str	r3, [r2, #68]	@ 0x44
 800381a:	4b5a      	ldr	r3, [pc, #360]	@ (8003984 <HAL_GPIO_Init+0x300>)
 800381c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800381e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003826:	4a58      	ldr	r2, [pc, #352]	@ (8003988 <HAL_GPIO_Init+0x304>)
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	089b      	lsrs	r3, r3, #2
 800382c:	3302      	adds	r3, #2
 800382e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003832:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	f003 0303 	and.w	r3, r3, #3
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	220f      	movs	r2, #15
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	43db      	mvns	r3, r3
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	4013      	ands	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a4f      	ldr	r2, [pc, #316]	@ (800398c <HAL_GPIO_Init+0x308>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d025      	beq.n	800389e <HAL_GPIO_Init+0x21a>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a4e      	ldr	r2, [pc, #312]	@ (8003990 <HAL_GPIO_Init+0x30c>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d01f      	beq.n	800389a <HAL_GPIO_Init+0x216>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a4d      	ldr	r2, [pc, #308]	@ (8003994 <HAL_GPIO_Init+0x310>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d019      	beq.n	8003896 <HAL_GPIO_Init+0x212>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a4c      	ldr	r2, [pc, #304]	@ (8003998 <HAL_GPIO_Init+0x314>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d013      	beq.n	8003892 <HAL_GPIO_Init+0x20e>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a4b      	ldr	r2, [pc, #300]	@ (800399c <HAL_GPIO_Init+0x318>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d00d      	beq.n	800388e <HAL_GPIO_Init+0x20a>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a4a      	ldr	r2, [pc, #296]	@ (80039a0 <HAL_GPIO_Init+0x31c>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d007      	beq.n	800388a <HAL_GPIO_Init+0x206>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a49      	ldr	r2, [pc, #292]	@ (80039a4 <HAL_GPIO_Init+0x320>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d101      	bne.n	8003886 <HAL_GPIO_Init+0x202>
 8003882:	2306      	movs	r3, #6
 8003884:	e00c      	b.n	80038a0 <HAL_GPIO_Init+0x21c>
 8003886:	2307      	movs	r3, #7
 8003888:	e00a      	b.n	80038a0 <HAL_GPIO_Init+0x21c>
 800388a:	2305      	movs	r3, #5
 800388c:	e008      	b.n	80038a0 <HAL_GPIO_Init+0x21c>
 800388e:	2304      	movs	r3, #4
 8003890:	e006      	b.n	80038a0 <HAL_GPIO_Init+0x21c>
 8003892:	2303      	movs	r3, #3
 8003894:	e004      	b.n	80038a0 <HAL_GPIO_Init+0x21c>
 8003896:	2302      	movs	r3, #2
 8003898:	e002      	b.n	80038a0 <HAL_GPIO_Init+0x21c>
 800389a:	2301      	movs	r3, #1
 800389c:	e000      	b.n	80038a0 <HAL_GPIO_Init+0x21c>
 800389e:	2300      	movs	r3, #0
 80038a0:	69fa      	ldr	r2, [r7, #28]
 80038a2:	f002 0203 	and.w	r2, r2, #3
 80038a6:	0092      	lsls	r2, r2, #2
 80038a8:	4093      	lsls	r3, r2
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038b0:	4935      	ldr	r1, [pc, #212]	@ (8003988 <HAL_GPIO_Init+0x304>)
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	089b      	lsrs	r3, r3, #2
 80038b6:	3302      	adds	r3, #2
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038be:	4b3a      	ldr	r3, [pc, #232]	@ (80039a8 <HAL_GPIO_Init+0x324>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	43db      	mvns	r3, r3
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	4013      	ands	r3, r2
 80038cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	4313      	orrs	r3, r2
 80038e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038e2:	4a31      	ldr	r2, [pc, #196]	@ (80039a8 <HAL_GPIO_Init+0x324>)
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038e8:	4b2f      	ldr	r3, [pc, #188]	@ (80039a8 <HAL_GPIO_Init+0x324>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	43db      	mvns	r3, r3
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	4013      	ands	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d003      	beq.n	800390c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	4313      	orrs	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800390c:	4a26      	ldr	r2, [pc, #152]	@ (80039a8 <HAL_GPIO_Init+0x324>)
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003912:	4b25      	ldr	r3, [pc, #148]	@ (80039a8 <HAL_GPIO_Init+0x324>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	43db      	mvns	r3, r3
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	4013      	ands	r3, r2
 8003920:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	4313      	orrs	r3, r2
 8003934:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003936:	4a1c      	ldr	r2, [pc, #112]	@ (80039a8 <HAL_GPIO_Init+0x324>)
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800393c:	4b1a      	ldr	r3, [pc, #104]	@ (80039a8 <HAL_GPIO_Init+0x324>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	43db      	mvns	r3, r3
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	4013      	ands	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	4313      	orrs	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003960:	4a11      	ldr	r2, [pc, #68]	@ (80039a8 <HAL_GPIO_Init+0x324>)
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	3301      	adds	r3, #1
 800396a:	61fb      	str	r3, [r7, #28]
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	2b0f      	cmp	r3, #15
 8003970:	f67f ae96 	bls.w	80036a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003974:	bf00      	nop
 8003976:	bf00      	nop
 8003978:	3724      	adds	r7, #36	@ 0x24
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	40023800 	.word	0x40023800
 8003988:	40013800 	.word	0x40013800
 800398c:	40020000 	.word	0x40020000
 8003990:	40020400 	.word	0x40020400
 8003994:	40020800 	.word	0x40020800
 8003998:	40020c00 	.word	0x40020c00
 800399c:	40021000 	.word	0x40021000
 80039a0:	40021400 	.word	0x40021400
 80039a4:	40021800 	.word	0x40021800
 80039a8:	40013c00 	.word	0x40013c00

080039ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	460b      	mov	r3, r1
 80039b6:	807b      	strh	r3, [r7, #2]
 80039b8:	4613      	mov	r3, r2
 80039ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039bc:	787b      	ldrb	r3, [r7, #1]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d003      	beq.n	80039ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039c2:	887a      	ldrh	r2, [r7, #2]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039c8:	e003      	b.n	80039d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039ca:	887b      	ldrh	r3, [r7, #2]
 80039cc:	041a      	lsls	r2, r3, #16
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	619a      	str	r2, [r3, #24]
}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
	...

080039e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	4603      	mov	r3, r0
 80039e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80039ea:	4b08      	ldr	r3, [pc, #32]	@ (8003a0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039ec:	695a      	ldr	r2, [r3, #20]
 80039ee:	88fb      	ldrh	r3, [r7, #6]
 80039f0:	4013      	ands	r3, r2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d006      	beq.n	8003a04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80039f6:	4a05      	ldr	r2, [pc, #20]	@ (8003a0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039f8:	88fb      	ldrh	r3, [r7, #6]
 80039fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80039fc:	88fb      	ldrh	r3, [r7, #6]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 f806 	bl	8003a10 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a04:	bf00      	nop
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	40013c00 	.word	0x40013c00

08003a10 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	4603      	mov	r3, r0
 8003a18:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003a1a:	bf00      	nop
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr

08003a26 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b086      	sub	sp, #24
 8003a2a:	af02      	add	r7, sp, #8
 8003a2c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e108      	b.n	8003c4a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d106      	bne.n	8003a58 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7fe f962 	bl	8001d1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2203      	movs	r2, #3
 8003a5c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a66:	d102      	bne.n	8003a6e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f002 fbe4 	bl	8006240 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6818      	ldr	r0, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	7c1a      	ldrb	r2, [r3, #16]
 8003a80:	f88d 2000 	strb.w	r2, [sp]
 8003a84:	3304      	adds	r3, #4
 8003a86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a88:	f002 fb76 	bl	8006178 <USB_CoreInit>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d005      	beq.n	8003a9e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2202      	movs	r2, #2
 8003a96:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e0d5      	b.n	8003c4a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f002 fbdc 	bl	8006262 <USB_SetCurrentMode>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d005      	beq.n	8003abc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e0c6      	b.n	8003c4a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003abc:	2300      	movs	r3, #0
 8003abe:	73fb      	strb	r3, [r7, #15]
 8003ac0:	e04a      	b.n	8003b58 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ac2:	7bfa      	ldrb	r2, [r7, #15]
 8003ac4:	6879      	ldr	r1, [r7, #4]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	4413      	add	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	440b      	add	r3, r1
 8003ad0:	3315      	adds	r3, #21
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ad6:	7bfa      	ldrb	r2, [r7, #15]
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	4613      	mov	r3, r2
 8003adc:	00db      	lsls	r3, r3, #3
 8003ade:	4413      	add	r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	440b      	add	r3, r1
 8003ae4:	3314      	adds	r3, #20
 8003ae6:	7bfa      	ldrb	r2, [r7, #15]
 8003ae8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003aea:	7bfa      	ldrb	r2, [r7, #15]
 8003aec:	7bfb      	ldrb	r3, [r7, #15]
 8003aee:	b298      	uxth	r0, r3
 8003af0:	6879      	ldr	r1, [r7, #4]
 8003af2:	4613      	mov	r3, r2
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	4413      	add	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	440b      	add	r3, r1
 8003afc:	332e      	adds	r3, #46	@ 0x2e
 8003afe:	4602      	mov	r2, r0
 8003b00:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b02:	7bfa      	ldrb	r2, [r7, #15]
 8003b04:	6879      	ldr	r1, [r7, #4]
 8003b06:	4613      	mov	r3, r2
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	4413      	add	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	440b      	add	r3, r1
 8003b10:	3318      	adds	r3, #24
 8003b12:	2200      	movs	r2, #0
 8003b14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b16:	7bfa      	ldrb	r2, [r7, #15]
 8003b18:	6879      	ldr	r1, [r7, #4]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	4413      	add	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	440b      	add	r3, r1
 8003b24:	331c      	adds	r3, #28
 8003b26:	2200      	movs	r2, #0
 8003b28:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b2a:	7bfa      	ldrb	r2, [r7, #15]
 8003b2c:	6879      	ldr	r1, [r7, #4]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	4413      	add	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	440b      	add	r3, r1
 8003b38:	3320      	adds	r3, #32
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b3e:	7bfa      	ldrb	r2, [r7, #15]
 8003b40:	6879      	ldr	r1, [r7, #4]
 8003b42:	4613      	mov	r3, r2
 8003b44:	00db      	lsls	r3, r3, #3
 8003b46:	4413      	add	r3, r2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	440b      	add	r3, r1
 8003b4c:	3324      	adds	r3, #36	@ 0x24
 8003b4e:	2200      	movs	r2, #0
 8003b50:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b52:	7bfb      	ldrb	r3, [r7, #15]
 8003b54:	3301      	adds	r3, #1
 8003b56:	73fb      	strb	r3, [r7, #15]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	791b      	ldrb	r3, [r3, #4]
 8003b5c:	7bfa      	ldrb	r2, [r7, #15]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d3af      	bcc.n	8003ac2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b62:	2300      	movs	r3, #0
 8003b64:	73fb      	strb	r3, [r7, #15]
 8003b66:	e044      	b.n	8003bf2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b68:	7bfa      	ldrb	r2, [r7, #15]
 8003b6a:	6879      	ldr	r1, [r7, #4]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	4413      	add	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	440b      	add	r3, r1
 8003b76:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b7e:	7bfa      	ldrb	r2, [r7, #15]
 8003b80:	6879      	ldr	r1, [r7, #4]
 8003b82:	4613      	mov	r3, r2
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	4413      	add	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	440b      	add	r3, r1
 8003b8c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003b90:	7bfa      	ldrb	r2, [r7, #15]
 8003b92:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b94:	7bfa      	ldrb	r2, [r7, #15]
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	4413      	add	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003baa:	7bfa      	ldrb	r2, [r7, #15]
 8003bac:	6879      	ldr	r1, [r7, #4]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	00db      	lsls	r3, r3, #3
 8003bb2:	4413      	add	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	440b      	add	r3, r1
 8003bb8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003bc0:	7bfa      	ldrb	r2, [r7, #15]
 8003bc2:	6879      	ldr	r1, [r7, #4]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	4413      	add	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003bd6:	7bfa      	ldrb	r2, [r7, #15]
 8003bd8:	6879      	ldr	r1, [r7, #4]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	00db      	lsls	r3, r3, #3
 8003bde:	4413      	add	r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	440b      	add	r3, r1
 8003be4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bec:	7bfb      	ldrb	r3, [r7, #15]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	73fb      	strb	r3, [r7, #15]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	791b      	ldrb	r3, [r3, #4]
 8003bf6:	7bfa      	ldrb	r2, [r7, #15]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d3b5      	bcc.n	8003b68 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6818      	ldr	r0, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	7c1a      	ldrb	r2, [r3, #16]
 8003c04:	f88d 2000 	strb.w	r2, [sp]
 8003c08:	3304      	adds	r3, #4
 8003c0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c0c:	f002 fb76 	bl	80062fc <USB_DevInit>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d005      	beq.n	8003c22 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2202      	movs	r2, #2
 8003c1a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e013      	b.n	8003c4a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	7b1b      	ldrb	r3, [r3, #12]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d102      	bne.n	8003c3e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 f80a 	bl	8003c52 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f002 fd31 	bl	80066aa <USB_DevDisconnect>

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b085      	sub	sp, #20
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c84:	f043 0303 	orr.w	r3, r3, #3
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
	...

08003c9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d101      	bne.n	8003cb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e0cc      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cb0:	4b68      	ldr	r3, [pc, #416]	@ (8003e54 <HAL_RCC_ClockConfig+0x1b8>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 030f 	and.w	r3, r3, #15
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d90c      	bls.n	8003cd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cbe:	4b65      	ldr	r3, [pc, #404]	@ (8003e54 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc6:	4b63      	ldr	r3, [pc, #396]	@ (8003e54 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 030f 	and.w	r3, r3, #15
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d001      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e0b8      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d020      	beq.n	8003d26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d005      	beq.n	8003cfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cf0:	4b59      	ldr	r3, [pc, #356]	@ (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	4a58      	ldr	r2, [pc, #352]	@ (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003cfa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0308 	and.w	r3, r3, #8
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d005      	beq.n	8003d14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d08:	4b53      	ldr	r3, [pc, #332]	@ (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	4a52      	ldr	r2, [pc, #328]	@ (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d14:	4b50      	ldr	r3, [pc, #320]	@ (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	494d      	ldr	r1, [pc, #308]	@ (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d044      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d107      	bne.n	8003d4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d3a:	4b47      	ldr	r3, [pc, #284]	@ (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d119      	bne.n	8003d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e07f      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d003      	beq.n	8003d5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d56:	2b03      	cmp	r3, #3
 8003d58:	d107      	bne.n	8003d6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d5a:	4b3f      	ldr	r3, [pc, #252]	@ (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d109      	bne.n	8003d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e06f      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d6a:	4b3b      	ldr	r3, [pc, #236]	@ (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e067      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d7a:	4b37      	ldr	r3, [pc, #220]	@ (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f023 0203 	bic.w	r2, r3, #3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	4934      	ldr	r1, [pc, #208]	@ (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d8c:	f7fe f938 	bl	8002000 <HAL_GetTick>
 8003d90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d92:	e00a      	b.n	8003daa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d94:	f7fe f934 	bl	8002000 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e04f      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003daa:	4b2b      	ldr	r3, [pc, #172]	@ (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 020c 	and.w	r2, r3, #12
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d1eb      	bne.n	8003d94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dbc:	4b25      	ldr	r3, [pc, #148]	@ (8003e54 <HAL_RCC_ClockConfig+0x1b8>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 030f 	and.w	r3, r3, #15
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d20c      	bcs.n	8003de4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dca:	4b22      	ldr	r3, [pc, #136]	@ (8003e54 <HAL_RCC_ClockConfig+0x1b8>)
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd2:	4b20      	ldr	r3, [pc, #128]	@ (8003e54 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 030f 	and.w	r3, r3, #15
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d001      	beq.n	8003de4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e032      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d008      	beq.n	8003e02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003df0:	4b19      	ldr	r3, [pc, #100]	@ (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	4916      	ldr	r1, [pc, #88]	@ (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0308 	and.w	r3, r3, #8
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d009      	beq.n	8003e22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e0e:	4b12      	ldr	r3, [pc, #72]	@ (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	490e      	ldr	r1, [pc, #56]	@ (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e22:	f000 fb7f 	bl	8004524 <HAL_RCC_GetSysClockFreq>
 8003e26:	4602      	mov	r2, r0
 8003e28:	4b0b      	ldr	r3, [pc, #44]	@ (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	091b      	lsrs	r3, r3, #4
 8003e2e:	f003 030f 	and.w	r3, r3, #15
 8003e32:	490a      	ldr	r1, [pc, #40]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c0>)
 8003e34:	5ccb      	ldrb	r3, [r1, r3]
 8003e36:	fa22 f303 	lsr.w	r3, r2, r3
 8003e3a:	4a09      	ldr	r2, [pc, #36]	@ (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003e3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e3e:	4b09      	ldr	r3, [pc, #36]	@ (8003e64 <HAL_RCC_ClockConfig+0x1c8>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fe f898 	bl	8001f78 <HAL_InitTick>

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	40023c00 	.word	0x40023c00
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	08007780 	.word	0x08007780
 8003e60:	20000000 	.word	0x20000000
 8003e64:	20000004 	.word	0x20000004

08003e68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e6c:	4b03      	ldr	r3, [pc, #12]	@ (8003e7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	20000000 	.word	0x20000000

08003e80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e84:	f7ff fff0 	bl	8003e68 <HAL_RCC_GetHCLKFreq>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	4b05      	ldr	r3, [pc, #20]	@ (8003ea0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	0a9b      	lsrs	r3, r3, #10
 8003e90:	f003 0307 	and.w	r3, r3, #7
 8003e94:	4903      	ldr	r1, [pc, #12]	@ (8003ea4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e96:	5ccb      	ldrb	r3, [r1, r3]
 8003e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	40023800 	.word	0x40023800
 8003ea4:	08007790 	.word	0x08007790

08003ea8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003eac:	f7ff ffdc 	bl	8003e68 <HAL_RCC_GetHCLKFreq>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	4b05      	ldr	r3, [pc, #20]	@ (8003ec8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	0b5b      	lsrs	r3, r3, #13
 8003eb8:	f003 0307 	and.w	r3, r3, #7
 8003ebc:	4903      	ldr	r1, [pc, #12]	@ (8003ecc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ebe:	5ccb      	ldrb	r3, [r1, r3]
 8003ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40023800 	.word	0x40023800
 8003ecc:	08007790 	.word	0x08007790

08003ed0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b08c      	sub	sp, #48	@ 0x30
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8003edc:	2300      	movs	r3, #0
 8003ede:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003eec:	2300      	movs	r3, #0
 8003eee:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d010      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003f08:	4b6f      	ldr	r3, [pc, #444]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f0e:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f16:	496c      	ldr	r1, [pc, #432]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003f26:	2301      	movs	r3, #1
 8003f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d010      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003f36:	4b64      	ldr	r3, [pc, #400]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f3c:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f44:	4960      	ldr	r1, [pc, #384]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003f54:	2301      	movs	r3, #1
 8003f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d017      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f64:	4b58      	ldr	r3, [pc, #352]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f72:	4955      	ldr	r1, [pc, #340]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f82:	d101      	bne.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003f84:	2301      	movs	r3, #1
 8003f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003f90:	2301      	movs	r3, #1
 8003f92:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0308 	and.w	r3, r3, #8
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d017      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003fa0:	4b49      	ldr	r3, [pc, #292]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fa6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fae:	4946      	ldr	r1, [pc, #280]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fbe:	d101      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0320 	and.w	r3, r3, #32
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f000 808a 	beq.w	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60bb      	str	r3, [r7, #8]
 8003fe2:	4b39      	ldr	r3, [pc, #228]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe6:	4a38      	ldr	r2, [pc, #224]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fe8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fec:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fee:	4b36      	ldr	r3, [pc, #216]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ff6:	60bb      	str	r3, [r7, #8]
 8003ff8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003ffa:	4b34      	ldr	r3, [pc, #208]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a33      	ldr	r2, [pc, #204]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004000:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004004:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004006:	f7fd fffb 	bl	8002000 <HAL_GetTick>
 800400a:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800400c:	e008      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800400e:	f7fd fff7 	bl	8002000 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b02      	cmp	r3, #2
 800401a:	d901      	bls.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e278      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004020:	4b2a      	ldr	r3, [pc, #168]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004028:	2b00      	cmp	r3, #0
 800402a:	d0f0      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800402c:	4b26      	ldr	r3, [pc, #152]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800402e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004030:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004034:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004036:	6a3b      	ldr	r3, [r7, #32]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d02f      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004040:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004044:	6a3a      	ldr	r2, [r7, #32]
 8004046:	429a      	cmp	r2, r3
 8004048:	d028      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800404a:	4b1f      	ldr	r3, [pc, #124]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800404c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800404e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004052:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004054:	4b1e      	ldr	r3, [pc, #120]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004056:	2201      	movs	r2, #1
 8004058:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800405a:	4b1d      	ldr	r3, [pc, #116]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800405c:	2200      	movs	r2, #0
 800405e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004060:	4a19      	ldr	r2, [pc, #100]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004062:	6a3b      	ldr	r3, [r7, #32]
 8004064:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004066:	4b18      	ldr	r3, [pc, #96]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b01      	cmp	r3, #1
 8004070:	d114      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004072:	f7fd ffc5 	bl	8002000 <HAL_GetTick>
 8004076:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004078:	e00a      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800407a:	f7fd ffc1 	bl	8002000 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004088:	4293      	cmp	r3, r2
 800408a:	d901      	bls.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e240      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004090:	4b0d      	ldr	r3, [pc, #52]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004092:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0ee      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040a8:	d114      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80040aa:	4b07      	ldr	r3, [pc, #28]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80040ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040be:	4902      	ldr	r1, [pc, #8]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	608b      	str	r3, [r1, #8]
 80040c4:	e00c      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80040c6:	bf00      	nop
 80040c8:	40023800 	.word	0x40023800
 80040cc:	40007000 	.word	0x40007000
 80040d0:	42470e40 	.word	0x42470e40
 80040d4:	4b4a      	ldr	r3, [pc, #296]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	4a49      	ldr	r2, [pc, #292]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80040da:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80040de:	6093      	str	r3, [r2, #8]
 80040e0:	4b47      	ldr	r3, [pc, #284]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80040e2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040ec:	4944      	ldr	r1, [pc, #272]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0310 	and.w	r3, r3, #16
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d004      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8004104:	4b3f      	ldr	r3, [pc, #252]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004106:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00a      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004114:	4b3a      	ldr	r3, [pc, #232]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004116:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800411a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004122:	4937      	ldr	r1, [pc, #220]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004124:	4313      	orrs	r3, r2
 8004126:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00a      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004136:	4b32      	ldr	r3, [pc, #200]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004138:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800413c:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004144:	492e      	ldr	r1, [pc, #184]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004146:	4313      	orrs	r3, r2
 8004148:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004154:	2b00      	cmp	r3, #0
 8004156:	d011      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004158:	4b29      	ldr	r3, [pc, #164]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800415a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800415e:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004166:	4926      	ldr	r1, [pc, #152]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004168:	4313      	orrs	r3, r2
 800416a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004172:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004176:	d101      	bne.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004178:	2301      	movs	r3, #1
 800417a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00a      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004188:	4b1d      	ldr	r3, [pc, #116]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800418a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800418e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004196:	491a      	ldr	r1, [pc, #104]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004198:	4313      	orrs	r3, r2
 800419a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d011      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80041aa:	4b15      	ldr	r3, [pc, #84]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041b0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041b8:	4911      	ldr	r1, [pc, #68]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041c8:	d101      	bne.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80041ca:	2301      	movs	r3, #1
 80041cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80041ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d005      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041dc:	f040 80ff 	bne.w	80043de <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80041e0:	4b09      	ldr	r3, [pc, #36]	@ (8004208 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041e6:	f7fd ff0b 	bl	8002000 <HAL_GetTick>
 80041ea:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041ec:	e00e      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80041ee:	f7fd ff07 	bl	8002000 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d907      	bls.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e188      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004200:	40023800 	.word	0x40023800
 8004204:	424711e0 	.word	0x424711e0
 8004208:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800420c:	4b7e      	ldr	r3, [pc, #504]	@ (8004408 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1ea      	bne.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b00      	cmp	r3, #0
 8004222:	d003      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004228:	2b00      	cmp	r3, #0
 800422a:	d009      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004234:	2b00      	cmp	r3, #0
 8004236:	d028      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800423c:	2b00      	cmp	r3, #0
 800423e:	d124      	bne.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004240:	4b71      	ldr	r3, [pc, #452]	@ (8004408 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004242:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004246:	0c1b      	lsrs	r3, r3, #16
 8004248:	f003 0303 	and.w	r3, r3, #3
 800424c:	3301      	adds	r3, #1
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004252:	4b6d      	ldr	r3, [pc, #436]	@ (8004408 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004254:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004258:	0e1b      	lsrs	r3, r3, #24
 800425a:	f003 030f 	and.w	r3, r3, #15
 800425e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	019b      	lsls	r3, r3, #6
 800426a:	431a      	orrs	r2, r3
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	085b      	lsrs	r3, r3, #1
 8004270:	3b01      	subs	r3, #1
 8004272:	041b      	lsls	r3, r3, #16
 8004274:	431a      	orrs	r2, r3
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	061b      	lsls	r3, r3, #24
 800427a:	431a      	orrs	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	071b      	lsls	r3, r3, #28
 8004282:	4961      	ldr	r1, [pc, #388]	@ (8004408 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004284:	4313      	orrs	r3, r2
 8004286:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0304 	and.w	r3, r3, #4
 8004292:	2b00      	cmp	r3, #0
 8004294:	d004      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800429a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800429e:	d00a      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d035      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042b4:	d130      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80042b6:	4b54      	ldr	r3, [pc, #336]	@ (8004408 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80042b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042bc:	0c1b      	lsrs	r3, r3, #16
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	3301      	adds	r3, #1
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042c8:	4b4f      	ldr	r3, [pc, #316]	@ (8004408 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80042ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042ce:	0f1b      	lsrs	r3, r3, #28
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	019b      	lsls	r3, r3, #6
 80042e0:	431a      	orrs	r2, r3
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	085b      	lsrs	r3, r3, #1
 80042e6:	3b01      	subs	r3, #1
 80042e8:	041b      	lsls	r3, r3, #16
 80042ea:	431a      	orrs	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	061b      	lsls	r3, r3, #24
 80042f2:	431a      	orrs	r2, r3
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	071b      	lsls	r3, r3, #28
 80042f8:	4943      	ldr	r1, [pc, #268]	@ (8004408 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004300:	4b41      	ldr	r3, [pc, #260]	@ (8004408 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004302:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004306:	f023 021f 	bic.w	r2, r3, #31
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800430e:	3b01      	subs	r3, #1
 8004310:	493d      	ldr	r1, [pc, #244]	@ (8004408 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004312:	4313      	orrs	r3, r2
 8004314:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004320:	2b00      	cmp	r3, #0
 8004322:	d029      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004328:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800432c:	d124      	bne.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800432e:	4b36      	ldr	r3, [pc, #216]	@ (8004408 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004330:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004334:	0c1b      	lsrs	r3, r3, #16
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	3301      	adds	r3, #1
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004340:	4b31      	ldr	r3, [pc, #196]	@ (8004408 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004342:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004346:	0f1b      	lsrs	r3, r3, #28
 8004348:	f003 0307 	and.w	r3, r3, #7
 800434c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685a      	ldr	r2, [r3, #4]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	019b      	lsls	r3, r3, #6
 8004358:	431a      	orrs	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	085b      	lsrs	r3, r3, #1
 8004360:	3b01      	subs	r3, #1
 8004362:	041b      	lsls	r3, r3, #16
 8004364:	431a      	orrs	r2, r3
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	061b      	lsls	r3, r3, #24
 800436a:	431a      	orrs	r2, r3
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	071b      	lsls	r3, r3, #28
 8004370:	4925      	ldr	r1, [pc, #148]	@ (8004408 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004372:	4313      	orrs	r3, r2
 8004374:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004380:	2b00      	cmp	r3, #0
 8004382:	d016      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	019b      	lsls	r3, r3, #6
 800438e:	431a      	orrs	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	085b      	lsrs	r3, r3, #1
 8004396:	3b01      	subs	r3, #1
 8004398:	041b      	lsls	r3, r3, #16
 800439a:	431a      	orrs	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	061b      	lsls	r3, r3, #24
 80043a2:	431a      	orrs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	071b      	lsls	r3, r3, #28
 80043aa:	4917      	ldr	r1, [pc, #92]	@ (8004408 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80043b2:	4b16      	ldr	r3, [pc, #88]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80043b4:	2201      	movs	r2, #1
 80043b6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043b8:	f7fd fe22 	bl	8002000 <HAL_GetTick>
 80043bc:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043be:	e008      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80043c0:	f7fd fe1e 	bl	8002000 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e09f      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004408 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0f0      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80043de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	f040 8095 	bne.w	8004510 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80043e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043ec:	f7fd fe08 	bl	8002000 <HAL_GetTick>
 80043f0:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043f2:	e00f      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80043f4:	f7fd fe04 	bl	8002000 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d908      	bls.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e085      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004406:	bf00      	nop
 8004408:	40023800 	.word	0x40023800
 800440c:	42470068 	.word	0x42470068
 8004410:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004414:	4b41      	ldr	r3, [pc, #260]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800441c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004420:	d0e8      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0304 	and.w	r3, r3, #4
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004432:	2b00      	cmp	r3, #0
 8004434:	d009      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800443e:	2b00      	cmp	r3, #0
 8004440:	d02b      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004446:	2b00      	cmp	r3, #0
 8004448:	d127      	bne.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800444a:	4b34      	ldr	r3, [pc, #208]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800444c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004450:	0c1b      	lsrs	r3, r3, #16
 8004452:	f003 0303 	and.w	r3, r3, #3
 8004456:	3301      	adds	r3, #1
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	699a      	ldr	r2, [r3, #24]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	69db      	ldr	r3, [r3, #28]
 8004464:	019b      	lsls	r3, r3, #6
 8004466:	431a      	orrs	r2, r3
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	085b      	lsrs	r3, r3, #1
 800446c:	3b01      	subs	r3, #1
 800446e:	041b      	lsls	r3, r3, #16
 8004470:	431a      	orrs	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004476:	061b      	lsls	r3, r3, #24
 8004478:	4928      	ldr	r1, [pc, #160]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800447a:	4313      	orrs	r3, r2
 800447c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004480:	4b26      	ldr	r3, [pc, #152]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004482:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004486:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800448e:	3b01      	subs	r3, #1
 8004490:	021b      	lsls	r3, r3, #8
 8004492:	4922      	ldr	r1, [pc, #136]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004494:	4313      	orrs	r3, r2
 8004496:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d01d      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044ae:	d118      	bne.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80044b0:	4b1a      	ldr	r3, [pc, #104]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80044b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044b6:	0e1b      	lsrs	r3, r3, #24
 80044b8:	f003 030f 	and.w	r3, r3, #15
 80044bc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	699a      	ldr	r2, [r3, #24]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	019b      	lsls	r3, r3, #6
 80044c8:	431a      	orrs	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	085b      	lsrs	r3, r3, #1
 80044d0:	3b01      	subs	r3, #1
 80044d2:	041b      	lsls	r3, r3, #16
 80044d4:	431a      	orrs	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	061b      	lsls	r3, r3, #24
 80044da:	4910      	ldr	r1, [pc, #64]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80044e2:	4b0f      	ldr	r3, [pc, #60]	@ (8004520 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80044e4:	2201      	movs	r2, #1
 80044e6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044e8:	f7fd fd8a 	bl	8002000 <HAL_GetTick>
 80044ec:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044ee:	e008      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80044f0:	f7fd fd86 	bl	8002000 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d901      	bls.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e007      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004502:	4b06      	ldr	r3, [pc, #24]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800450a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800450e:	d1ef      	bne.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3730      	adds	r7, #48	@ 0x30
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	40023800 	.word	0x40023800
 8004520:	42470070 	.word	0x42470070

08004524 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004524:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004528:	b0ae      	sub	sp, #184	@ 0xb8
 800452a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800452c:	2300      	movs	r3, #0
 800452e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004532:	2300      	movs	r3, #0
 8004534:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004538:	2300      	movs	r3, #0
 800453a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800453e:	2300      	movs	r3, #0
 8004540:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004544:	2300      	movs	r3, #0
 8004546:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800454a:	4bcb      	ldr	r3, [pc, #812]	@ (8004878 <HAL_RCC_GetSysClockFreq+0x354>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f003 030c 	and.w	r3, r3, #12
 8004552:	2b0c      	cmp	r3, #12
 8004554:	f200 8206 	bhi.w	8004964 <HAL_RCC_GetSysClockFreq+0x440>
 8004558:	a201      	add	r2, pc, #4	@ (adr r2, 8004560 <HAL_RCC_GetSysClockFreq+0x3c>)
 800455a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455e:	bf00      	nop
 8004560:	08004595 	.word	0x08004595
 8004564:	08004965 	.word	0x08004965
 8004568:	08004965 	.word	0x08004965
 800456c:	08004965 	.word	0x08004965
 8004570:	0800459d 	.word	0x0800459d
 8004574:	08004965 	.word	0x08004965
 8004578:	08004965 	.word	0x08004965
 800457c:	08004965 	.word	0x08004965
 8004580:	080045a5 	.word	0x080045a5
 8004584:	08004965 	.word	0x08004965
 8004588:	08004965 	.word	0x08004965
 800458c:	08004965 	.word	0x08004965
 8004590:	08004795 	.word	0x08004795
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004594:	4bb9      	ldr	r3, [pc, #740]	@ (800487c <HAL_RCC_GetSysClockFreq+0x358>)
 8004596:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800459a:	e1e7      	b.n	800496c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800459c:	4bb8      	ldr	r3, [pc, #736]	@ (8004880 <HAL_RCC_GetSysClockFreq+0x35c>)
 800459e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80045a2:	e1e3      	b.n	800496c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045a4:	4bb4      	ldr	r3, [pc, #720]	@ (8004878 <HAL_RCC_GetSysClockFreq+0x354>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045b0:	4bb1      	ldr	r3, [pc, #708]	@ (8004878 <HAL_RCC_GetSysClockFreq+0x354>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d071      	beq.n	80046a0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045bc:	4bae      	ldr	r3, [pc, #696]	@ (8004878 <HAL_RCC_GetSysClockFreq+0x354>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	099b      	lsrs	r3, r3, #6
 80045c2:	2200      	movs	r2, #0
 80045c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80045c8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80045cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80045d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80045d8:	2300      	movs	r3, #0
 80045da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80045de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80045e2:	4622      	mov	r2, r4
 80045e4:	462b      	mov	r3, r5
 80045e6:	f04f 0000 	mov.w	r0, #0
 80045ea:	f04f 0100 	mov.w	r1, #0
 80045ee:	0159      	lsls	r1, r3, #5
 80045f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045f4:	0150      	lsls	r0, r2, #5
 80045f6:	4602      	mov	r2, r0
 80045f8:	460b      	mov	r3, r1
 80045fa:	4621      	mov	r1, r4
 80045fc:	1a51      	subs	r1, r2, r1
 80045fe:	6439      	str	r1, [r7, #64]	@ 0x40
 8004600:	4629      	mov	r1, r5
 8004602:	eb63 0301 	sbc.w	r3, r3, r1
 8004606:	647b      	str	r3, [r7, #68]	@ 0x44
 8004608:	f04f 0200 	mov.w	r2, #0
 800460c:	f04f 0300 	mov.w	r3, #0
 8004610:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004614:	4649      	mov	r1, r9
 8004616:	018b      	lsls	r3, r1, #6
 8004618:	4641      	mov	r1, r8
 800461a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800461e:	4641      	mov	r1, r8
 8004620:	018a      	lsls	r2, r1, #6
 8004622:	4641      	mov	r1, r8
 8004624:	1a51      	subs	r1, r2, r1
 8004626:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004628:	4649      	mov	r1, r9
 800462a:	eb63 0301 	sbc.w	r3, r3, r1
 800462e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004630:	f04f 0200 	mov.w	r2, #0
 8004634:	f04f 0300 	mov.w	r3, #0
 8004638:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800463c:	4649      	mov	r1, r9
 800463e:	00cb      	lsls	r3, r1, #3
 8004640:	4641      	mov	r1, r8
 8004642:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004646:	4641      	mov	r1, r8
 8004648:	00ca      	lsls	r2, r1, #3
 800464a:	4610      	mov	r0, r2
 800464c:	4619      	mov	r1, r3
 800464e:	4603      	mov	r3, r0
 8004650:	4622      	mov	r2, r4
 8004652:	189b      	adds	r3, r3, r2
 8004654:	633b      	str	r3, [r7, #48]	@ 0x30
 8004656:	462b      	mov	r3, r5
 8004658:	460a      	mov	r2, r1
 800465a:	eb42 0303 	adc.w	r3, r2, r3
 800465e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004660:	f04f 0200 	mov.w	r2, #0
 8004664:	f04f 0300 	mov.w	r3, #0
 8004668:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800466c:	4629      	mov	r1, r5
 800466e:	024b      	lsls	r3, r1, #9
 8004670:	4621      	mov	r1, r4
 8004672:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004676:	4621      	mov	r1, r4
 8004678:	024a      	lsls	r2, r1, #9
 800467a:	4610      	mov	r0, r2
 800467c:	4619      	mov	r1, r3
 800467e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004682:	2200      	movs	r2, #0
 8004684:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004688:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800468c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004690:	f7fc fa46 	bl	8000b20 <__aeabi_uldivmod>
 8004694:	4602      	mov	r2, r0
 8004696:	460b      	mov	r3, r1
 8004698:	4613      	mov	r3, r2
 800469a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800469e:	e067      	b.n	8004770 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046a0:	4b75      	ldr	r3, [pc, #468]	@ (8004878 <HAL_RCC_GetSysClockFreq+0x354>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	099b      	lsrs	r3, r3, #6
 80046a6:	2200      	movs	r2, #0
 80046a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80046ac:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80046b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80046b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80046ba:	2300      	movs	r3, #0
 80046bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80046be:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80046c2:	4622      	mov	r2, r4
 80046c4:	462b      	mov	r3, r5
 80046c6:	f04f 0000 	mov.w	r0, #0
 80046ca:	f04f 0100 	mov.w	r1, #0
 80046ce:	0159      	lsls	r1, r3, #5
 80046d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046d4:	0150      	lsls	r0, r2, #5
 80046d6:	4602      	mov	r2, r0
 80046d8:	460b      	mov	r3, r1
 80046da:	4621      	mov	r1, r4
 80046dc:	1a51      	subs	r1, r2, r1
 80046de:	62b9      	str	r1, [r7, #40]	@ 0x28
 80046e0:	4629      	mov	r1, r5
 80046e2:	eb63 0301 	sbc.w	r3, r3, r1
 80046e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046e8:	f04f 0200 	mov.w	r2, #0
 80046ec:	f04f 0300 	mov.w	r3, #0
 80046f0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80046f4:	4649      	mov	r1, r9
 80046f6:	018b      	lsls	r3, r1, #6
 80046f8:	4641      	mov	r1, r8
 80046fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046fe:	4641      	mov	r1, r8
 8004700:	018a      	lsls	r2, r1, #6
 8004702:	4641      	mov	r1, r8
 8004704:	ebb2 0a01 	subs.w	sl, r2, r1
 8004708:	4649      	mov	r1, r9
 800470a:	eb63 0b01 	sbc.w	fp, r3, r1
 800470e:	f04f 0200 	mov.w	r2, #0
 8004712:	f04f 0300 	mov.w	r3, #0
 8004716:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800471a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800471e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004722:	4692      	mov	sl, r2
 8004724:	469b      	mov	fp, r3
 8004726:	4623      	mov	r3, r4
 8004728:	eb1a 0303 	adds.w	r3, sl, r3
 800472c:	623b      	str	r3, [r7, #32]
 800472e:	462b      	mov	r3, r5
 8004730:	eb4b 0303 	adc.w	r3, fp, r3
 8004734:	627b      	str	r3, [r7, #36]	@ 0x24
 8004736:	f04f 0200 	mov.w	r2, #0
 800473a:	f04f 0300 	mov.w	r3, #0
 800473e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004742:	4629      	mov	r1, r5
 8004744:	028b      	lsls	r3, r1, #10
 8004746:	4621      	mov	r1, r4
 8004748:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800474c:	4621      	mov	r1, r4
 800474e:	028a      	lsls	r2, r1, #10
 8004750:	4610      	mov	r0, r2
 8004752:	4619      	mov	r1, r3
 8004754:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004758:	2200      	movs	r2, #0
 800475a:	673b      	str	r3, [r7, #112]	@ 0x70
 800475c:	677a      	str	r2, [r7, #116]	@ 0x74
 800475e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004762:	f7fc f9dd 	bl	8000b20 <__aeabi_uldivmod>
 8004766:	4602      	mov	r2, r0
 8004768:	460b      	mov	r3, r1
 800476a:	4613      	mov	r3, r2
 800476c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004770:	4b41      	ldr	r3, [pc, #260]	@ (8004878 <HAL_RCC_GetSysClockFreq+0x354>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	0c1b      	lsrs	r3, r3, #16
 8004776:	f003 0303 	and.w	r3, r3, #3
 800477a:	3301      	adds	r3, #1
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8004782:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004786:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800478a:	fbb2 f3f3 	udiv	r3, r2, r3
 800478e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004792:	e0eb      	b.n	800496c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004794:	4b38      	ldr	r3, [pc, #224]	@ (8004878 <HAL_RCC_GetSysClockFreq+0x354>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800479c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047a0:	4b35      	ldr	r3, [pc, #212]	@ (8004878 <HAL_RCC_GetSysClockFreq+0x354>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d06b      	beq.n	8004884 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047ac:	4b32      	ldr	r3, [pc, #200]	@ (8004878 <HAL_RCC_GetSysClockFreq+0x354>)
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	099b      	lsrs	r3, r3, #6
 80047b2:	2200      	movs	r2, #0
 80047b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80047b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80047ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047be:	663b      	str	r3, [r7, #96]	@ 0x60
 80047c0:	2300      	movs	r3, #0
 80047c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80047c4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80047c8:	4622      	mov	r2, r4
 80047ca:	462b      	mov	r3, r5
 80047cc:	f04f 0000 	mov.w	r0, #0
 80047d0:	f04f 0100 	mov.w	r1, #0
 80047d4:	0159      	lsls	r1, r3, #5
 80047d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047da:	0150      	lsls	r0, r2, #5
 80047dc:	4602      	mov	r2, r0
 80047de:	460b      	mov	r3, r1
 80047e0:	4621      	mov	r1, r4
 80047e2:	1a51      	subs	r1, r2, r1
 80047e4:	61b9      	str	r1, [r7, #24]
 80047e6:	4629      	mov	r1, r5
 80047e8:	eb63 0301 	sbc.w	r3, r3, r1
 80047ec:	61fb      	str	r3, [r7, #28]
 80047ee:	f04f 0200 	mov.w	r2, #0
 80047f2:	f04f 0300 	mov.w	r3, #0
 80047f6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80047fa:	4659      	mov	r1, fp
 80047fc:	018b      	lsls	r3, r1, #6
 80047fe:	4651      	mov	r1, sl
 8004800:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004804:	4651      	mov	r1, sl
 8004806:	018a      	lsls	r2, r1, #6
 8004808:	4651      	mov	r1, sl
 800480a:	ebb2 0801 	subs.w	r8, r2, r1
 800480e:	4659      	mov	r1, fp
 8004810:	eb63 0901 	sbc.w	r9, r3, r1
 8004814:	f04f 0200 	mov.w	r2, #0
 8004818:	f04f 0300 	mov.w	r3, #0
 800481c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004820:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004824:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004828:	4690      	mov	r8, r2
 800482a:	4699      	mov	r9, r3
 800482c:	4623      	mov	r3, r4
 800482e:	eb18 0303 	adds.w	r3, r8, r3
 8004832:	613b      	str	r3, [r7, #16]
 8004834:	462b      	mov	r3, r5
 8004836:	eb49 0303 	adc.w	r3, r9, r3
 800483a:	617b      	str	r3, [r7, #20]
 800483c:	f04f 0200 	mov.w	r2, #0
 8004840:	f04f 0300 	mov.w	r3, #0
 8004844:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004848:	4629      	mov	r1, r5
 800484a:	024b      	lsls	r3, r1, #9
 800484c:	4621      	mov	r1, r4
 800484e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004852:	4621      	mov	r1, r4
 8004854:	024a      	lsls	r2, r1, #9
 8004856:	4610      	mov	r0, r2
 8004858:	4619      	mov	r1, r3
 800485a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800485e:	2200      	movs	r2, #0
 8004860:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004862:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004864:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004868:	f7fc f95a 	bl	8000b20 <__aeabi_uldivmod>
 800486c:	4602      	mov	r2, r0
 800486e:	460b      	mov	r3, r1
 8004870:	4613      	mov	r3, r2
 8004872:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004876:	e065      	b.n	8004944 <HAL_RCC_GetSysClockFreq+0x420>
 8004878:	40023800 	.word	0x40023800
 800487c:	00f42400 	.word	0x00f42400
 8004880:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004884:	4b3d      	ldr	r3, [pc, #244]	@ (800497c <HAL_RCC_GetSysClockFreq+0x458>)
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	099b      	lsrs	r3, r3, #6
 800488a:	2200      	movs	r2, #0
 800488c:	4618      	mov	r0, r3
 800488e:	4611      	mov	r1, r2
 8004890:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004894:	653b      	str	r3, [r7, #80]	@ 0x50
 8004896:	2300      	movs	r3, #0
 8004898:	657b      	str	r3, [r7, #84]	@ 0x54
 800489a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800489e:	4642      	mov	r2, r8
 80048a0:	464b      	mov	r3, r9
 80048a2:	f04f 0000 	mov.w	r0, #0
 80048a6:	f04f 0100 	mov.w	r1, #0
 80048aa:	0159      	lsls	r1, r3, #5
 80048ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048b0:	0150      	lsls	r0, r2, #5
 80048b2:	4602      	mov	r2, r0
 80048b4:	460b      	mov	r3, r1
 80048b6:	4641      	mov	r1, r8
 80048b8:	1a51      	subs	r1, r2, r1
 80048ba:	60b9      	str	r1, [r7, #8]
 80048bc:	4649      	mov	r1, r9
 80048be:	eb63 0301 	sbc.w	r3, r3, r1
 80048c2:	60fb      	str	r3, [r7, #12]
 80048c4:	f04f 0200 	mov.w	r2, #0
 80048c8:	f04f 0300 	mov.w	r3, #0
 80048cc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80048d0:	4659      	mov	r1, fp
 80048d2:	018b      	lsls	r3, r1, #6
 80048d4:	4651      	mov	r1, sl
 80048d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048da:	4651      	mov	r1, sl
 80048dc:	018a      	lsls	r2, r1, #6
 80048de:	4651      	mov	r1, sl
 80048e0:	1a54      	subs	r4, r2, r1
 80048e2:	4659      	mov	r1, fp
 80048e4:	eb63 0501 	sbc.w	r5, r3, r1
 80048e8:	f04f 0200 	mov.w	r2, #0
 80048ec:	f04f 0300 	mov.w	r3, #0
 80048f0:	00eb      	lsls	r3, r5, #3
 80048f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048f6:	00e2      	lsls	r2, r4, #3
 80048f8:	4614      	mov	r4, r2
 80048fa:	461d      	mov	r5, r3
 80048fc:	4643      	mov	r3, r8
 80048fe:	18e3      	adds	r3, r4, r3
 8004900:	603b      	str	r3, [r7, #0]
 8004902:	464b      	mov	r3, r9
 8004904:	eb45 0303 	adc.w	r3, r5, r3
 8004908:	607b      	str	r3, [r7, #4]
 800490a:	f04f 0200 	mov.w	r2, #0
 800490e:	f04f 0300 	mov.w	r3, #0
 8004912:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004916:	4629      	mov	r1, r5
 8004918:	028b      	lsls	r3, r1, #10
 800491a:	4621      	mov	r1, r4
 800491c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004920:	4621      	mov	r1, r4
 8004922:	028a      	lsls	r2, r1, #10
 8004924:	4610      	mov	r0, r2
 8004926:	4619      	mov	r1, r3
 8004928:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800492c:	2200      	movs	r2, #0
 800492e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004930:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004932:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004936:	f7fc f8f3 	bl	8000b20 <__aeabi_uldivmod>
 800493a:	4602      	mov	r2, r0
 800493c:	460b      	mov	r3, r1
 800493e:	4613      	mov	r3, r2
 8004940:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004944:	4b0d      	ldr	r3, [pc, #52]	@ (800497c <HAL_RCC_GetSysClockFreq+0x458>)
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	0f1b      	lsrs	r3, r3, #28
 800494a:	f003 0307 	and.w	r3, r3, #7
 800494e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8004952:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004956:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800495a:	fbb2 f3f3 	udiv	r3, r2, r3
 800495e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004962:	e003      	b.n	800496c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004964:	4b06      	ldr	r3, [pc, #24]	@ (8004980 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004966:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800496a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800496c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004970:	4618      	mov	r0, r3
 8004972:	37b8      	adds	r7, #184	@ 0xb8
 8004974:	46bd      	mov	sp, r7
 8004976:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800497a:	bf00      	nop
 800497c:	40023800 	.word	0x40023800
 8004980:	00f42400 	.word	0x00f42400

08004984 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e28d      	b.n	8004eb2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f000 8083 	beq.w	8004aaa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80049a4:	4b94      	ldr	r3, [pc, #592]	@ (8004bf8 <HAL_RCC_OscConfig+0x274>)
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f003 030c 	and.w	r3, r3, #12
 80049ac:	2b04      	cmp	r3, #4
 80049ae:	d019      	beq.n	80049e4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80049b0:	4b91      	ldr	r3, [pc, #580]	@ (8004bf8 <HAL_RCC_OscConfig+0x274>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80049b8:	2b08      	cmp	r3, #8
 80049ba:	d106      	bne.n	80049ca <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80049bc:	4b8e      	ldr	r3, [pc, #568]	@ (8004bf8 <HAL_RCC_OscConfig+0x274>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049c8:	d00c      	beq.n	80049e4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049ca:	4b8b      	ldr	r3, [pc, #556]	@ (8004bf8 <HAL_RCC_OscConfig+0x274>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80049d2:	2b0c      	cmp	r3, #12
 80049d4:	d112      	bne.n	80049fc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049d6:	4b88      	ldr	r3, [pc, #544]	@ (8004bf8 <HAL_RCC_OscConfig+0x274>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049e2:	d10b      	bne.n	80049fc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049e4:	4b84      	ldr	r3, [pc, #528]	@ (8004bf8 <HAL_RCC_OscConfig+0x274>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d05b      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x124>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d157      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e25a      	b.n	8004eb2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a04:	d106      	bne.n	8004a14 <HAL_RCC_OscConfig+0x90>
 8004a06:	4b7c      	ldr	r3, [pc, #496]	@ (8004bf8 <HAL_RCC_OscConfig+0x274>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a7b      	ldr	r2, [pc, #492]	@ (8004bf8 <HAL_RCC_OscConfig+0x274>)
 8004a0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a10:	6013      	str	r3, [r2, #0]
 8004a12:	e01d      	b.n	8004a50 <HAL_RCC_OscConfig+0xcc>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a1c:	d10c      	bne.n	8004a38 <HAL_RCC_OscConfig+0xb4>
 8004a1e:	4b76      	ldr	r3, [pc, #472]	@ (8004bf8 <HAL_RCC_OscConfig+0x274>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a75      	ldr	r2, [pc, #468]	@ (8004bf8 <HAL_RCC_OscConfig+0x274>)
 8004a24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a28:	6013      	str	r3, [r2, #0]
 8004a2a:	4b73      	ldr	r3, [pc, #460]	@ (8004bf8 <HAL_RCC_OscConfig+0x274>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a72      	ldr	r2, [pc, #456]	@ (8004bf8 <HAL_RCC_OscConfig+0x274>)
 8004a30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a34:	6013      	str	r3, [r2, #0]
 8004a36:	e00b      	b.n	8004a50 <HAL_RCC_OscConfig+0xcc>
 8004a38:	4b6f      	ldr	r3, [pc, #444]	@ (8004bf8 <HAL_RCC_OscConfig+0x274>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a6e      	ldr	r2, [pc, #440]	@ (8004bf8 <HAL_RCC_OscConfig+0x274>)
 8004a3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a42:	6013      	str	r3, [r2, #0]
 8004a44:	4b6c      	ldr	r3, [pc, #432]	@ (8004bf8 <HAL_RCC_OscConfig+0x274>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a6b      	ldr	r2, [pc, #428]	@ (8004bf8 <HAL_RCC_OscConfig+0x274>)
 8004a4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d013      	beq.n	8004a80 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a58:	f7fd fad2 	bl	8002000 <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a5e:	e008      	b.n	8004a72 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a60:	f7fd face 	bl	8002000 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b64      	cmp	r3, #100	@ 0x64
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e21f      	b.n	8004eb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a72:	4b61      	ldr	r3, [pc, #388]	@ (8004bf8 <HAL_RCC_OscConfig+0x274>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d0f0      	beq.n	8004a60 <HAL_RCC_OscConfig+0xdc>
 8004a7e:	e014      	b.n	8004aaa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a80:	f7fd fabe 	bl	8002000 <HAL_GetTick>
 8004a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a86:	e008      	b.n	8004a9a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a88:	f7fd faba 	bl	8002000 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b64      	cmp	r3, #100	@ 0x64
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e20b      	b.n	8004eb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a9a:	4b57      	ldr	r3, [pc, #348]	@ (8004bf8 <HAL_RCC_OscConfig+0x274>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1f0      	bne.n	8004a88 <HAL_RCC_OscConfig+0x104>
 8004aa6:	e000      	b.n	8004aaa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d06f      	beq.n	8004b96 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004ab6:	4b50      	ldr	r3, [pc, #320]	@ (8004bf8 <HAL_RCC_OscConfig+0x274>)
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f003 030c 	and.w	r3, r3, #12
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d017      	beq.n	8004af2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004ac2:	4b4d      	ldr	r3, [pc, #308]	@ (8004bf8 <HAL_RCC_OscConfig+0x274>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004aca:	2b08      	cmp	r3, #8
 8004acc:	d105      	bne.n	8004ada <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004ace:	4b4a      	ldr	r3, [pc, #296]	@ (8004bf8 <HAL_RCC_OscConfig+0x274>)
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00b      	beq.n	8004af2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ada:	4b47      	ldr	r3, [pc, #284]	@ (8004bf8 <HAL_RCC_OscConfig+0x274>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004ae2:	2b0c      	cmp	r3, #12
 8004ae4:	d11c      	bne.n	8004b20 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ae6:	4b44      	ldr	r3, [pc, #272]	@ (8004bf8 <HAL_RCC_OscConfig+0x274>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d116      	bne.n	8004b20 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004af2:	4b41      	ldr	r3, [pc, #260]	@ (8004bf8 <HAL_RCC_OscConfig+0x274>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d005      	beq.n	8004b0a <HAL_RCC_OscConfig+0x186>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d001      	beq.n	8004b0a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e1d3      	b.n	8004eb2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b0a:	4b3b      	ldr	r3, [pc, #236]	@ (8004bf8 <HAL_RCC_OscConfig+0x274>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	00db      	lsls	r3, r3, #3
 8004b18:	4937      	ldr	r1, [pc, #220]	@ (8004bf8 <HAL_RCC_OscConfig+0x274>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b1e:	e03a      	b.n	8004b96 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d020      	beq.n	8004b6a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b28:	4b34      	ldr	r3, [pc, #208]	@ (8004bfc <HAL_RCC_OscConfig+0x278>)
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2e:	f7fd fa67 	bl	8002000 <HAL_GetTick>
 8004b32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b34:	e008      	b.n	8004b48 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b36:	f7fd fa63 	bl	8002000 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d901      	bls.n	8004b48 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e1b4      	b.n	8004eb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b48:	4b2b      	ldr	r3, [pc, #172]	@ (8004bf8 <HAL_RCC_OscConfig+0x274>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d0f0      	beq.n	8004b36 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b54:	4b28      	ldr	r3, [pc, #160]	@ (8004bf8 <HAL_RCC_OscConfig+0x274>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	00db      	lsls	r3, r3, #3
 8004b62:	4925      	ldr	r1, [pc, #148]	@ (8004bf8 <HAL_RCC_OscConfig+0x274>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	600b      	str	r3, [r1, #0]
 8004b68:	e015      	b.n	8004b96 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b6a:	4b24      	ldr	r3, [pc, #144]	@ (8004bfc <HAL_RCC_OscConfig+0x278>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b70:	f7fd fa46 	bl	8002000 <HAL_GetTick>
 8004b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b76:	e008      	b.n	8004b8a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b78:	f7fd fa42 	bl	8002000 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e193      	b.n	8004eb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b8a:	4b1b      	ldr	r3, [pc, #108]	@ (8004bf8 <HAL_RCC_OscConfig+0x274>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1f0      	bne.n	8004b78 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0308 	and.w	r3, r3, #8
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d036      	beq.n	8004c10 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d016      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004baa:	4b15      	ldr	r3, [pc, #84]	@ (8004c00 <HAL_RCC_OscConfig+0x27c>)
 8004bac:	2201      	movs	r2, #1
 8004bae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb0:	f7fd fa26 	bl	8002000 <HAL_GetTick>
 8004bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bb6:	e008      	b.n	8004bca <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bb8:	f7fd fa22 	bl	8002000 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e173      	b.n	8004eb2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bca:	4b0b      	ldr	r3, [pc, #44]	@ (8004bf8 <HAL_RCC_OscConfig+0x274>)
 8004bcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0f0      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x234>
 8004bd6:	e01b      	b.n	8004c10 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bd8:	4b09      	ldr	r3, [pc, #36]	@ (8004c00 <HAL_RCC_OscConfig+0x27c>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bde:	f7fd fa0f 	bl	8002000 <HAL_GetTick>
 8004be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004be4:	e00e      	b.n	8004c04 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004be6:	f7fd fa0b 	bl	8002000 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d907      	bls.n	8004c04 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e15c      	b.n	8004eb2 <HAL_RCC_OscConfig+0x52e>
 8004bf8:	40023800 	.word	0x40023800
 8004bfc:	42470000 	.word	0x42470000
 8004c00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c04:	4b8a      	ldr	r3, [pc, #552]	@ (8004e30 <HAL_RCC_OscConfig+0x4ac>)
 8004c06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c08:	f003 0302 	and.w	r3, r3, #2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1ea      	bne.n	8004be6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0304 	and.w	r3, r3, #4
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f000 8097 	beq.w	8004d4c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c22:	4b83      	ldr	r3, [pc, #524]	@ (8004e30 <HAL_RCC_OscConfig+0x4ac>)
 8004c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10f      	bne.n	8004c4e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c2e:	2300      	movs	r3, #0
 8004c30:	60bb      	str	r3, [r7, #8]
 8004c32:	4b7f      	ldr	r3, [pc, #508]	@ (8004e30 <HAL_RCC_OscConfig+0x4ac>)
 8004c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c36:	4a7e      	ldr	r2, [pc, #504]	@ (8004e30 <HAL_RCC_OscConfig+0x4ac>)
 8004c38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c3e:	4b7c      	ldr	r3, [pc, #496]	@ (8004e30 <HAL_RCC_OscConfig+0x4ac>)
 8004c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c46:	60bb      	str	r3, [r7, #8]
 8004c48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c4e:	4b79      	ldr	r3, [pc, #484]	@ (8004e34 <HAL_RCC_OscConfig+0x4b0>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d118      	bne.n	8004c8c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c5a:	4b76      	ldr	r3, [pc, #472]	@ (8004e34 <HAL_RCC_OscConfig+0x4b0>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a75      	ldr	r2, [pc, #468]	@ (8004e34 <HAL_RCC_OscConfig+0x4b0>)
 8004c60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c66:	f7fd f9cb 	bl	8002000 <HAL_GetTick>
 8004c6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c6c:	e008      	b.n	8004c80 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c6e:	f7fd f9c7 	bl	8002000 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d901      	bls.n	8004c80 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e118      	b.n	8004eb2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c80:	4b6c      	ldr	r3, [pc, #432]	@ (8004e34 <HAL_RCC_OscConfig+0x4b0>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d0f0      	beq.n	8004c6e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d106      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x31e>
 8004c94:	4b66      	ldr	r3, [pc, #408]	@ (8004e30 <HAL_RCC_OscConfig+0x4ac>)
 8004c96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c98:	4a65      	ldr	r2, [pc, #404]	@ (8004e30 <HAL_RCC_OscConfig+0x4ac>)
 8004c9a:	f043 0301 	orr.w	r3, r3, #1
 8004c9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ca0:	e01c      	b.n	8004cdc <HAL_RCC_OscConfig+0x358>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	2b05      	cmp	r3, #5
 8004ca8:	d10c      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x340>
 8004caa:	4b61      	ldr	r3, [pc, #388]	@ (8004e30 <HAL_RCC_OscConfig+0x4ac>)
 8004cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cae:	4a60      	ldr	r2, [pc, #384]	@ (8004e30 <HAL_RCC_OscConfig+0x4ac>)
 8004cb0:	f043 0304 	orr.w	r3, r3, #4
 8004cb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cb6:	4b5e      	ldr	r3, [pc, #376]	@ (8004e30 <HAL_RCC_OscConfig+0x4ac>)
 8004cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cba:	4a5d      	ldr	r2, [pc, #372]	@ (8004e30 <HAL_RCC_OscConfig+0x4ac>)
 8004cbc:	f043 0301 	orr.w	r3, r3, #1
 8004cc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cc2:	e00b      	b.n	8004cdc <HAL_RCC_OscConfig+0x358>
 8004cc4:	4b5a      	ldr	r3, [pc, #360]	@ (8004e30 <HAL_RCC_OscConfig+0x4ac>)
 8004cc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cc8:	4a59      	ldr	r2, [pc, #356]	@ (8004e30 <HAL_RCC_OscConfig+0x4ac>)
 8004cca:	f023 0301 	bic.w	r3, r3, #1
 8004cce:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cd0:	4b57      	ldr	r3, [pc, #348]	@ (8004e30 <HAL_RCC_OscConfig+0x4ac>)
 8004cd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cd4:	4a56      	ldr	r2, [pc, #344]	@ (8004e30 <HAL_RCC_OscConfig+0x4ac>)
 8004cd6:	f023 0304 	bic.w	r3, r3, #4
 8004cda:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d015      	beq.n	8004d10 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce4:	f7fd f98c 	bl	8002000 <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cea:	e00a      	b.n	8004d02 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cec:	f7fd f988 	bl	8002000 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e0d7      	b.n	8004eb2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d02:	4b4b      	ldr	r3, [pc, #300]	@ (8004e30 <HAL_RCC_OscConfig+0x4ac>)
 8004d04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d0ee      	beq.n	8004cec <HAL_RCC_OscConfig+0x368>
 8004d0e:	e014      	b.n	8004d3a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d10:	f7fd f976 	bl	8002000 <HAL_GetTick>
 8004d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d16:	e00a      	b.n	8004d2e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d18:	f7fd f972 	bl	8002000 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d901      	bls.n	8004d2e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e0c1      	b.n	8004eb2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d2e:	4b40      	ldr	r3, [pc, #256]	@ (8004e30 <HAL_RCC_OscConfig+0x4ac>)
 8004d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1ee      	bne.n	8004d18 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d3a:	7dfb      	ldrb	r3, [r7, #23]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d105      	bne.n	8004d4c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d40:	4b3b      	ldr	r3, [pc, #236]	@ (8004e30 <HAL_RCC_OscConfig+0x4ac>)
 8004d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d44:	4a3a      	ldr	r2, [pc, #232]	@ (8004e30 <HAL_RCC_OscConfig+0x4ac>)
 8004d46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d4a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f000 80ad 	beq.w	8004eb0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d56:	4b36      	ldr	r3, [pc, #216]	@ (8004e30 <HAL_RCC_OscConfig+0x4ac>)
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f003 030c 	and.w	r3, r3, #12
 8004d5e:	2b08      	cmp	r3, #8
 8004d60:	d060      	beq.n	8004e24 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d145      	bne.n	8004df6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d6a:	4b33      	ldr	r3, [pc, #204]	@ (8004e38 <HAL_RCC_OscConfig+0x4b4>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d70:	f7fd f946 	bl	8002000 <HAL_GetTick>
 8004d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d76:	e008      	b.n	8004d8a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d78:	f7fd f942 	bl	8002000 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e093      	b.n	8004eb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d8a:	4b29      	ldr	r3, [pc, #164]	@ (8004e30 <HAL_RCC_OscConfig+0x4ac>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1f0      	bne.n	8004d78 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	69da      	ldr	r2, [r3, #28]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da4:	019b      	lsls	r3, r3, #6
 8004da6:	431a      	orrs	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dac:	085b      	lsrs	r3, r3, #1
 8004dae:	3b01      	subs	r3, #1
 8004db0:	041b      	lsls	r3, r3, #16
 8004db2:	431a      	orrs	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db8:	061b      	lsls	r3, r3, #24
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc0:	071b      	lsls	r3, r3, #28
 8004dc2:	491b      	ldr	r1, [pc, #108]	@ (8004e30 <HAL_RCC_OscConfig+0x4ac>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dc8:	4b1b      	ldr	r3, [pc, #108]	@ (8004e38 <HAL_RCC_OscConfig+0x4b4>)
 8004dca:	2201      	movs	r2, #1
 8004dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dce:	f7fd f917 	bl	8002000 <HAL_GetTick>
 8004dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dd4:	e008      	b.n	8004de8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dd6:	f7fd f913 	bl	8002000 <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d901      	bls.n	8004de8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e064      	b.n	8004eb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004de8:	4b11      	ldr	r3, [pc, #68]	@ (8004e30 <HAL_RCC_OscConfig+0x4ac>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d0f0      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x452>
 8004df4:	e05c      	b.n	8004eb0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004df6:	4b10      	ldr	r3, [pc, #64]	@ (8004e38 <HAL_RCC_OscConfig+0x4b4>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dfc:	f7fd f900 	bl	8002000 <HAL_GetTick>
 8004e00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e02:	e008      	b.n	8004e16 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e04:	f7fd f8fc 	bl	8002000 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e04d      	b.n	8004eb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e16:	4b06      	ldr	r3, [pc, #24]	@ (8004e30 <HAL_RCC_OscConfig+0x4ac>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1f0      	bne.n	8004e04 <HAL_RCC_OscConfig+0x480>
 8004e22:	e045      	b.n	8004eb0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	699b      	ldr	r3, [r3, #24]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d107      	bne.n	8004e3c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e040      	b.n	8004eb2 <HAL_RCC_OscConfig+0x52e>
 8004e30:	40023800 	.word	0x40023800
 8004e34:	40007000 	.word	0x40007000
 8004e38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e3c:	4b1f      	ldr	r3, [pc, #124]	@ (8004ebc <HAL_RCC_OscConfig+0x538>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d030      	beq.n	8004eac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d129      	bne.n	8004eac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d122      	bne.n	8004eac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d119      	bne.n	8004eac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e82:	085b      	lsrs	r3, r3, #1
 8004e84:	3b01      	subs	r3, #1
 8004e86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d10f      	bne.n	8004eac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d107      	bne.n	8004eac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d001      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e000      	b.n	8004eb2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3718      	adds	r7, #24
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	40023800 	.word	0x40023800

08004ec0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d101      	bne.n	8004ed2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e041      	b.n	8004f56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d106      	bne.n	8004eec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7fc fe72 	bl	8001bd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2202      	movs	r2, #2
 8004ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	3304      	adds	r3, #4
 8004efc:	4619      	mov	r1, r3
 8004efe:	4610      	mov	r0, r2
 8004f00:	f000 f89e 	bl	8005040 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3708      	adds	r7, #8
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
	...

08004f60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d001      	beq.n	8004f78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e04e      	b.n	8005016 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68da      	ldr	r2, [r3, #12]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f042 0201 	orr.w	r2, r2, #1
 8004f8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a23      	ldr	r2, [pc, #140]	@ (8005024 <HAL_TIM_Base_Start_IT+0xc4>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d022      	beq.n	8004fe0 <HAL_TIM_Base_Start_IT+0x80>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fa2:	d01d      	beq.n	8004fe0 <HAL_TIM_Base_Start_IT+0x80>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a1f      	ldr	r2, [pc, #124]	@ (8005028 <HAL_TIM_Base_Start_IT+0xc8>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d018      	beq.n	8004fe0 <HAL_TIM_Base_Start_IT+0x80>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a1e      	ldr	r2, [pc, #120]	@ (800502c <HAL_TIM_Base_Start_IT+0xcc>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d013      	beq.n	8004fe0 <HAL_TIM_Base_Start_IT+0x80>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a1c      	ldr	r2, [pc, #112]	@ (8005030 <HAL_TIM_Base_Start_IT+0xd0>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d00e      	beq.n	8004fe0 <HAL_TIM_Base_Start_IT+0x80>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a1b      	ldr	r2, [pc, #108]	@ (8005034 <HAL_TIM_Base_Start_IT+0xd4>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d009      	beq.n	8004fe0 <HAL_TIM_Base_Start_IT+0x80>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a19      	ldr	r2, [pc, #100]	@ (8005038 <HAL_TIM_Base_Start_IT+0xd8>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d004      	beq.n	8004fe0 <HAL_TIM_Base_Start_IT+0x80>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a18      	ldr	r2, [pc, #96]	@ (800503c <HAL_TIM_Base_Start_IT+0xdc>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d111      	bne.n	8005004 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f003 0307 	and.w	r3, r3, #7
 8004fea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2b06      	cmp	r3, #6
 8004ff0:	d010      	beq.n	8005014 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f042 0201 	orr.w	r2, r2, #1
 8005000:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005002:	e007      	b.n	8005014 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f042 0201 	orr.w	r2, r2, #1
 8005012:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3714      	adds	r7, #20
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	40010000 	.word	0x40010000
 8005028:	40000400 	.word	0x40000400
 800502c:	40000800 	.word	0x40000800
 8005030:	40000c00 	.word	0x40000c00
 8005034:	40010400 	.word	0x40010400
 8005038:	40014000 	.word	0x40014000
 800503c:	40001800 	.word	0x40001800

08005040 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a46      	ldr	r2, [pc, #280]	@ (800516c <TIM_Base_SetConfig+0x12c>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d013      	beq.n	8005080 <TIM_Base_SetConfig+0x40>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800505e:	d00f      	beq.n	8005080 <TIM_Base_SetConfig+0x40>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a43      	ldr	r2, [pc, #268]	@ (8005170 <TIM_Base_SetConfig+0x130>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d00b      	beq.n	8005080 <TIM_Base_SetConfig+0x40>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a42      	ldr	r2, [pc, #264]	@ (8005174 <TIM_Base_SetConfig+0x134>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d007      	beq.n	8005080 <TIM_Base_SetConfig+0x40>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a41      	ldr	r2, [pc, #260]	@ (8005178 <TIM_Base_SetConfig+0x138>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d003      	beq.n	8005080 <TIM_Base_SetConfig+0x40>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a40      	ldr	r2, [pc, #256]	@ (800517c <TIM_Base_SetConfig+0x13c>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d108      	bne.n	8005092 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005086:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	4313      	orrs	r3, r2
 8005090:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a35      	ldr	r2, [pc, #212]	@ (800516c <TIM_Base_SetConfig+0x12c>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d02b      	beq.n	80050f2 <TIM_Base_SetConfig+0xb2>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050a0:	d027      	beq.n	80050f2 <TIM_Base_SetConfig+0xb2>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a32      	ldr	r2, [pc, #200]	@ (8005170 <TIM_Base_SetConfig+0x130>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d023      	beq.n	80050f2 <TIM_Base_SetConfig+0xb2>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a31      	ldr	r2, [pc, #196]	@ (8005174 <TIM_Base_SetConfig+0x134>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d01f      	beq.n	80050f2 <TIM_Base_SetConfig+0xb2>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a30      	ldr	r2, [pc, #192]	@ (8005178 <TIM_Base_SetConfig+0x138>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d01b      	beq.n	80050f2 <TIM_Base_SetConfig+0xb2>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a2f      	ldr	r2, [pc, #188]	@ (800517c <TIM_Base_SetConfig+0x13c>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d017      	beq.n	80050f2 <TIM_Base_SetConfig+0xb2>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a2e      	ldr	r2, [pc, #184]	@ (8005180 <TIM_Base_SetConfig+0x140>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d013      	beq.n	80050f2 <TIM_Base_SetConfig+0xb2>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a2d      	ldr	r2, [pc, #180]	@ (8005184 <TIM_Base_SetConfig+0x144>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d00f      	beq.n	80050f2 <TIM_Base_SetConfig+0xb2>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a2c      	ldr	r2, [pc, #176]	@ (8005188 <TIM_Base_SetConfig+0x148>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d00b      	beq.n	80050f2 <TIM_Base_SetConfig+0xb2>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a2b      	ldr	r2, [pc, #172]	@ (800518c <TIM_Base_SetConfig+0x14c>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d007      	beq.n	80050f2 <TIM_Base_SetConfig+0xb2>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a2a      	ldr	r2, [pc, #168]	@ (8005190 <TIM_Base_SetConfig+0x150>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d003      	beq.n	80050f2 <TIM_Base_SetConfig+0xb2>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a29      	ldr	r2, [pc, #164]	@ (8005194 <TIM_Base_SetConfig+0x154>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d108      	bne.n	8005104 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	4313      	orrs	r3, r2
 8005102:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	4313      	orrs	r3, r2
 8005110:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	689a      	ldr	r2, [r3, #8]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a10      	ldr	r2, [pc, #64]	@ (800516c <TIM_Base_SetConfig+0x12c>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d003      	beq.n	8005138 <TIM_Base_SetConfig+0xf8>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a12      	ldr	r2, [pc, #72]	@ (800517c <TIM_Base_SetConfig+0x13c>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d103      	bne.n	8005140 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	691a      	ldr	r2, [r3, #16]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b01      	cmp	r3, #1
 8005150:	d105      	bne.n	800515e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	f023 0201 	bic.w	r2, r3, #1
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	611a      	str	r2, [r3, #16]
  }
}
 800515e:	bf00      	nop
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	40010000 	.word	0x40010000
 8005170:	40000400 	.word	0x40000400
 8005174:	40000800 	.word	0x40000800
 8005178:	40000c00 	.word	0x40000c00
 800517c:	40010400 	.word	0x40010400
 8005180:	40014000 	.word	0x40014000
 8005184:	40014400 	.word	0x40014400
 8005188:	40014800 	.word	0x40014800
 800518c:	40001800 	.word	0x40001800
 8005190:	40001c00 	.word	0x40001c00
 8005194:	40002000 	.word	0x40002000

08005198 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d101      	bne.n	80051b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051ac:	2302      	movs	r3, #2
 80051ae:	e05a      	b.n	8005266 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2202      	movs	r2, #2
 80051bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	4313      	orrs	r3, r2
 80051e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a21      	ldr	r2, [pc, #132]	@ (8005274 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d022      	beq.n	800523a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051fc:	d01d      	beq.n	800523a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a1d      	ldr	r2, [pc, #116]	@ (8005278 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d018      	beq.n	800523a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a1b      	ldr	r2, [pc, #108]	@ (800527c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d013      	beq.n	800523a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a1a      	ldr	r2, [pc, #104]	@ (8005280 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d00e      	beq.n	800523a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a18      	ldr	r2, [pc, #96]	@ (8005284 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d009      	beq.n	800523a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a17      	ldr	r2, [pc, #92]	@ (8005288 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d004      	beq.n	800523a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a15      	ldr	r2, [pc, #84]	@ (800528c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d10c      	bne.n	8005254 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005240:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	4313      	orrs	r3, r2
 800524a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3714      	adds	r7, #20
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	40010000 	.word	0x40010000
 8005278:	40000400 	.word	0x40000400
 800527c:	40000800 	.word	0x40000800
 8005280:	40000c00 	.word	0x40000c00
 8005284:	40010400 	.word	0x40010400
 8005288:	40014000 	.word	0x40014000
 800528c:	40001800 	.word	0x40001800

08005290 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e042      	b.n	8005328 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d106      	bne.n	80052bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7fc fcac 	bl	8001c14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2224      	movs	r2, #36	@ 0x24
 80052c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68da      	ldr	r2, [r3, #12]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80052d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 fcdb 	bl	8005c90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	691a      	ldr	r2, [r3, #16]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80052e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	695a      	ldr	r2, [r3, #20]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80052f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68da      	ldr	r2, [r3, #12]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005308:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2220      	movs	r2, #32
 8005314:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2220      	movs	r2, #32
 800531c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3708      	adds	r7, #8
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	4613      	mov	r3, r2
 800533c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b20      	cmp	r3, #32
 8005348:	d112      	bne.n	8005370 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d002      	beq.n	8005356 <HAL_UART_Receive_IT+0x26>
 8005350:	88fb      	ldrh	r3, [r7, #6]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d101      	bne.n	800535a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e00b      	b.n	8005372 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005360:	88fb      	ldrh	r3, [r7, #6]
 8005362:	461a      	mov	r2, r3
 8005364:	68b9      	ldr	r1, [r7, #8]
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f000 faba 	bl	80058e0 <UART_Start_Receive_IT>
 800536c:	4603      	mov	r3, r0
 800536e:	e000      	b.n	8005372 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005370:	2302      	movs	r3, #2
  }
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
	...

0800537c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b0ba      	sub	sp, #232	@ 0xe8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80053a2:	2300      	movs	r3, #0
 80053a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80053a8:	2300      	movs	r3, #0
 80053aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80053ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053b2:	f003 030f 	and.w	r3, r3, #15
 80053b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80053ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10f      	bne.n	80053e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053c6:	f003 0320 	and.w	r3, r3, #32
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d009      	beq.n	80053e2 <HAL_UART_IRQHandler+0x66>
 80053ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053d2:	f003 0320 	and.w	r3, r3, #32
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 fb99 	bl	8005b12 <UART_Receive_IT>
      return;
 80053e0:	e25b      	b.n	800589a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80053e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f000 80de 	beq.w	80055a8 <HAL_UART_IRQHandler+0x22c>
 80053ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d106      	bne.n	8005406 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80053f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053fc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005400:	2b00      	cmp	r3, #0
 8005402:	f000 80d1 	beq.w	80055a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00b      	beq.n	800542a <HAL_UART_IRQHandler+0xae>
 8005412:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005416:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800541a:	2b00      	cmp	r3, #0
 800541c:	d005      	beq.n	800542a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005422:	f043 0201 	orr.w	r2, r3, #1
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800542a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800542e:	f003 0304 	and.w	r3, r3, #4
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00b      	beq.n	800544e <HAL_UART_IRQHandler+0xd2>
 8005436:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b00      	cmp	r3, #0
 8005440:	d005      	beq.n	800544e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005446:	f043 0202 	orr.w	r2, r3, #2
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800544e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00b      	beq.n	8005472 <HAL_UART_IRQHandler+0xf6>
 800545a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b00      	cmp	r3, #0
 8005464:	d005      	beq.n	8005472 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800546a:	f043 0204 	orr.w	r2, r3, #4
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005476:	f003 0308 	and.w	r3, r3, #8
 800547a:	2b00      	cmp	r3, #0
 800547c:	d011      	beq.n	80054a2 <HAL_UART_IRQHandler+0x126>
 800547e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005482:	f003 0320 	and.w	r3, r3, #32
 8005486:	2b00      	cmp	r3, #0
 8005488:	d105      	bne.n	8005496 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800548a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	2b00      	cmp	r3, #0
 8005494:	d005      	beq.n	80054a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800549a:	f043 0208 	orr.w	r2, r3, #8
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f000 81f2 	beq.w	8005890 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054b0:	f003 0320 	and.w	r3, r3, #32
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d008      	beq.n	80054ca <HAL_UART_IRQHandler+0x14e>
 80054b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054bc:	f003 0320 	and.w	r3, r3, #32
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d002      	beq.n	80054ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 fb24 	bl	8005b12 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054d4:	2b40      	cmp	r3, #64	@ 0x40
 80054d6:	bf0c      	ite	eq
 80054d8:	2301      	moveq	r3, #1
 80054da:	2300      	movne	r3, #0
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054e6:	f003 0308 	and.w	r3, r3, #8
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d103      	bne.n	80054f6 <HAL_UART_IRQHandler+0x17a>
 80054ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d04f      	beq.n	8005596 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 fa2c 	bl	8005954 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005506:	2b40      	cmp	r3, #64	@ 0x40
 8005508:	d141      	bne.n	800558e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	3314      	adds	r3, #20
 8005510:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005514:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005518:	e853 3f00 	ldrex	r3, [r3]
 800551c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005520:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005524:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005528:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	3314      	adds	r3, #20
 8005532:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005536:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800553a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005542:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005546:	e841 2300 	strex	r3, r2, [r1]
 800554a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800554e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1d9      	bne.n	800550a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800555a:	2b00      	cmp	r3, #0
 800555c:	d013      	beq.n	8005586 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005562:	4a7e      	ldr	r2, [pc, #504]	@ (800575c <HAL_UART_IRQHandler+0x3e0>)
 8005564:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800556a:	4618      	mov	r0, r3
 800556c:	f7fd fdfe 	bl	800316c <HAL_DMA_Abort_IT>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d016      	beq.n	80055a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800557a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005580:	4610      	mov	r0, r2
 8005582:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005584:	e00e      	b.n	80055a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f994 	bl	80058b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800558c:	e00a      	b.n	80055a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f990 	bl	80058b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005594:	e006      	b.n	80055a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f98c 	bl	80058b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80055a2:	e175      	b.n	8005890 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a4:	bf00      	nop
    return;
 80055a6:	e173      	b.n	8005890 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	f040 814f 	bne.w	8005850 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80055b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055b6:	f003 0310 	and.w	r3, r3, #16
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	f000 8148 	beq.w	8005850 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80055c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055c4:	f003 0310 	and.w	r3, r3, #16
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f000 8141 	beq.w	8005850 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055ce:	2300      	movs	r3, #0
 80055d0:	60bb      	str	r3, [r7, #8]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	60bb      	str	r3, [r7, #8]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	60bb      	str	r3, [r7, #8]
 80055e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ee:	2b40      	cmp	r3, #64	@ 0x40
 80055f0:	f040 80b6 	bne.w	8005760 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005600:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005604:	2b00      	cmp	r3, #0
 8005606:	f000 8145 	beq.w	8005894 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800560e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005612:	429a      	cmp	r2, r3
 8005614:	f080 813e 	bcs.w	8005894 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800561e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005624:	69db      	ldr	r3, [r3, #28]
 8005626:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800562a:	f000 8088 	beq.w	800573e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	330c      	adds	r3, #12
 8005634:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005638:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800563c:	e853 3f00 	ldrex	r3, [r3]
 8005640:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005644:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005648:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800564c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	330c      	adds	r3, #12
 8005656:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800565a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800565e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005662:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005666:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800566a:	e841 2300 	strex	r3, r2, [r1]
 800566e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005672:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1d9      	bne.n	800562e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	3314      	adds	r3, #20
 8005680:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005682:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005684:	e853 3f00 	ldrex	r3, [r3]
 8005688:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800568a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800568c:	f023 0301 	bic.w	r3, r3, #1
 8005690:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	3314      	adds	r3, #20
 800569a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800569e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80056a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80056a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80056aa:	e841 2300 	strex	r3, r2, [r1]
 80056ae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80056b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1e1      	bne.n	800567a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	3314      	adds	r3, #20
 80056bc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056c0:	e853 3f00 	ldrex	r3, [r3]
 80056c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80056c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3314      	adds	r3, #20
 80056d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80056da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80056dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056de:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80056e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80056e2:	e841 2300 	strex	r3, r2, [r1]
 80056e6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80056e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1e3      	bne.n	80056b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2220      	movs	r2, #32
 80056f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	330c      	adds	r3, #12
 8005702:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005704:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005706:	e853 3f00 	ldrex	r3, [r3]
 800570a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800570c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800570e:	f023 0310 	bic.w	r3, r3, #16
 8005712:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	330c      	adds	r3, #12
 800571c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005720:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005722:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005724:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005726:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005728:	e841 2300 	strex	r3, r2, [r1]
 800572c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800572e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1e3      	bne.n	80056fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005738:	4618      	mov	r0, r3
 800573a:	f7fd fca7 	bl	800308c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2202      	movs	r2, #2
 8005742:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800574c:	b29b      	uxth	r3, r3
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	b29b      	uxth	r3, r3
 8005752:	4619      	mov	r1, r3
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 f8b7 	bl	80058c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800575a:	e09b      	b.n	8005894 <HAL_UART_IRQHandler+0x518>
 800575c:	08005a1b 	.word	0x08005a1b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005768:	b29b      	uxth	r3, r3
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005774:	b29b      	uxth	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	f000 808e 	beq.w	8005898 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800577c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005780:	2b00      	cmp	r3, #0
 8005782:	f000 8089 	beq.w	8005898 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	330c      	adds	r3, #12
 800578c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005790:	e853 3f00 	ldrex	r3, [r3]
 8005794:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005798:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800579c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	330c      	adds	r3, #12
 80057a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80057aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80057ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80057b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057b2:	e841 2300 	strex	r3, r2, [r1]
 80057b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80057b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1e3      	bne.n	8005786 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	3314      	adds	r3, #20
 80057c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c8:	e853 3f00 	ldrex	r3, [r3]
 80057cc:	623b      	str	r3, [r7, #32]
   return(result);
 80057ce:	6a3b      	ldr	r3, [r7, #32]
 80057d0:	f023 0301 	bic.w	r3, r3, #1
 80057d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	3314      	adds	r3, #20
 80057de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80057e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80057e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057ea:	e841 2300 	strex	r3, r2, [r1]
 80057ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1e3      	bne.n	80057be <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2220      	movs	r2, #32
 80057fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	330c      	adds	r3, #12
 800580a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	e853 3f00 	ldrex	r3, [r3]
 8005812:	60fb      	str	r3, [r7, #12]
   return(result);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f023 0310 	bic.w	r3, r3, #16
 800581a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	330c      	adds	r3, #12
 8005824:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005828:	61fa      	str	r2, [r7, #28]
 800582a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582c:	69b9      	ldr	r1, [r7, #24]
 800582e:	69fa      	ldr	r2, [r7, #28]
 8005830:	e841 2300 	strex	r3, r2, [r1]
 8005834:	617b      	str	r3, [r7, #20]
   return(result);
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1e3      	bne.n	8005804 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2202      	movs	r2, #2
 8005840:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005842:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005846:	4619      	mov	r1, r3
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 f83d 	bl	80058c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800584e:	e023      	b.n	8005898 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005854:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005858:	2b00      	cmp	r3, #0
 800585a:	d009      	beq.n	8005870 <HAL_UART_IRQHandler+0x4f4>
 800585c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005860:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005864:	2b00      	cmp	r3, #0
 8005866:	d003      	beq.n	8005870 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 f8ea 	bl	8005a42 <UART_Transmit_IT>
    return;
 800586e:	e014      	b.n	800589a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00e      	beq.n	800589a <HAL_UART_IRQHandler+0x51e>
 800587c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005884:	2b00      	cmp	r3, #0
 8005886:	d008      	beq.n	800589a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 f92a 	bl	8005ae2 <UART_EndTransmit_IT>
    return;
 800588e:	e004      	b.n	800589a <HAL_UART_IRQHandler+0x51e>
    return;
 8005890:	bf00      	nop
 8005892:	e002      	b.n	800589a <HAL_UART_IRQHandler+0x51e>
      return;
 8005894:	bf00      	nop
 8005896:	e000      	b.n	800589a <HAL_UART_IRQHandler+0x51e>
      return;
 8005898:	bf00      	nop
  }
}
 800589a:	37e8      	adds	r7, #232	@ 0xe8
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80058a8:	bf00      	nop
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80058bc:	bf00      	nop
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	460b      	mov	r3, r1
 80058d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	4613      	mov	r3, r2
 80058ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	88fa      	ldrh	r2, [r7, #6]
 80058f8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	88fa      	ldrh	r2, [r7, #6]
 80058fe:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2222      	movs	r2, #34	@ 0x22
 800590a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d007      	beq.n	8005926 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68da      	ldr	r2, [r3, #12]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005924:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	695a      	ldr	r2, [r3, #20]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f042 0201 	orr.w	r2, r2, #1
 8005934:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68da      	ldr	r2, [r3, #12]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f042 0220 	orr.w	r2, r2, #32
 8005944:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3714      	adds	r7, #20
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005954:	b480      	push	{r7}
 8005956:	b095      	sub	sp, #84	@ 0x54
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	330c      	adds	r3, #12
 8005962:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005966:	e853 3f00 	ldrex	r3, [r3]
 800596a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800596c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800596e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005972:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	330c      	adds	r3, #12
 800597a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800597c:	643a      	str	r2, [r7, #64]	@ 0x40
 800597e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005980:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005982:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005984:	e841 2300 	strex	r3, r2, [r1]
 8005988:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800598a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1e5      	bne.n	800595c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	3314      	adds	r3, #20
 8005996:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005998:	6a3b      	ldr	r3, [r7, #32]
 800599a:	e853 3f00 	ldrex	r3, [r3]
 800599e:	61fb      	str	r3, [r7, #28]
   return(result);
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	f023 0301 	bic.w	r3, r3, #1
 80059a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	3314      	adds	r3, #20
 80059ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059b8:	e841 2300 	strex	r3, r2, [r1]
 80059bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80059be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1e5      	bne.n	8005990 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d119      	bne.n	8005a00 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	330c      	adds	r3, #12
 80059d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	e853 3f00 	ldrex	r3, [r3]
 80059da:	60bb      	str	r3, [r7, #8]
   return(result);
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	f023 0310 	bic.w	r3, r3, #16
 80059e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	330c      	adds	r3, #12
 80059ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059ec:	61ba      	str	r2, [r7, #24]
 80059ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f0:	6979      	ldr	r1, [r7, #20]
 80059f2:	69ba      	ldr	r2, [r7, #24]
 80059f4:	e841 2300 	strex	r3, r2, [r1]
 80059f8:	613b      	str	r3, [r7, #16]
   return(result);
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1e5      	bne.n	80059cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2220      	movs	r2, #32
 8005a04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005a0e:	bf00      	nop
 8005a10:	3754      	adds	r7, #84	@ 0x54
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr

08005a1a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	b084      	sub	sp, #16
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f7ff ff3d 	bl	80058b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a3a:	bf00      	nop
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b085      	sub	sp, #20
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b21      	cmp	r3, #33	@ 0x21
 8005a54:	d13e      	bne.n	8005ad4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a5e:	d114      	bne.n	8005a8a <UART_Transmit_IT+0x48>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d110      	bne.n	8005a8a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a1b      	ldr	r3, [r3, #32]
 8005a6c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	881b      	ldrh	r3, [r3, #0]
 8005a72:	461a      	mov	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a7c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	1c9a      	adds	r2, r3, #2
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	621a      	str	r2, [r3, #32]
 8005a88:	e008      	b.n	8005a9c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	1c59      	adds	r1, r3, #1
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	6211      	str	r1, [r2, #32]
 8005a94:	781a      	ldrb	r2, [r3, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d10f      	bne.n	8005ad0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68da      	ldr	r2, [r3, #12]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005abe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68da      	ldr	r2, [r3, #12]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ace:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	e000      	b.n	8005ad6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ad4:	2302      	movs	r3, #2
  }
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3714      	adds	r7, #20
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr

08005ae2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b082      	sub	sp, #8
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68da      	ldr	r2, [r3, #12]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005af8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2220      	movs	r2, #32
 8005afe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7ff fecc 	bl	80058a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b08c      	sub	sp, #48	@ 0x30
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b22      	cmp	r3, #34	@ 0x22
 8005b24:	f040 80ae 	bne.w	8005c84 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b30:	d117      	bne.n	8005b62 <UART_Receive_IT+0x50>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d113      	bne.n	8005b62 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b42:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b54:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b5a:	1c9a      	adds	r2, r3, #2
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005b60:	e026      	b.n	8005bb0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b74:	d007      	beq.n	8005b86 <UART_Receive_IT+0x74>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10a      	bne.n	8005b94 <UART_Receive_IT+0x82>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d106      	bne.n	8005b94 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	b2da      	uxtb	r2, r3
 8005b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b90:	701a      	strb	r2, [r3, #0]
 8005b92:	e008      	b.n	8005ba6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ba0:	b2da      	uxtb	r2, r3
 8005ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ba4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005baa:	1c5a      	adds	r2, r3, #1
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d15d      	bne.n	8005c80 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68da      	ldr	r2, [r3, #12]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f022 0220 	bic.w	r2, r2, #32
 8005bd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68da      	ldr	r2, [r3, #12]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005be2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	695a      	ldr	r2, [r3, #20]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f022 0201 	bic.w	r2, r2, #1
 8005bf2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2220      	movs	r2, #32
 8005bf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d135      	bne.n	8005c76 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	330c      	adds	r3, #12
 8005c16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	e853 3f00 	ldrex	r3, [r3]
 8005c1e:	613b      	str	r3, [r7, #16]
   return(result);
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	f023 0310 	bic.w	r3, r3, #16
 8005c26:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	330c      	adds	r3, #12
 8005c2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c30:	623a      	str	r2, [r7, #32]
 8005c32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c34:	69f9      	ldr	r1, [r7, #28]
 8005c36:	6a3a      	ldr	r2, [r7, #32]
 8005c38:	e841 2300 	strex	r3, r2, [r1]
 8005c3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1e5      	bne.n	8005c10 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0310 	and.w	r3, r3, #16
 8005c4e:	2b10      	cmp	r3, #16
 8005c50:	d10a      	bne.n	8005c68 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c52:	2300      	movs	r3, #0
 8005c54:	60fb      	str	r3, [r7, #12]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	60fb      	str	r3, [r7, #12]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	60fb      	str	r3, [r7, #12]
 8005c66:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f7ff fe2a 	bl	80058c8 <HAL_UARTEx_RxEventCallback>
 8005c74:	e002      	b.n	8005c7c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f7fb fde0 	bl	800183c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	e002      	b.n	8005c86 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005c80:	2300      	movs	r3, #0
 8005c82:	e000      	b.n	8005c86 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005c84:	2302      	movs	r3, #2
  }
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3730      	adds	r7, #48	@ 0x30
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
	...

08005c90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c94:	b0c0      	sub	sp, #256	@ 0x100
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cac:	68d9      	ldr	r1, [r3, #12]
 8005cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	ea40 0301 	orr.w	r3, r0, r1
 8005cb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cbe:	689a      	ldr	r2, [r3, #8]
 8005cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	431a      	orrs	r2, r3
 8005cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	431a      	orrs	r2, r3
 8005cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005ce8:	f021 010c 	bic.w	r1, r1, #12
 8005cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005cf6:	430b      	orrs	r3, r1
 8005cf8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d0a:	6999      	ldr	r1, [r3, #24]
 8005d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	ea40 0301 	orr.w	r3, r0, r1
 8005d16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	4b8f      	ldr	r3, [pc, #572]	@ (8005f5c <UART_SetConfig+0x2cc>)
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d005      	beq.n	8005d30 <UART_SetConfig+0xa0>
 8005d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	4b8d      	ldr	r3, [pc, #564]	@ (8005f60 <UART_SetConfig+0x2d0>)
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d104      	bne.n	8005d3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d30:	f7fe f8ba 	bl	8003ea8 <HAL_RCC_GetPCLK2Freq>
 8005d34:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005d38:	e003      	b.n	8005d42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d3a:	f7fe f8a1 	bl	8003e80 <HAL_RCC_GetPCLK1Freq>
 8005d3e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d46:	69db      	ldr	r3, [r3, #28]
 8005d48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d4c:	f040 810c 	bne.w	8005f68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d54:	2200      	movs	r2, #0
 8005d56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005d5a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005d5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005d62:	4622      	mov	r2, r4
 8005d64:	462b      	mov	r3, r5
 8005d66:	1891      	adds	r1, r2, r2
 8005d68:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005d6a:	415b      	adcs	r3, r3
 8005d6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005d72:	4621      	mov	r1, r4
 8005d74:	eb12 0801 	adds.w	r8, r2, r1
 8005d78:	4629      	mov	r1, r5
 8005d7a:	eb43 0901 	adc.w	r9, r3, r1
 8005d7e:	f04f 0200 	mov.w	r2, #0
 8005d82:	f04f 0300 	mov.w	r3, #0
 8005d86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d92:	4690      	mov	r8, r2
 8005d94:	4699      	mov	r9, r3
 8005d96:	4623      	mov	r3, r4
 8005d98:	eb18 0303 	adds.w	r3, r8, r3
 8005d9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005da0:	462b      	mov	r3, r5
 8005da2:	eb49 0303 	adc.w	r3, r9, r3
 8005da6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005db6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005dba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	18db      	adds	r3, r3, r3
 8005dc2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	eb42 0303 	adc.w	r3, r2, r3
 8005dca:	657b      	str	r3, [r7, #84]	@ 0x54
 8005dcc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005dd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005dd4:	f7fa fea4 	bl	8000b20 <__aeabi_uldivmod>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	460b      	mov	r3, r1
 8005ddc:	4b61      	ldr	r3, [pc, #388]	@ (8005f64 <UART_SetConfig+0x2d4>)
 8005dde:	fba3 2302 	umull	r2, r3, r3, r2
 8005de2:	095b      	lsrs	r3, r3, #5
 8005de4:	011c      	lsls	r4, r3, #4
 8005de6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dea:	2200      	movs	r2, #0
 8005dec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005df0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005df4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005df8:	4642      	mov	r2, r8
 8005dfa:	464b      	mov	r3, r9
 8005dfc:	1891      	adds	r1, r2, r2
 8005dfe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005e00:	415b      	adcs	r3, r3
 8005e02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005e08:	4641      	mov	r1, r8
 8005e0a:	eb12 0a01 	adds.w	sl, r2, r1
 8005e0e:	4649      	mov	r1, r9
 8005e10:	eb43 0b01 	adc.w	fp, r3, r1
 8005e14:	f04f 0200 	mov.w	r2, #0
 8005e18:	f04f 0300 	mov.w	r3, #0
 8005e1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005e20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005e24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e28:	4692      	mov	sl, r2
 8005e2a:	469b      	mov	fp, r3
 8005e2c:	4643      	mov	r3, r8
 8005e2e:	eb1a 0303 	adds.w	r3, sl, r3
 8005e32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e36:	464b      	mov	r3, r9
 8005e38:	eb4b 0303 	adc.w	r3, fp, r3
 8005e3c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e4c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005e50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005e54:	460b      	mov	r3, r1
 8005e56:	18db      	adds	r3, r3, r3
 8005e58:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	eb42 0303 	adc.w	r3, r2, r3
 8005e60:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005e66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005e6a:	f7fa fe59 	bl	8000b20 <__aeabi_uldivmod>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	460b      	mov	r3, r1
 8005e72:	4611      	mov	r1, r2
 8005e74:	4b3b      	ldr	r3, [pc, #236]	@ (8005f64 <UART_SetConfig+0x2d4>)
 8005e76:	fba3 2301 	umull	r2, r3, r3, r1
 8005e7a:	095b      	lsrs	r3, r3, #5
 8005e7c:	2264      	movs	r2, #100	@ 0x64
 8005e7e:	fb02 f303 	mul.w	r3, r2, r3
 8005e82:	1acb      	subs	r3, r1, r3
 8005e84:	00db      	lsls	r3, r3, #3
 8005e86:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005e8a:	4b36      	ldr	r3, [pc, #216]	@ (8005f64 <UART_SetConfig+0x2d4>)
 8005e8c:	fba3 2302 	umull	r2, r3, r3, r2
 8005e90:	095b      	lsrs	r3, r3, #5
 8005e92:	005b      	lsls	r3, r3, #1
 8005e94:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005e98:	441c      	add	r4, r3
 8005e9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ea4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005ea8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005eac:	4642      	mov	r2, r8
 8005eae:	464b      	mov	r3, r9
 8005eb0:	1891      	adds	r1, r2, r2
 8005eb2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005eb4:	415b      	adcs	r3, r3
 8005eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005eb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005ebc:	4641      	mov	r1, r8
 8005ebe:	1851      	adds	r1, r2, r1
 8005ec0:	6339      	str	r1, [r7, #48]	@ 0x30
 8005ec2:	4649      	mov	r1, r9
 8005ec4:	414b      	adcs	r3, r1
 8005ec6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ec8:	f04f 0200 	mov.w	r2, #0
 8005ecc:	f04f 0300 	mov.w	r3, #0
 8005ed0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005ed4:	4659      	mov	r1, fp
 8005ed6:	00cb      	lsls	r3, r1, #3
 8005ed8:	4651      	mov	r1, sl
 8005eda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ede:	4651      	mov	r1, sl
 8005ee0:	00ca      	lsls	r2, r1, #3
 8005ee2:	4610      	mov	r0, r2
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	4642      	mov	r2, r8
 8005eea:	189b      	adds	r3, r3, r2
 8005eec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ef0:	464b      	mov	r3, r9
 8005ef2:	460a      	mov	r2, r1
 8005ef4:	eb42 0303 	adc.w	r3, r2, r3
 8005ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005f08:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005f0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005f10:	460b      	mov	r3, r1
 8005f12:	18db      	adds	r3, r3, r3
 8005f14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f16:	4613      	mov	r3, r2
 8005f18:	eb42 0303 	adc.w	r3, r2, r3
 8005f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005f22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005f26:	f7fa fdfb 	bl	8000b20 <__aeabi_uldivmod>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8005f64 <UART_SetConfig+0x2d4>)
 8005f30:	fba3 1302 	umull	r1, r3, r3, r2
 8005f34:	095b      	lsrs	r3, r3, #5
 8005f36:	2164      	movs	r1, #100	@ 0x64
 8005f38:	fb01 f303 	mul.w	r3, r1, r3
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	00db      	lsls	r3, r3, #3
 8005f40:	3332      	adds	r3, #50	@ 0x32
 8005f42:	4a08      	ldr	r2, [pc, #32]	@ (8005f64 <UART_SetConfig+0x2d4>)
 8005f44:	fba2 2303 	umull	r2, r3, r2, r3
 8005f48:	095b      	lsrs	r3, r3, #5
 8005f4a:	f003 0207 	and.w	r2, r3, #7
 8005f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4422      	add	r2, r4
 8005f56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f58:	e106      	b.n	8006168 <UART_SetConfig+0x4d8>
 8005f5a:	bf00      	nop
 8005f5c:	40011000 	.word	0x40011000
 8005f60:	40011400 	.word	0x40011400
 8005f64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005f72:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005f76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005f7a:	4642      	mov	r2, r8
 8005f7c:	464b      	mov	r3, r9
 8005f7e:	1891      	adds	r1, r2, r2
 8005f80:	6239      	str	r1, [r7, #32]
 8005f82:	415b      	adcs	r3, r3
 8005f84:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f8a:	4641      	mov	r1, r8
 8005f8c:	1854      	adds	r4, r2, r1
 8005f8e:	4649      	mov	r1, r9
 8005f90:	eb43 0501 	adc.w	r5, r3, r1
 8005f94:	f04f 0200 	mov.w	r2, #0
 8005f98:	f04f 0300 	mov.w	r3, #0
 8005f9c:	00eb      	lsls	r3, r5, #3
 8005f9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005fa2:	00e2      	lsls	r2, r4, #3
 8005fa4:	4614      	mov	r4, r2
 8005fa6:	461d      	mov	r5, r3
 8005fa8:	4643      	mov	r3, r8
 8005faa:	18e3      	adds	r3, r4, r3
 8005fac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005fb0:	464b      	mov	r3, r9
 8005fb2:	eb45 0303 	adc.w	r3, r5, r3
 8005fb6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005fc6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005fca:	f04f 0200 	mov.w	r2, #0
 8005fce:	f04f 0300 	mov.w	r3, #0
 8005fd2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005fd6:	4629      	mov	r1, r5
 8005fd8:	008b      	lsls	r3, r1, #2
 8005fda:	4621      	mov	r1, r4
 8005fdc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fe0:	4621      	mov	r1, r4
 8005fe2:	008a      	lsls	r2, r1, #2
 8005fe4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005fe8:	f7fa fd9a 	bl	8000b20 <__aeabi_uldivmod>
 8005fec:	4602      	mov	r2, r0
 8005fee:	460b      	mov	r3, r1
 8005ff0:	4b60      	ldr	r3, [pc, #384]	@ (8006174 <UART_SetConfig+0x4e4>)
 8005ff2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ff6:	095b      	lsrs	r3, r3, #5
 8005ff8:	011c      	lsls	r4, r3, #4
 8005ffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ffe:	2200      	movs	r2, #0
 8006000:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006004:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006008:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800600c:	4642      	mov	r2, r8
 800600e:	464b      	mov	r3, r9
 8006010:	1891      	adds	r1, r2, r2
 8006012:	61b9      	str	r1, [r7, #24]
 8006014:	415b      	adcs	r3, r3
 8006016:	61fb      	str	r3, [r7, #28]
 8006018:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800601c:	4641      	mov	r1, r8
 800601e:	1851      	adds	r1, r2, r1
 8006020:	6139      	str	r1, [r7, #16]
 8006022:	4649      	mov	r1, r9
 8006024:	414b      	adcs	r3, r1
 8006026:	617b      	str	r3, [r7, #20]
 8006028:	f04f 0200 	mov.w	r2, #0
 800602c:	f04f 0300 	mov.w	r3, #0
 8006030:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006034:	4659      	mov	r1, fp
 8006036:	00cb      	lsls	r3, r1, #3
 8006038:	4651      	mov	r1, sl
 800603a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800603e:	4651      	mov	r1, sl
 8006040:	00ca      	lsls	r2, r1, #3
 8006042:	4610      	mov	r0, r2
 8006044:	4619      	mov	r1, r3
 8006046:	4603      	mov	r3, r0
 8006048:	4642      	mov	r2, r8
 800604a:	189b      	adds	r3, r3, r2
 800604c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006050:	464b      	mov	r3, r9
 8006052:	460a      	mov	r2, r1
 8006054:	eb42 0303 	adc.w	r3, r2, r3
 8006058:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800605c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006066:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006068:	f04f 0200 	mov.w	r2, #0
 800606c:	f04f 0300 	mov.w	r3, #0
 8006070:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006074:	4649      	mov	r1, r9
 8006076:	008b      	lsls	r3, r1, #2
 8006078:	4641      	mov	r1, r8
 800607a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800607e:	4641      	mov	r1, r8
 8006080:	008a      	lsls	r2, r1, #2
 8006082:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006086:	f7fa fd4b 	bl	8000b20 <__aeabi_uldivmod>
 800608a:	4602      	mov	r2, r0
 800608c:	460b      	mov	r3, r1
 800608e:	4611      	mov	r1, r2
 8006090:	4b38      	ldr	r3, [pc, #224]	@ (8006174 <UART_SetConfig+0x4e4>)
 8006092:	fba3 2301 	umull	r2, r3, r3, r1
 8006096:	095b      	lsrs	r3, r3, #5
 8006098:	2264      	movs	r2, #100	@ 0x64
 800609a:	fb02 f303 	mul.w	r3, r2, r3
 800609e:	1acb      	subs	r3, r1, r3
 80060a0:	011b      	lsls	r3, r3, #4
 80060a2:	3332      	adds	r3, #50	@ 0x32
 80060a4:	4a33      	ldr	r2, [pc, #204]	@ (8006174 <UART_SetConfig+0x4e4>)
 80060a6:	fba2 2303 	umull	r2, r3, r2, r3
 80060aa:	095b      	lsrs	r3, r3, #5
 80060ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80060b0:	441c      	add	r4, r3
 80060b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060b6:	2200      	movs	r2, #0
 80060b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80060ba:	677a      	str	r2, [r7, #116]	@ 0x74
 80060bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80060c0:	4642      	mov	r2, r8
 80060c2:	464b      	mov	r3, r9
 80060c4:	1891      	adds	r1, r2, r2
 80060c6:	60b9      	str	r1, [r7, #8]
 80060c8:	415b      	adcs	r3, r3
 80060ca:	60fb      	str	r3, [r7, #12]
 80060cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060d0:	4641      	mov	r1, r8
 80060d2:	1851      	adds	r1, r2, r1
 80060d4:	6039      	str	r1, [r7, #0]
 80060d6:	4649      	mov	r1, r9
 80060d8:	414b      	adcs	r3, r1
 80060da:	607b      	str	r3, [r7, #4]
 80060dc:	f04f 0200 	mov.w	r2, #0
 80060e0:	f04f 0300 	mov.w	r3, #0
 80060e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80060e8:	4659      	mov	r1, fp
 80060ea:	00cb      	lsls	r3, r1, #3
 80060ec:	4651      	mov	r1, sl
 80060ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060f2:	4651      	mov	r1, sl
 80060f4:	00ca      	lsls	r2, r1, #3
 80060f6:	4610      	mov	r0, r2
 80060f8:	4619      	mov	r1, r3
 80060fa:	4603      	mov	r3, r0
 80060fc:	4642      	mov	r2, r8
 80060fe:	189b      	adds	r3, r3, r2
 8006100:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006102:	464b      	mov	r3, r9
 8006104:	460a      	mov	r2, r1
 8006106:	eb42 0303 	adc.w	r3, r2, r3
 800610a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800610c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	663b      	str	r3, [r7, #96]	@ 0x60
 8006116:	667a      	str	r2, [r7, #100]	@ 0x64
 8006118:	f04f 0200 	mov.w	r2, #0
 800611c:	f04f 0300 	mov.w	r3, #0
 8006120:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006124:	4649      	mov	r1, r9
 8006126:	008b      	lsls	r3, r1, #2
 8006128:	4641      	mov	r1, r8
 800612a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800612e:	4641      	mov	r1, r8
 8006130:	008a      	lsls	r2, r1, #2
 8006132:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006136:	f7fa fcf3 	bl	8000b20 <__aeabi_uldivmod>
 800613a:	4602      	mov	r2, r0
 800613c:	460b      	mov	r3, r1
 800613e:	4b0d      	ldr	r3, [pc, #52]	@ (8006174 <UART_SetConfig+0x4e4>)
 8006140:	fba3 1302 	umull	r1, r3, r3, r2
 8006144:	095b      	lsrs	r3, r3, #5
 8006146:	2164      	movs	r1, #100	@ 0x64
 8006148:	fb01 f303 	mul.w	r3, r1, r3
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	011b      	lsls	r3, r3, #4
 8006150:	3332      	adds	r3, #50	@ 0x32
 8006152:	4a08      	ldr	r2, [pc, #32]	@ (8006174 <UART_SetConfig+0x4e4>)
 8006154:	fba2 2303 	umull	r2, r3, r2, r3
 8006158:	095b      	lsrs	r3, r3, #5
 800615a:	f003 020f 	and.w	r2, r3, #15
 800615e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4422      	add	r2, r4
 8006166:	609a      	str	r2, [r3, #8]
}
 8006168:	bf00      	nop
 800616a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800616e:	46bd      	mov	sp, r7
 8006170:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006174:	51eb851f 	.word	0x51eb851f

08006178 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006178:	b084      	sub	sp, #16
 800617a:	b580      	push	{r7, lr}
 800617c:	b084      	sub	sp, #16
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	f107 001c 	add.w	r0, r7, #28
 8006186:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800618a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800618e:	2b01      	cmp	r3, #1
 8006190:	d123      	bne.n	80061da <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006196:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80061a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80061ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d105      	bne.n	80061ce <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 fa9a 	bl	8006708 <USB_CoreReset>
 80061d4:	4603      	mov	r3, r0
 80061d6:	73fb      	strb	r3, [r7, #15]
 80061d8:	e01b      	b.n	8006212 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 fa8e 	bl	8006708 <USB_CoreReset>
 80061ec:	4603      	mov	r3, r0
 80061ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80061f0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d106      	bne.n	8006206 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061fc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	639a      	str	r2, [r3, #56]	@ 0x38
 8006204:	e005      	b.n	8006212 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800620a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006212:	7fbb      	ldrb	r3, [r7, #30]
 8006214:	2b01      	cmp	r3, #1
 8006216:	d10b      	bne.n	8006230 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	f043 0206 	orr.w	r2, r3, #6
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f043 0220 	orr.w	r2, r3, #32
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006230:	7bfb      	ldrb	r3, [r7, #15]
}
 8006232:	4618      	mov	r0, r3
 8006234:	3710      	adds	r7, #16
 8006236:	46bd      	mov	sp, r7
 8006238:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800623c:	b004      	add	sp, #16
 800623e:	4770      	bx	lr

08006240 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	f023 0201 	bic.w	r2, r3, #1
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	370c      	adds	r7, #12
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b084      	sub	sp, #16
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
 800626a:	460b      	mov	r3, r1
 800626c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800626e:	2300      	movs	r3, #0
 8006270:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800627e:	78fb      	ldrb	r3, [r7, #3]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d115      	bne.n	80062b0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006290:	200a      	movs	r0, #10
 8006292:	f7fb fec1 	bl	8002018 <HAL_Delay>
      ms += 10U;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	330a      	adds	r3, #10
 800629a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 fa25 	bl	80066ec <USB_GetMode>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d01e      	beq.n	80062e6 <USB_SetCurrentMode+0x84>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2bc7      	cmp	r3, #199	@ 0xc7
 80062ac:	d9f0      	bls.n	8006290 <USB_SetCurrentMode+0x2e>
 80062ae:	e01a      	b.n	80062e6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80062b0:	78fb      	ldrb	r3, [r7, #3]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d115      	bne.n	80062e2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80062c2:	200a      	movs	r0, #10
 80062c4:	f7fb fea8 	bl	8002018 <HAL_Delay>
      ms += 10U;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	330a      	adds	r3, #10
 80062cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 fa0c 	bl	80066ec <USB_GetMode>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d005      	beq.n	80062e6 <USB_SetCurrentMode+0x84>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2bc7      	cmp	r3, #199	@ 0xc7
 80062de:	d9f0      	bls.n	80062c2 <USB_SetCurrentMode+0x60>
 80062e0:	e001      	b.n	80062e6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e005      	b.n	80062f2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2bc8      	cmp	r3, #200	@ 0xc8
 80062ea:	d101      	bne.n	80062f0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e000      	b.n	80062f2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
	...

080062fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80062fc:	b084      	sub	sp, #16
 80062fe:	b580      	push	{r7, lr}
 8006300:	b086      	sub	sp, #24
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
 8006306:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800630a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800630e:	2300      	movs	r3, #0
 8006310:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006316:	2300      	movs	r3, #0
 8006318:	613b      	str	r3, [r7, #16]
 800631a:	e009      	b.n	8006330 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	3340      	adds	r3, #64	@ 0x40
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	4413      	add	r3, r2
 8006326:	2200      	movs	r2, #0
 8006328:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	3301      	adds	r3, #1
 800632e:	613b      	str	r3, [r7, #16]
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	2b0e      	cmp	r3, #14
 8006334:	d9f2      	bls.n	800631c <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006336:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800633a:	2b00      	cmp	r3, #0
 800633c:	d11c      	bne.n	8006378 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800634c:	f043 0302 	orr.w	r3, r3, #2
 8006350:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006356:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	601a      	str	r2, [r3, #0]
 8006376:	e005      	b.n	8006384 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800637c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800638a:	461a      	mov	r2, r3
 800638c:	2300      	movs	r3, #0
 800638e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006390:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006394:	2b01      	cmp	r3, #1
 8006396:	d10d      	bne.n	80063b4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006398:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800639c:	2b00      	cmp	r3, #0
 800639e:	d104      	bne.n	80063aa <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80063a0:	2100      	movs	r1, #0
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f968 	bl	8006678 <USB_SetDevSpeed>
 80063a8:	e008      	b.n	80063bc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80063aa:	2101      	movs	r1, #1
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 f963 	bl	8006678 <USB_SetDevSpeed>
 80063b2:	e003      	b.n	80063bc <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80063b4:	2103      	movs	r1, #3
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 f95e 	bl	8006678 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80063bc:	2110      	movs	r1, #16
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 f8fa 	bl	80065b8 <USB_FlushTxFifo>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d001      	beq.n	80063ce <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 f924 	bl	800661c <USB_FlushRxFifo>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d001      	beq.n	80063de <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063e4:	461a      	mov	r2, r3
 80063e6:	2300      	movs	r3, #0
 80063e8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063f0:	461a      	mov	r2, r3
 80063f2:	2300      	movs	r3, #0
 80063f4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063fc:	461a      	mov	r2, r3
 80063fe:	2300      	movs	r3, #0
 8006400:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006402:	2300      	movs	r3, #0
 8006404:	613b      	str	r3, [r7, #16]
 8006406:	e043      	b.n	8006490 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	015a      	lsls	r2, r3, #5
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	4413      	add	r3, r2
 8006410:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800641a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800641e:	d118      	bne.n	8006452 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d10a      	bne.n	800643c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	015a      	lsls	r2, r3, #5
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	4413      	add	r3, r2
 800642e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006432:	461a      	mov	r2, r3
 8006434:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006438:	6013      	str	r3, [r2, #0]
 800643a:	e013      	b.n	8006464 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	015a      	lsls	r2, r3, #5
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	4413      	add	r3, r2
 8006444:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006448:	461a      	mov	r2, r3
 800644a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800644e:	6013      	str	r3, [r2, #0]
 8006450:	e008      	b.n	8006464 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	015a      	lsls	r2, r3, #5
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	4413      	add	r3, r2
 800645a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800645e:	461a      	mov	r2, r3
 8006460:	2300      	movs	r3, #0
 8006462:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	015a      	lsls	r2, r3, #5
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	4413      	add	r3, r2
 800646c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006470:	461a      	mov	r2, r3
 8006472:	2300      	movs	r3, #0
 8006474:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	015a      	lsls	r2, r3, #5
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	4413      	add	r3, r2
 800647e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006482:	461a      	mov	r2, r3
 8006484:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006488:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	3301      	adds	r3, #1
 800648e:	613b      	str	r3, [r7, #16]
 8006490:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006494:	461a      	mov	r2, r3
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	4293      	cmp	r3, r2
 800649a:	d3b5      	bcc.n	8006408 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800649c:	2300      	movs	r3, #0
 800649e:	613b      	str	r3, [r7, #16]
 80064a0:	e043      	b.n	800652a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	015a      	lsls	r2, r3, #5
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	4413      	add	r3, r2
 80064aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80064b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064b8:	d118      	bne.n	80064ec <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10a      	bne.n	80064d6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	015a      	lsls	r2, r3, #5
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	4413      	add	r3, r2
 80064c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064cc:	461a      	mov	r2, r3
 80064ce:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80064d2:	6013      	str	r3, [r2, #0]
 80064d4:	e013      	b.n	80064fe <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	015a      	lsls	r2, r3, #5
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	4413      	add	r3, r2
 80064de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064e2:	461a      	mov	r2, r3
 80064e4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80064e8:	6013      	str	r3, [r2, #0]
 80064ea:	e008      	b.n	80064fe <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	015a      	lsls	r2, r3, #5
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	4413      	add	r3, r2
 80064f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064f8:	461a      	mov	r2, r3
 80064fa:	2300      	movs	r3, #0
 80064fc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	015a      	lsls	r2, r3, #5
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	4413      	add	r3, r2
 8006506:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800650a:	461a      	mov	r2, r3
 800650c:	2300      	movs	r3, #0
 800650e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	015a      	lsls	r2, r3, #5
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	4413      	add	r3, r2
 8006518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800651c:	461a      	mov	r2, r3
 800651e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006522:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	3301      	adds	r3, #1
 8006528:	613b      	str	r3, [r7, #16]
 800652a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800652e:	461a      	mov	r2, r3
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	4293      	cmp	r3, r2
 8006534:	d3b5      	bcc.n	80064a2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006544:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006548:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006556:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006558:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800655c:	2b00      	cmp	r3, #0
 800655e:	d105      	bne.n	800656c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	699b      	ldr	r3, [r3, #24]
 8006564:	f043 0210 	orr.w	r2, r3, #16
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	699a      	ldr	r2, [r3, #24]
 8006570:	4b10      	ldr	r3, [pc, #64]	@ (80065b4 <USB_DevInit+0x2b8>)
 8006572:	4313      	orrs	r3, r2
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006578:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800657c:	2b00      	cmp	r3, #0
 800657e:	d005      	beq.n	800658c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	f043 0208 	orr.w	r2, r3, #8
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800658c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006590:	2b01      	cmp	r3, #1
 8006592:	d107      	bne.n	80065a4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800659c:	f043 0304 	orr.w	r3, r3, #4
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80065a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3718      	adds	r7, #24
 80065aa:	46bd      	mov	sp, r7
 80065ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065b0:	b004      	add	sp, #16
 80065b2:	4770      	bx	lr
 80065b4:	803c3800 	.word	0x803c3800

080065b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80065c2:	2300      	movs	r3, #0
 80065c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	3301      	adds	r3, #1
 80065ca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80065d2:	d901      	bls.n	80065d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e01b      	b.n	8006610 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	daf2      	bge.n	80065c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80065e0:	2300      	movs	r3, #0
 80065e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	019b      	lsls	r3, r3, #6
 80065e8:	f043 0220 	orr.w	r2, r3, #32
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	3301      	adds	r3, #1
 80065f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80065fc:	d901      	bls.n	8006602 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e006      	b.n	8006610 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	f003 0320 	and.w	r3, r3, #32
 800660a:	2b20      	cmp	r3, #32
 800660c:	d0f0      	beq.n	80065f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3714      	adds	r7, #20
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006624:	2300      	movs	r3, #0
 8006626:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	3301      	adds	r3, #1
 800662c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006634:	d901      	bls.n	800663a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e018      	b.n	800666c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	2b00      	cmp	r3, #0
 8006640:	daf2      	bge.n	8006628 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006642:	2300      	movs	r3, #0
 8006644:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2210      	movs	r2, #16
 800664a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	3301      	adds	r3, #1
 8006650:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006658:	d901      	bls.n	800665e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e006      	b.n	800666c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	f003 0310 	and.w	r3, r3, #16
 8006666:	2b10      	cmp	r3, #16
 8006668:	d0f0      	beq.n	800664c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3714      	adds	r7, #20
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	460b      	mov	r3, r1
 8006682:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	78fb      	ldrb	r3, [r7, #3]
 8006692:	68f9      	ldr	r1, [r7, #12]
 8006694:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006698:	4313      	orrs	r3, r2
 800669a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3714      	adds	r7, #20
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr

080066aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80066aa:	b480      	push	{r7}
 80066ac:	b085      	sub	sp, #20
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80066c4:	f023 0303 	bic.w	r3, r3, #3
 80066c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066d8:	f043 0302 	orr.w	r3, r3, #2
 80066dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3714      	adds	r7, #20
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	695b      	ldr	r3, [r3, #20]
 80066f8:	f003 0301 	and.w	r3, r3, #1
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006710:	2300      	movs	r3, #0
 8006712:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	3301      	adds	r3, #1
 8006718:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006720:	d901      	bls.n	8006726 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e01b      	b.n	800675e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	2b00      	cmp	r3, #0
 800672c:	daf2      	bge.n	8006714 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800672e:	2300      	movs	r3, #0
 8006730:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	f043 0201 	orr.w	r2, r3, #1
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	3301      	adds	r3, #1
 8006742:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800674a:	d901      	bls.n	8006750 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800674c:	2303      	movs	r3, #3
 800674e:	e006      	b.n	800675e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	f003 0301 	and.w	r3, r3, #1
 8006758:	2b01      	cmp	r3, #1
 800675a:	d0f0      	beq.n	800673e <USB_CoreReset+0x36>

  return HAL_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3714      	adds	r7, #20
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
	...

0800676c <pow>:
 800676c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800676e:	ed2d 8b02 	vpush	{d8}
 8006772:	eeb0 8a40 	vmov.f32	s16, s0
 8006776:	eef0 8a60 	vmov.f32	s17, s1
 800677a:	ec55 4b11 	vmov	r4, r5, d1
 800677e:	f000 f977 	bl	8006a70 <__ieee754_pow>
 8006782:	4622      	mov	r2, r4
 8006784:	462b      	mov	r3, r5
 8006786:	4620      	mov	r0, r4
 8006788:	4629      	mov	r1, r5
 800678a:	ec57 6b10 	vmov	r6, r7, d0
 800678e:	f7fa f991 	bl	8000ab4 <__aeabi_dcmpun>
 8006792:	2800      	cmp	r0, #0
 8006794:	d13b      	bne.n	800680e <pow+0xa2>
 8006796:	ec51 0b18 	vmov	r0, r1, d8
 800679a:	2200      	movs	r2, #0
 800679c:	2300      	movs	r3, #0
 800679e:	f7fa f957 	bl	8000a50 <__aeabi_dcmpeq>
 80067a2:	b1b8      	cbz	r0, 80067d4 <pow+0x68>
 80067a4:	2200      	movs	r2, #0
 80067a6:	2300      	movs	r3, #0
 80067a8:	4620      	mov	r0, r4
 80067aa:	4629      	mov	r1, r5
 80067ac:	f7fa f950 	bl	8000a50 <__aeabi_dcmpeq>
 80067b0:	2800      	cmp	r0, #0
 80067b2:	d146      	bne.n	8006842 <pow+0xd6>
 80067b4:	ec45 4b10 	vmov	d0, r4, r5
 80067b8:	f000 f874 	bl	80068a4 <finite>
 80067bc:	b338      	cbz	r0, 800680e <pow+0xa2>
 80067be:	2200      	movs	r2, #0
 80067c0:	2300      	movs	r3, #0
 80067c2:	4620      	mov	r0, r4
 80067c4:	4629      	mov	r1, r5
 80067c6:	f7fa f94d 	bl	8000a64 <__aeabi_dcmplt>
 80067ca:	b300      	cbz	r0, 800680e <pow+0xa2>
 80067cc:	f000 ff60 	bl	8007690 <__errno>
 80067d0:	2322      	movs	r3, #34	@ 0x22
 80067d2:	e01b      	b.n	800680c <pow+0xa0>
 80067d4:	ec47 6b10 	vmov	d0, r6, r7
 80067d8:	f000 f864 	bl	80068a4 <finite>
 80067dc:	b9e0      	cbnz	r0, 8006818 <pow+0xac>
 80067de:	eeb0 0a48 	vmov.f32	s0, s16
 80067e2:	eef0 0a68 	vmov.f32	s1, s17
 80067e6:	f000 f85d 	bl	80068a4 <finite>
 80067ea:	b1a8      	cbz	r0, 8006818 <pow+0xac>
 80067ec:	ec45 4b10 	vmov	d0, r4, r5
 80067f0:	f000 f858 	bl	80068a4 <finite>
 80067f4:	b180      	cbz	r0, 8006818 <pow+0xac>
 80067f6:	4632      	mov	r2, r6
 80067f8:	463b      	mov	r3, r7
 80067fa:	4630      	mov	r0, r6
 80067fc:	4639      	mov	r1, r7
 80067fe:	f7fa f959 	bl	8000ab4 <__aeabi_dcmpun>
 8006802:	2800      	cmp	r0, #0
 8006804:	d0e2      	beq.n	80067cc <pow+0x60>
 8006806:	f000 ff43 	bl	8007690 <__errno>
 800680a:	2321      	movs	r3, #33	@ 0x21
 800680c:	6003      	str	r3, [r0, #0]
 800680e:	ecbd 8b02 	vpop	{d8}
 8006812:	ec47 6b10 	vmov	d0, r6, r7
 8006816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006818:	2200      	movs	r2, #0
 800681a:	2300      	movs	r3, #0
 800681c:	4630      	mov	r0, r6
 800681e:	4639      	mov	r1, r7
 8006820:	f7fa f916 	bl	8000a50 <__aeabi_dcmpeq>
 8006824:	2800      	cmp	r0, #0
 8006826:	d0f2      	beq.n	800680e <pow+0xa2>
 8006828:	eeb0 0a48 	vmov.f32	s0, s16
 800682c:	eef0 0a68 	vmov.f32	s1, s17
 8006830:	f000 f838 	bl	80068a4 <finite>
 8006834:	2800      	cmp	r0, #0
 8006836:	d0ea      	beq.n	800680e <pow+0xa2>
 8006838:	ec45 4b10 	vmov	d0, r4, r5
 800683c:	f000 f832 	bl	80068a4 <finite>
 8006840:	e7c3      	b.n	80067ca <pow+0x5e>
 8006842:	4f01      	ldr	r7, [pc, #4]	@ (8006848 <pow+0xdc>)
 8006844:	2600      	movs	r6, #0
 8006846:	e7e2      	b.n	800680e <pow+0xa2>
 8006848:	3ff00000 	.word	0x3ff00000

0800684c <sqrt>:
 800684c:	b538      	push	{r3, r4, r5, lr}
 800684e:	ed2d 8b02 	vpush	{d8}
 8006852:	ec55 4b10 	vmov	r4, r5, d0
 8006856:	f000 f831 	bl	80068bc <__ieee754_sqrt>
 800685a:	4622      	mov	r2, r4
 800685c:	462b      	mov	r3, r5
 800685e:	4620      	mov	r0, r4
 8006860:	4629      	mov	r1, r5
 8006862:	eeb0 8a40 	vmov.f32	s16, s0
 8006866:	eef0 8a60 	vmov.f32	s17, s1
 800686a:	f7fa f923 	bl	8000ab4 <__aeabi_dcmpun>
 800686e:	b990      	cbnz	r0, 8006896 <sqrt+0x4a>
 8006870:	2200      	movs	r2, #0
 8006872:	2300      	movs	r3, #0
 8006874:	4620      	mov	r0, r4
 8006876:	4629      	mov	r1, r5
 8006878:	f7fa f8f4 	bl	8000a64 <__aeabi_dcmplt>
 800687c:	b158      	cbz	r0, 8006896 <sqrt+0x4a>
 800687e:	f000 ff07 	bl	8007690 <__errno>
 8006882:	2321      	movs	r3, #33	@ 0x21
 8006884:	6003      	str	r3, [r0, #0]
 8006886:	2200      	movs	r2, #0
 8006888:	2300      	movs	r3, #0
 800688a:	4610      	mov	r0, r2
 800688c:	4619      	mov	r1, r3
 800688e:	f7f9 ffa1 	bl	80007d4 <__aeabi_ddiv>
 8006892:	ec41 0b18 	vmov	d8, r0, r1
 8006896:	eeb0 0a48 	vmov.f32	s0, s16
 800689a:	eef0 0a68 	vmov.f32	s1, s17
 800689e:	ecbd 8b02 	vpop	{d8}
 80068a2:	bd38      	pop	{r3, r4, r5, pc}

080068a4 <finite>:
 80068a4:	b082      	sub	sp, #8
 80068a6:	ed8d 0b00 	vstr	d0, [sp]
 80068aa:	9801      	ldr	r0, [sp, #4]
 80068ac:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80068b0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80068b4:	0fc0      	lsrs	r0, r0, #31
 80068b6:	b002      	add	sp, #8
 80068b8:	4770      	bx	lr
	...

080068bc <__ieee754_sqrt>:
 80068bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068c0:	4a68      	ldr	r2, [pc, #416]	@ (8006a64 <__ieee754_sqrt+0x1a8>)
 80068c2:	ec55 4b10 	vmov	r4, r5, d0
 80068c6:	43aa      	bics	r2, r5
 80068c8:	462b      	mov	r3, r5
 80068ca:	4621      	mov	r1, r4
 80068cc:	d110      	bne.n	80068f0 <__ieee754_sqrt+0x34>
 80068ce:	4622      	mov	r2, r4
 80068d0:	4620      	mov	r0, r4
 80068d2:	4629      	mov	r1, r5
 80068d4:	f7f9 fe54 	bl	8000580 <__aeabi_dmul>
 80068d8:	4602      	mov	r2, r0
 80068da:	460b      	mov	r3, r1
 80068dc:	4620      	mov	r0, r4
 80068de:	4629      	mov	r1, r5
 80068e0:	f7f9 fc98 	bl	8000214 <__adddf3>
 80068e4:	4604      	mov	r4, r0
 80068e6:	460d      	mov	r5, r1
 80068e8:	ec45 4b10 	vmov	d0, r4, r5
 80068ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068f0:	2d00      	cmp	r5, #0
 80068f2:	dc0e      	bgt.n	8006912 <__ieee754_sqrt+0x56>
 80068f4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80068f8:	4322      	orrs	r2, r4
 80068fa:	d0f5      	beq.n	80068e8 <__ieee754_sqrt+0x2c>
 80068fc:	b19d      	cbz	r5, 8006926 <__ieee754_sqrt+0x6a>
 80068fe:	4622      	mov	r2, r4
 8006900:	4620      	mov	r0, r4
 8006902:	4629      	mov	r1, r5
 8006904:	f7f9 fc84 	bl	8000210 <__aeabi_dsub>
 8006908:	4602      	mov	r2, r0
 800690a:	460b      	mov	r3, r1
 800690c:	f7f9 ff62 	bl	80007d4 <__aeabi_ddiv>
 8006910:	e7e8      	b.n	80068e4 <__ieee754_sqrt+0x28>
 8006912:	152a      	asrs	r2, r5, #20
 8006914:	d115      	bne.n	8006942 <__ieee754_sqrt+0x86>
 8006916:	2000      	movs	r0, #0
 8006918:	e009      	b.n	800692e <__ieee754_sqrt+0x72>
 800691a:	0acb      	lsrs	r3, r1, #11
 800691c:	3a15      	subs	r2, #21
 800691e:	0549      	lsls	r1, r1, #21
 8006920:	2b00      	cmp	r3, #0
 8006922:	d0fa      	beq.n	800691a <__ieee754_sqrt+0x5e>
 8006924:	e7f7      	b.n	8006916 <__ieee754_sqrt+0x5a>
 8006926:	462a      	mov	r2, r5
 8006928:	e7fa      	b.n	8006920 <__ieee754_sqrt+0x64>
 800692a:	005b      	lsls	r3, r3, #1
 800692c:	3001      	adds	r0, #1
 800692e:	02dc      	lsls	r4, r3, #11
 8006930:	d5fb      	bpl.n	800692a <__ieee754_sqrt+0x6e>
 8006932:	1e44      	subs	r4, r0, #1
 8006934:	1b12      	subs	r2, r2, r4
 8006936:	f1c0 0420 	rsb	r4, r0, #32
 800693a:	fa21 f404 	lsr.w	r4, r1, r4
 800693e:	4323      	orrs	r3, r4
 8006940:	4081      	lsls	r1, r0
 8006942:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006946:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800694a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800694e:	07d2      	lsls	r2, r2, #31
 8006950:	bf5c      	itt	pl
 8006952:	005b      	lslpl	r3, r3, #1
 8006954:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8006958:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800695c:	bf58      	it	pl
 800695e:	0049      	lslpl	r1, r1, #1
 8006960:	2600      	movs	r6, #0
 8006962:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8006966:	106d      	asrs	r5, r5, #1
 8006968:	0049      	lsls	r1, r1, #1
 800696a:	2016      	movs	r0, #22
 800696c:	4632      	mov	r2, r6
 800696e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8006972:	1917      	adds	r7, r2, r4
 8006974:	429f      	cmp	r7, r3
 8006976:	bfde      	ittt	le
 8006978:	193a      	addle	r2, r7, r4
 800697a:	1bdb      	suble	r3, r3, r7
 800697c:	1936      	addle	r6, r6, r4
 800697e:	0fcf      	lsrs	r7, r1, #31
 8006980:	3801      	subs	r0, #1
 8006982:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8006986:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800698a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800698e:	d1f0      	bne.n	8006972 <__ieee754_sqrt+0xb6>
 8006990:	4604      	mov	r4, r0
 8006992:	2720      	movs	r7, #32
 8006994:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8006998:	429a      	cmp	r2, r3
 800699a:	eb00 0e0c 	add.w	lr, r0, ip
 800699e:	db02      	blt.n	80069a6 <__ieee754_sqrt+0xea>
 80069a0:	d113      	bne.n	80069ca <__ieee754_sqrt+0x10e>
 80069a2:	458e      	cmp	lr, r1
 80069a4:	d811      	bhi.n	80069ca <__ieee754_sqrt+0x10e>
 80069a6:	f1be 0f00 	cmp.w	lr, #0
 80069aa:	eb0e 000c 	add.w	r0, lr, ip
 80069ae:	da42      	bge.n	8006a36 <__ieee754_sqrt+0x17a>
 80069b0:	2800      	cmp	r0, #0
 80069b2:	db40      	blt.n	8006a36 <__ieee754_sqrt+0x17a>
 80069b4:	f102 0801 	add.w	r8, r2, #1
 80069b8:	1a9b      	subs	r3, r3, r2
 80069ba:	458e      	cmp	lr, r1
 80069bc:	bf88      	it	hi
 80069be:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80069c2:	eba1 010e 	sub.w	r1, r1, lr
 80069c6:	4464      	add	r4, ip
 80069c8:	4642      	mov	r2, r8
 80069ca:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80069ce:	3f01      	subs	r7, #1
 80069d0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80069d4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80069d8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80069dc:	d1dc      	bne.n	8006998 <__ieee754_sqrt+0xdc>
 80069de:	4319      	orrs	r1, r3
 80069e0:	d01b      	beq.n	8006a1a <__ieee754_sqrt+0x15e>
 80069e2:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8006a68 <__ieee754_sqrt+0x1ac>
 80069e6:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8006a6c <__ieee754_sqrt+0x1b0>
 80069ea:	e9da 0100 	ldrd	r0, r1, [sl]
 80069ee:	e9db 2300 	ldrd	r2, r3, [fp]
 80069f2:	f7f9 fc0d 	bl	8000210 <__aeabi_dsub>
 80069f6:	e9da 8900 	ldrd	r8, r9, [sl]
 80069fa:	4602      	mov	r2, r0
 80069fc:	460b      	mov	r3, r1
 80069fe:	4640      	mov	r0, r8
 8006a00:	4649      	mov	r1, r9
 8006a02:	f7fa f839 	bl	8000a78 <__aeabi_dcmple>
 8006a06:	b140      	cbz	r0, 8006a1a <__ieee754_sqrt+0x15e>
 8006a08:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006a0c:	e9da 0100 	ldrd	r0, r1, [sl]
 8006a10:	e9db 2300 	ldrd	r2, r3, [fp]
 8006a14:	d111      	bne.n	8006a3a <__ieee754_sqrt+0x17e>
 8006a16:	3601      	adds	r6, #1
 8006a18:	463c      	mov	r4, r7
 8006a1a:	1072      	asrs	r2, r6, #1
 8006a1c:	0863      	lsrs	r3, r4, #1
 8006a1e:	07f1      	lsls	r1, r6, #31
 8006a20:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8006a24:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8006a28:	bf48      	it	mi
 8006a2a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8006a2e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8006a32:	4618      	mov	r0, r3
 8006a34:	e756      	b.n	80068e4 <__ieee754_sqrt+0x28>
 8006a36:	4690      	mov	r8, r2
 8006a38:	e7be      	b.n	80069b8 <__ieee754_sqrt+0xfc>
 8006a3a:	f7f9 fbeb 	bl	8000214 <__adddf3>
 8006a3e:	e9da 8900 	ldrd	r8, r9, [sl]
 8006a42:	4602      	mov	r2, r0
 8006a44:	460b      	mov	r3, r1
 8006a46:	4640      	mov	r0, r8
 8006a48:	4649      	mov	r1, r9
 8006a4a:	f7fa f80b 	bl	8000a64 <__aeabi_dcmplt>
 8006a4e:	b120      	cbz	r0, 8006a5a <__ieee754_sqrt+0x19e>
 8006a50:	1ca0      	adds	r0, r4, #2
 8006a52:	bf08      	it	eq
 8006a54:	3601      	addeq	r6, #1
 8006a56:	3402      	adds	r4, #2
 8006a58:	e7df      	b.n	8006a1a <__ieee754_sqrt+0x15e>
 8006a5a:	1c63      	adds	r3, r4, #1
 8006a5c:	f023 0401 	bic.w	r4, r3, #1
 8006a60:	e7db      	b.n	8006a1a <__ieee754_sqrt+0x15e>
 8006a62:	bf00      	nop
 8006a64:	7ff00000 	.word	0x7ff00000
 8006a68:	20000018 	.word	0x20000018
 8006a6c:	20000010 	.word	0x20000010

08006a70 <__ieee754_pow>:
 8006a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a74:	b091      	sub	sp, #68	@ 0x44
 8006a76:	ed8d 1b00 	vstr	d1, [sp]
 8006a7a:	e9dd 1900 	ldrd	r1, r9, [sp]
 8006a7e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8006a82:	ea5a 0001 	orrs.w	r0, sl, r1
 8006a86:	ec57 6b10 	vmov	r6, r7, d0
 8006a8a:	d113      	bne.n	8006ab4 <__ieee754_pow+0x44>
 8006a8c:	19b3      	adds	r3, r6, r6
 8006a8e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8006a92:	4152      	adcs	r2, r2
 8006a94:	4298      	cmp	r0, r3
 8006a96:	4b98      	ldr	r3, [pc, #608]	@ (8006cf8 <__ieee754_pow+0x288>)
 8006a98:	4193      	sbcs	r3, r2
 8006a9a:	f080 84ea 	bcs.w	8007472 <__ieee754_pow+0xa02>
 8006a9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006aa2:	4630      	mov	r0, r6
 8006aa4:	4639      	mov	r1, r7
 8006aa6:	f7f9 fbb5 	bl	8000214 <__adddf3>
 8006aaa:	ec41 0b10 	vmov	d0, r0, r1
 8006aae:	b011      	add	sp, #68	@ 0x44
 8006ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ab4:	4a91      	ldr	r2, [pc, #580]	@ (8006cfc <__ieee754_pow+0x28c>)
 8006ab6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8006aba:	4590      	cmp	r8, r2
 8006abc:	463d      	mov	r5, r7
 8006abe:	4633      	mov	r3, r6
 8006ac0:	d806      	bhi.n	8006ad0 <__ieee754_pow+0x60>
 8006ac2:	d101      	bne.n	8006ac8 <__ieee754_pow+0x58>
 8006ac4:	2e00      	cmp	r6, #0
 8006ac6:	d1ea      	bne.n	8006a9e <__ieee754_pow+0x2e>
 8006ac8:	4592      	cmp	sl, r2
 8006aca:	d801      	bhi.n	8006ad0 <__ieee754_pow+0x60>
 8006acc:	d10e      	bne.n	8006aec <__ieee754_pow+0x7c>
 8006ace:	b169      	cbz	r1, 8006aec <__ieee754_pow+0x7c>
 8006ad0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8006ad4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8006ad8:	431d      	orrs	r5, r3
 8006ada:	d1e0      	bne.n	8006a9e <__ieee754_pow+0x2e>
 8006adc:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006ae0:	18db      	adds	r3, r3, r3
 8006ae2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8006ae6:	4152      	adcs	r2, r2
 8006ae8:	429d      	cmp	r5, r3
 8006aea:	e7d4      	b.n	8006a96 <__ieee754_pow+0x26>
 8006aec:	2d00      	cmp	r5, #0
 8006aee:	46c3      	mov	fp, r8
 8006af0:	da3a      	bge.n	8006b68 <__ieee754_pow+0xf8>
 8006af2:	4a83      	ldr	r2, [pc, #524]	@ (8006d00 <__ieee754_pow+0x290>)
 8006af4:	4592      	cmp	sl, r2
 8006af6:	d84d      	bhi.n	8006b94 <__ieee754_pow+0x124>
 8006af8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8006afc:	4592      	cmp	sl, r2
 8006afe:	f240 84c7 	bls.w	8007490 <__ieee754_pow+0xa20>
 8006b02:	ea4f 522a 	mov.w	r2, sl, asr #20
 8006b06:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8006b0a:	2a14      	cmp	r2, #20
 8006b0c:	dd0f      	ble.n	8006b2e <__ieee754_pow+0xbe>
 8006b0e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8006b12:	fa21 f402 	lsr.w	r4, r1, r2
 8006b16:	fa04 f202 	lsl.w	r2, r4, r2
 8006b1a:	428a      	cmp	r2, r1
 8006b1c:	f040 84b8 	bne.w	8007490 <__ieee754_pow+0xa20>
 8006b20:	f004 0401 	and.w	r4, r4, #1
 8006b24:	f1c4 0402 	rsb	r4, r4, #2
 8006b28:	2900      	cmp	r1, #0
 8006b2a:	d158      	bne.n	8006bde <__ieee754_pow+0x16e>
 8006b2c:	e00e      	b.n	8006b4c <__ieee754_pow+0xdc>
 8006b2e:	2900      	cmp	r1, #0
 8006b30:	d154      	bne.n	8006bdc <__ieee754_pow+0x16c>
 8006b32:	f1c2 0214 	rsb	r2, r2, #20
 8006b36:	fa4a f402 	asr.w	r4, sl, r2
 8006b3a:	fa04 f202 	lsl.w	r2, r4, r2
 8006b3e:	4552      	cmp	r2, sl
 8006b40:	f040 84a3 	bne.w	800748a <__ieee754_pow+0xa1a>
 8006b44:	f004 0401 	and.w	r4, r4, #1
 8006b48:	f1c4 0402 	rsb	r4, r4, #2
 8006b4c:	4a6d      	ldr	r2, [pc, #436]	@ (8006d04 <__ieee754_pow+0x294>)
 8006b4e:	4592      	cmp	sl, r2
 8006b50:	d12e      	bne.n	8006bb0 <__ieee754_pow+0x140>
 8006b52:	f1b9 0f00 	cmp.w	r9, #0
 8006b56:	f280 8494 	bge.w	8007482 <__ieee754_pow+0xa12>
 8006b5a:	496a      	ldr	r1, [pc, #424]	@ (8006d04 <__ieee754_pow+0x294>)
 8006b5c:	4632      	mov	r2, r6
 8006b5e:	463b      	mov	r3, r7
 8006b60:	2000      	movs	r0, #0
 8006b62:	f7f9 fe37 	bl	80007d4 <__aeabi_ddiv>
 8006b66:	e7a0      	b.n	8006aaa <__ieee754_pow+0x3a>
 8006b68:	2400      	movs	r4, #0
 8006b6a:	bbc1      	cbnz	r1, 8006bde <__ieee754_pow+0x16e>
 8006b6c:	4a63      	ldr	r2, [pc, #396]	@ (8006cfc <__ieee754_pow+0x28c>)
 8006b6e:	4592      	cmp	sl, r2
 8006b70:	d1ec      	bne.n	8006b4c <__ieee754_pow+0xdc>
 8006b72:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8006b76:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8006b7a:	431a      	orrs	r2, r3
 8006b7c:	f000 8479 	beq.w	8007472 <__ieee754_pow+0xa02>
 8006b80:	4b61      	ldr	r3, [pc, #388]	@ (8006d08 <__ieee754_pow+0x298>)
 8006b82:	4598      	cmp	r8, r3
 8006b84:	d908      	bls.n	8006b98 <__ieee754_pow+0x128>
 8006b86:	f1b9 0f00 	cmp.w	r9, #0
 8006b8a:	f2c0 8476 	blt.w	800747a <__ieee754_pow+0xa0a>
 8006b8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b92:	e78a      	b.n	8006aaa <__ieee754_pow+0x3a>
 8006b94:	2402      	movs	r4, #2
 8006b96:	e7e8      	b.n	8006b6a <__ieee754_pow+0xfa>
 8006b98:	f1b9 0f00 	cmp.w	r9, #0
 8006b9c:	f04f 0000 	mov.w	r0, #0
 8006ba0:	f04f 0100 	mov.w	r1, #0
 8006ba4:	da81      	bge.n	8006aaa <__ieee754_pow+0x3a>
 8006ba6:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006baa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8006bae:	e77c      	b.n	8006aaa <__ieee754_pow+0x3a>
 8006bb0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8006bb4:	d106      	bne.n	8006bc4 <__ieee754_pow+0x154>
 8006bb6:	4632      	mov	r2, r6
 8006bb8:	463b      	mov	r3, r7
 8006bba:	4630      	mov	r0, r6
 8006bbc:	4639      	mov	r1, r7
 8006bbe:	f7f9 fcdf 	bl	8000580 <__aeabi_dmul>
 8006bc2:	e772      	b.n	8006aaa <__ieee754_pow+0x3a>
 8006bc4:	4a51      	ldr	r2, [pc, #324]	@ (8006d0c <__ieee754_pow+0x29c>)
 8006bc6:	4591      	cmp	r9, r2
 8006bc8:	d109      	bne.n	8006bde <__ieee754_pow+0x16e>
 8006bca:	2d00      	cmp	r5, #0
 8006bcc:	db07      	blt.n	8006bde <__ieee754_pow+0x16e>
 8006bce:	ec47 6b10 	vmov	d0, r6, r7
 8006bd2:	b011      	add	sp, #68	@ 0x44
 8006bd4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bd8:	f7ff be70 	b.w	80068bc <__ieee754_sqrt>
 8006bdc:	2400      	movs	r4, #0
 8006bde:	ec47 6b10 	vmov	d0, r6, r7
 8006be2:	9302      	str	r3, [sp, #8]
 8006be4:	f000 fc88 	bl	80074f8 <fabs>
 8006be8:	9b02      	ldr	r3, [sp, #8]
 8006bea:	ec51 0b10 	vmov	r0, r1, d0
 8006bee:	bb53      	cbnz	r3, 8006c46 <__ieee754_pow+0x1d6>
 8006bf0:	4b44      	ldr	r3, [pc, #272]	@ (8006d04 <__ieee754_pow+0x294>)
 8006bf2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d002      	beq.n	8006c00 <__ieee754_pow+0x190>
 8006bfa:	f1b8 0f00 	cmp.w	r8, #0
 8006bfe:	d122      	bne.n	8006c46 <__ieee754_pow+0x1d6>
 8006c00:	f1b9 0f00 	cmp.w	r9, #0
 8006c04:	da05      	bge.n	8006c12 <__ieee754_pow+0x1a2>
 8006c06:	4602      	mov	r2, r0
 8006c08:	460b      	mov	r3, r1
 8006c0a:	2000      	movs	r0, #0
 8006c0c:	493d      	ldr	r1, [pc, #244]	@ (8006d04 <__ieee754_pow+0x294>)
 8006c0e:	f7f9 fde1 	bl	80007d4 <__aeabi_ddiv>
 8006c12:	2d00      	cmp	r5, #0
 8006c14:	f6bf af49 	bge.w	8006aaa <__ieee754_pow+0x3a>
 8006c18:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8006c1c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8006c20:	ea58 0804 	orrs.w	r8, r8, r4
 8006c24:	d108      	bne.n	8006c38 <__ieee754_pow+0x1c8>
 8006c26:	4602      	mov	r2, r0
 8006c28:	460b      	mov	r3, r1
 8006c2a:	4610      	mov	r0, r2
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	f7f9 faef 	bl	8000210 <__aeabi_dsub>
 8006c32:	4602      	mov	r2, r0
 8006c34:	460b      	mov	r3, r1
 8006c36:	e794      	b.n	8006b62 <__ieee754_pow+0xf2>
 8006c38:	2c01      	cmp	r4, #1
 8006c3a:	f47f af36 	bne.w	8006aaa <__ieee754_pow+0x3a>
 8006c3e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006c42:	4619      	mov	r1, r3
 8006c44:	e731      	b.n	8006aaa <__ieee754_pow+0x3a>
 8006c46:	0feb      	lsrs	r3, r5, #31
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	ea53 0204 	orrs.w	r2, r3, r4
 8006c4e:	d102      	bne.n	8006c56 <__ieee754_pow+0x1e6>
 8006c50:	4632      	mov	r2, r6
 8006c52:	463b      	mov	r3, r7
 8006c54:	e7e9      	b.n	8006c2a <__ieee754_pow+0x1ba>
 8006c56:	3c01      	subs	r4, #1
 8006c58:	431c      	orrs	r4, r3
 8006c5a:	d016      	beq.n	8006c8a <__ieee754_pow+0x21a>
 8006c5c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8006ce8 <__ieee754_pow+0x278>
 8006c60:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8006c64:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006c68:	f240 8112 	bls.w	8006e90 <__ieee754_pow+0x420>
 8006c6c:	4b28      	ldr	r3, [pc, #160]	@ (8006d10 <__ieee754_pow+0x2a0>)
 8006c6e:	459a      	cmp	sl, r3
 8006c70:	4b25      	ldr	r3, [pc, #148]	@ (8006d08 <__ieee754_pow+0x298>)
 8006c72:	d916      	bls.n	8006ca2 <__ieee754_pow+0x232>
 8006c74:	4598      	cmp	r8, r3
 8006c76:	d80b      	bhi.n	8006c90 <__ieee754_pow+0x220>
 8006c78:	f1b9 0f00 	cmp.w	r9, #0
 8006c7c:	da0b      	bge.n	8006c96 <__ieee754_pow+0x226>
 8006c7e:	2000      	movs	r0, #0
 8006c80:	b011      	add	sp, #68	@ 0x44
 8006c82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c86:	f000 bcf3 	b.w	8007670 <__math_oflow>
 8006c8a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8006cf0 <__ieee754_pow+0x280>
 8006c8e:	e7e7      	b.n	8006c60 <__ieee754_pow+0x1f0>
 8006c90:	f1b9 0f00 	cmp.w	r9, #0
 8006c94:	dcf3      	bgt.n	8006c7e <__ieee754_pow+0x20e>
 8006c96:	2000      	movs	r0, #0
 8006c98:	b011      	add	sp, #68	@ 0x44
 8006c9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c9e:	f000 bcdf 	b.w	8007660 <__math_uflow>
 8006ca2:	4598      	cmp	r8, r3
 8006ca4:	d20c      	bcs.n	8006cc0 <__ieee754_pow+0x250>
 8006ca6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006caa:	2200      	movs	r2, #0
 8006cac:	2300      	movs	r3, #0
 8006cae:	f7f9 fed9 	bl	8000a64 <__aeabi_dcmplt>
 8006cb2:	3800      	subs	r0, #0
 8006cb4:	bf18      	it	ne
 8006cb6:	2001      	movne	r0, #1
 8006cb8:	f1b9 0f00 	cmp.w	r9, #0
 8006cbc:	daec      	bge.n	8006c98 <__ieee754_pow+0x228>
 8006cbe:	e7df      	b.n	8006c80 <__ieee754_pow+0x210>
 8006cc0:	4b10      	ldr	r3, [pc, #64]	@ (8006d04 <__ieee754_pow+0x294>)
 8006cc2:	4598      	cmp	r8, r3
 8006cc4:	f04f 0200 	mov.w	r2, #0
 8006cc8:	d924      	bls.n	8006d14 <__ieee754_pow+0x2a4>
 8006cca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cce:	2300      	movs	r3, #0
 8006cd0:	f7f9 fec8 	bl	8000a64 <__aeabi_dcmplt>
 8006cd4:	3800      	subs	r0, #0
 8006cd6:	bf18      	it	ne
 8006cd8:	2001      	movne	r0, #1
 8006cda:	f1b9 0f00 	cmp.w	r9, #0
 8006cde:	dccf      	bgt.n	8006c80 <__ieee754_pow+0x210>
 8006ce0:	e7da      	b.n	8006c98 <__ieee754_pow+0x228>
 8006ce2:	bf00      	nop
 8006ce4:	f3af 8000 	nop.w
 8006ce8:	00000000 	.word	0x00000000
 8006cec:	3ff00000 	.word	0x3ff00000
 8006cf0:	00000000 	.word	0x00000000
 8006cf4:	bff00000 	.word	0xbff00000
 8006cf8:	fff00000 	.word	0xfff00000
 8006cfc:	7ff00000 	.word	0x7ff00000
 8006d00:	433fffff 	.word	0x433fffff
 8006d04:	3ff00000 	.word	0x3ff00000
 8006d08:	3fefffff 	.word	0x3fefffff
 8006d0c:	3fe00000 	.word	0x3fe00000
 8006d10:	43f00000 	.word	0x43f00000
 8006d14:	4b5a      	ldr	r3, [pc, #360]	@ (8006e80 <__ieee754_pow+0x410>)
 8006d16:	f7f9 fa7b 	bl	8000210 <__aeabi_dsub>
 8006d1a:	a351      	add	r3, pc, #324	@ (adr r3, 8006e60 <__ieee754_pow+0x3f0>)
 8006d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d20:	4604      	mov	r4, r0
 8006d22:	460d      	mov	r5, r1
 8006d24:	f7f9 fc2c 	bl	8000580 <__aeabi_dmul>
 8006d28:	a34f      	add	r3, pc, #316	@ (adr r3, 8006e68 <__ieee754_pow+0x3f8>)
 8006d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2e:	4606      	mov	r6, r0
 8006d30:	460f      	mov	r7, r1
 8006d32:	4620      	mov	r0, r4
 8006d34:	4629      	mov	r1, r5
 8006d36:	f7f9 fc23 	bl	8000580 <__aeabi_dmul>
 8006d3a:	4b52      	ldr	r3, [pc, #328]	@ (8006e84 <__ieee754_pow+0x414>)
 8006d3c:	4682      	mov	sl, r0
 8006d3e:	468b      	mov	fp, r1
 8006d40:	2200      	movs	r2, #0
 8006d42:	4620      	mov	r0, r4
 8006d44:	4629      	mov	r1, r5
 8006d46:	f7f9 fc1b 	bl	8000580 <__aeabi_dmul>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	a148      	add	r1, pc, #288	@ (adr r1, 8006e70 <__ieee754_pow+0x400>)
 8006d50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d54:	f7f9 fa5c 	bl	8000210 <__aeabi_dsub>
 8006d58:	4622      	mov	r2, r4
 8006d5a:	462b      	mov	r3, r5
 8006d5c:	f7f9 fc10 	bl	8000580 <__aeabi_dmul>
 8006d60:	4602      	mov	r2, r0
 8006d62:	460b      	mov	r3, r1
 8006d64:	2000      	movs	r0, #0
 8006d66:	4948      	ldr	r1, [pc, #288]	@ (8006e88 <__ieee754_pow+0x418>)
 8006d68:	f7f9 fa52 	bl	8000210 <__aeabi_dsub>
 8006d6c:	4622      	mov	r2, r4
 8006d6e:	4680      	mov	r8, r0
 8006d70:	4689      	mov	r9, r1
 8006d72:	462b      	mov	r3, r5
 8006d74:	4620      	mov	r0, r4
 8006d76:	4629      	mov	r1, r5
 8006d78:	f7f9 fc02 	bl	8000580 <__aeabi_dmul>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	460b      	mov	r3, r1
 8006d80:	4640      	mov	r0, r8
 8006d82:	4649      	mov	r1, r9
 8006d84:	f7f9 fbfc 	bl	8000580 <__aeabi_dmul>
 8006d88:	a33b      	add	r3, pc, #236	@ (adr r3, 8006e78 <__ieee754_pow+0x408>)
 8006d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8e:	f7f9 fbf7 	bl	8000580 <__aeabi_dmul>
 8006d92:	4602      	mov	r2, r0
 8006d94:	460b      	mov	r3, r1
 8006d96:	4650      	mov	r0, sl
 8006d98:	4659      	mov	r1, fp
 8006d9a:	f7f9 fa39 	bl	8000210 <__aeabi_dsub>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	460b      	mov	r3, r1
 8006da2:	4680      	mov	r8, r0
 8006da4:	4689      	mov	r9, r1
 8006da6:	4630      	mov	r0, r6
 8006da8:	4639      	mov	r1, r7
 8006daa:	f7f9 fa33 	bl	8000214 <__adddf3>
 8006dae:	2400      	movs	r4, #0
 8006db0:	4632      	mov	r2, r6
 8006db2:	463b      	mov	r3, r7
 8006db4:	4620      	mov	r0, r4
 8006db6:	460d      	mov	r5, r1
 8006db8:	f7f9 fa2a 	bl	8000210 <__aeabi_dsub>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	4640      	mov	r0, r8
 8006dc2:	4649      	mov	r1, r9
 8006dc4:	f7f9 fa24 	bl	8000210 <__aeabi_dsub>
 8006dc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006dcc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	9304      	str	r3, [sp, #16]
 8006dd4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006dd8:	4606      	mov	r6, r0
 8006dda:	460f      	mov	r7, r1
 8006ddc:	4652      	mov	r2, sl
 8006dde:	465b      	mov	r3, fp
 8006de0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006de4:	f7f9 fa14 	bl	8000210 <__aeabi_dsub>
 8006de8:	4622      	mov	r2, r4
 8006dea:	462b      	mov	r3, r5
 8006dec:	f7f9 fbc8 	bl	8000580 <__aeabi_dmul>
 8006df0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006df4:	4680      	mov	r8, r0
 8006df6:	4689      	mov	r9, r1
 8006df8:	4630      	mov	r0, r6
 8006dfa:	4639      	mov	r1, r7
 8006dfc:	f7f9 fbc0 	bl	8000580 <__aeabi_dmul>
 8006e00:	4602      	mov	r2, r0
 8006e02:	460b      	mov	r3, r1
 8006e04:	4640      	mov	r0, r8
 8006e06:	4649      	mov	r1, r9
 8006e08:	f7f9 fa04 	bl	8000214 <__adddf3>
 8006e0c:	4652      	mov	r2, sl
 8006e0e:	465b      	mov	r3, fp
 8006e10:	4606      	mov	r6, r0
 8006e12:	460f      	mov	r7, r1
 8006e14:	4620      	mov	r0, r4
 8006e16:	4629      	mov	r1, r5
 8006e18:	f7f9 fbb2 	bl	8000580 <__aeabi_dmul>
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	4602      	mov	r2, r0
 8006e20:	4680      	mov	r8, r0
 8006e22:	4689      	mov	r9, r1
 8006e24:	4630      	mov	r0, r6
 8006e26:	4639      	mov	r1, r7
 8006e28:	f7f9 f9f4 	bl	8000214 <__adddf3>
 8006e2c:	4b17      	ldr	r3, [pc, #92]	@ (8006e8c <__ieee754_pow+0x41c>)
 8006e2e:	4299      	cmp	r1, r3
 8006e30:	4604      	mov	r4, r0
 8006e32:	460d      	mov	r5, r1
 8006e34:	468a      	mov	sl, r1
 8006e36:	468b      	mov	fp, r1
 8006e38:	f340 82ef 	ble.w	800741a <__ieee754_pow+0x9aa>
 8006e3c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8006e40:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8006e44:	4303      	orrs	r3, r0
 8006e46:	f000 81e8 	beq.w	800721a <__ieee754_pow+0x7aa>
 8006e4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	2300      	movs	r3, #0
 8006e52:	f7f9 fe07 	bl	8000a64 <__aeabi_dcmplt>
 8006e56:	3800      	subs	r0, #0
 8006e58:	bf18      	it	ne
 8006e5a:	2001      	movne	r0, #1
 8006e5c:	e710      	b.n	8006c80 <__ieee754_pow+0x210>
 8006e5e:	bf00      	nop
 8006e60:	60000000 	.word	0x60000000
 8006e64:	3ff71547 	.word	0x3ff71547
 8006e68:	f85ddf44 	.word	0xf85ddf44
 8006e6c:	3e54ae0b 	.word	0x3e54ae0b
 8006e70:	55555555 	.word	0x55555555
 8006e74:	3fd55555 	.word	0x3fd55555
 8006e78:	652b82fe 	.word	0x652b82fe
 8006e7c:	3ff71547 	.word	0x3ff71547
 8006e80:	3ff00000 	.word	0x3ff00000
 8006e84:	3fd00000 	.word	0x3fd00000
 8006e88:	3fe00000 	.word	0x3fe00000
 8006e8c:	408fffff 	.word	0x408fffff
 8006e90:	4bd5      	ldr	r3, [pc, #852]	@ (80071e8 <__ieee754_pow+0x778>)
 8006e92:	402b      	ands	r3, r5
 8006e94:	2200      	movs	r2, #0
 8006e96:	b92b      	cbnz	r3, 8006ea4 <__ieee754_pow+0x434>
 8006e98:	4bd4      	ldr	r3, [pc, #848]	@ (80071ec <__ieee754_pow+0x77c>)
 8006e9a:	f7f9 fb71 	bl	8000580 <__aeabi_dmul>
 8006e9e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8006ea2:	468b      	mov	fp, r1
 8006ea4:	ea4f 532b 	mov.w	r3, fp, asr #20
 8006ea8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8006eac:	4413      	add	r3, r2
 8006eae:	930a      	str	r3, [sp, #40]	@ 0x28
 8006eb0:	4bcf      	ldr	r3, [pc, #828]	@ (80071f0 <__ieee754_pow+0x780>)
 8006eb2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8006eb6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8006eba:	459b      	cmp	fp, r3
 8006ebc:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006ec0:	dd08      	ble.n	8006ed4 <__ieee754_pow+0x464>
 8006ec2:	4bcc      	ldr	r3, [pc, #816]	@ (80071f4 <__ieee754_pow+0x784>)
 8006ec4:	459b      	cmp	fp, r3
 8006ec6:	f340 81a5 	ble.w	8007214 <__ieee754_pow+0x7a4>
 8006eca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ecc:	3301      	adds	r3, #1
 8006ece:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ed0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8006ed4:	f04f 0a00 	mov.w	sl, #0
 8006ed8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8006edc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ede:	4bc6      	ldr	r3, [pc, #792]	@ (80071f8 <__ieee754_pow+0x788>)
 8006ee0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006ee4:	ed93 7b00 	vldr	d7, [r3]
 8006ee8:	4629      	mov	r1, r5
 8006eea:	ec53 2b17 	vmov	r2, r3, d7
 8006eee:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006ef2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006ef6:	f7f9 f98b 	bl	8000210 <__aeabi_dsub>
 8006efa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006efe:	4606      	mov	r6, r0
 8006f00:	460f      	mov	r7, r1
 8006f02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f06:	f7f9 f985 	bl	8000214 <__adddf3>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	2000      	movs	r0, #0
 8006f10:	49ba      	ldr	r1, [pc, #744]	@ (80071fc <__ieee754_pow+0x78c>)
 8006f12:	f7f9 fc5f 	bl	80007d4 <__aeabi_ddiv>
 8006f16:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	4630      	mov	r0, r6
 8006f20:	4639      	mov	r1, r7
 8006f22:	f7f9 fb2d 	bl	8000580 <__aeabi_dmul>
 8006f26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f2a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8006f2e:	106d      	asrs	r5, r5, #1
 8006f30:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8006f34:	f04f 0b00 	mov.w	fp, #0
 8006f38:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8006f3c:	4661      	mov	r1, ip
 8006f3e:	2200      	movs	r2, #0
 8006f40:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8006f44:	4658      	mov	r0, fp
 8006f46:	46e1      	mov	r9, ip
 8006f48:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8006f4c:	4614      	mov	r4, r2
 8006f4e:	461d      	mov	r5, r3
 8006f50:	f7f9 fb16 	bl	8000580 <__aeabi_dmul>
 8006f54:	4602      	mov	r2, r0
 8006f56:	460b      	mov	r3, r1
 8006f58:	4630      	mov	r0, r6
 8006f5a:	4639      	mov	r1, r7
 8006f5c:	f7f9 f958 	bl	8000210 <__aeabi_dsub>
 8006f60:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f64:	4606      	mov	r6, r0
 8006f66:	460f      	mov	r7, r1
 8006f68:	4620      	mov	r0, r4
 8006f6a:	4629      	mov	r1, r5
 8006f6c:	f7f9 f950 	bl	8000210 <__aeabi_dsub>
 8006f70:	4602      	mov	r2, r0
 8006f72:	460b      	mov	r3, r1
 8006f74:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006f78:	f7f9 f94a 	bl	8000210 <__aeabi_dsub>
 8006f7c:	465a      	mov	r2, fp
 8006f7e:	464b      	mov	r3, r9
 8006f80:	f7f9 fafe 	bl	8000580 <__aeabi_dmul>
 8006f84:	4602      	mov	r2, r0
 8006f86:	460b      	mov	r3, r1
 8006f88:	4630      	mov	r0, r6
 8006f8a:	4639      	mov	r1, r7
 8006f8c:	f7f9 f940 	bl	8000210 <__aeabi_dsub>
 8006f90:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006f94:	f7f9 faf4 	bl	8000580 <__aeabi_dmul>
 8006f98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f9c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006fa0:	4610      	mov	r0, r2
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	f7f9 faec 	bl	8000580 <__aeabi_dmul>
 8006fa8:	a37d      	add	r3, pc, #500	@ (adr r3, 80071a0 <__ieee754_pow+0x730>)
 8006faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fae:	4604      	mov	r4, r0
 8006fb0:	460d      	mov	r5, r1
 8006fb2:	f7f9 fae5 	bl	8000580 <__aeabi_dmul>
 8006fb6:	a37c      	add	r3, pc, #496	@ (adr r3, 80071a8 <__ieee754_pow+0x738>)
 8006fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fbc:	f7f9 f92a 	bl	8000214 <__adddf3>
 8006fc0:	4622      	mov	r2, r4
 8006fc2:	462b      	mov	r3, r5
 8006fc4:	f7f9 fadc 	bl	8000580 <__aeabi_dmul>
 8006fc8:	a379      	add	r3, pc, #484	@ (adr r3, 80071b0 <__ieee754_pow+0x740>)
 8006fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fce:	f7f9 f921 	bl	8000214 <__adddf3>
 8006fd2:	4622      	mov	r2, r4
 8006fd4:	462b      	mov	r3, r5
 8006fd6:	f7f9 fad3 	bl	8000580 <__aeabi_dmul>
 8006fda:	a377      	add	r3, pc, #476	@ (adr r3, 80071b8 <__ieee754_pow+0x748>)
 8006fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe0:	f7f9 f918 	bl	8000214 <__adddf3>
 8006fe4:	4622      	mov	r2, r4
 8006fe6:	462b      	mov	r3, r5
 8006fe8:	f7f9 faca 	bl	8000580 <__aeabi_dmul>
 8006fec:	a374      	add	r3, pc, #464	@ (adr r3, 80071c0 <__ieee754_pow+0x750>)
 8006fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff2:	f7f9 f90f 	bl	8000214 <__adddf3>
 8006ff6:	4622      	mov	r2, r4
 8006ff8:	462b      	mov	r3, r5
 8006ffa:	f7f9 fac1 	bl	8000580 <__aeabi_dmul>
 8006ffe:	a372      	add	r3, pc, #456	@ (adr r3, 80071c8 <__ieee754_pow+0x758>)
 8007000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007004:	f7f9 f906 	bl	8000214 <__adddf3>
 8007008:	4622      	mov	r2, r4
 800700a:	4606      	mov	r6, r0
 800700c:	460f      	mov	r7, r1
 800700e:	462b      	mov	r3, r5
 8007010:	4620      	mov	r0, r4
 8007012:	4629      	mov	r1, r5
 8007014:	f7f9 fab4 	bl	8000580 <__aeabi_dmul>
 8007018:	4602      	mov	r2, r0
 800701a:	460b      	mov	r3, r1
 800701c:	4630      	mov	r0, r6
 800701e:	4639      	mov	r1, r7
 8007020:	f7f9 faae 	bl	8000580 <__aeabi_dmul>
 8007024:	465a      	mov	r2, fp
 8007026:	4604      	mov	r4, r0
 8007028:	460d      	mov	r5, r1
 800702a:	464b      	mov	r3, r9
 800702c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007030:	f7f9 f8f0 	bl	8000214 <__adddf3>
 8007034:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007038:	f7f9 faa2 	bl	8000580 <__aeabi_dmul>
 800703c:	4622      	mov	r2, r4
 800703e:	462b      	mov	r3, r5
 8007040:	f7f9 f8e8 	bl	8000214 <__adddf3>
 8007044:	465a      	mov	r2, fp
 8007046:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800704a:	464b      	mov	r3, r9
 800704c:	4658      	mov	r0, fp
 800704e:	4649      	mov	r1, r9
 8007050:	f7f9 fa96 	bl	8000580 <__aeabi_dmul>
 8007054:	4b6a      	ldr	r3, [pc, #424]	@ (8007200 <__ieee754_pow+0x790>)
 8007056:	2200      	movs	r2, #0
 8007058:	4606      	mov	r6, r0
 800705a:	460f      	mov	r7, r1
 800705c:	f7f9 f8da 	bl	8000214 <__adddf3>
 8007060:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007064:	f7f9 f8d6 	bl	8000214 <__adddf3>
 8007068:	46d8      	mov	r8, fp
 800706a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800706e:	460d      	mov	r5, r1
 8007070:	465a      	mov	r2, fp
 8007072:	460b      	mov	r3, r1
 8007074:	4640      	mov	r0, r8
 8007076:	4649      	mov	r1, r9
 8007078:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800707c:	f7f9 fa80 	bl	8000580 <__aeabi_dmul>
 8007080:	465c      	mov	r4, fp
 8007082:	4680      	mov	r8, r0
 8007084:	4689      	mov	r9, r1
 8007086:	4b5e      	ldr	r3, [pc, #376]	@ (8007200 <__ieee754_pow+0x790>)
 8007088:	2200      	movs	r2, #0
 800708a:	4620      	mov	r0, r4
 800708c:	4629      	mov	r1, r5
 800708e:	f7f9 f8bf 	bl	8000210 <__aeabi_dsub>
 8007092:	4632      	mov	r2, r6
 8007094:	463b      	mov	r3, r7
 8007096:	f7f9 f8bb 	bl	8000210 <__aeabi_dsub>
 800709a:	4602      	mov	r2, r0
 800709c:	460b      	mov	r3, r1
 800709e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80070a2:	f7f9 f8b5 	bl	8000210 <__aeabi_dsub>
 80070a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070aa:	f7f9 fa69 	bl	8000580 <__aeabi_dmul>
 80070ae:	4622      	mov	r2, r4
 80070b0:	4606      	mov	r6, r0
 80070b2:	460f      	mov	r7, r1
 80070b4:	462b      	mov	r3, r5
 80070b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070ba:	f7f9 fa61 	bl	8000580 <__aeabi_dmul>
 80070be:	4602      	mov	r2, r0
 80070c0:	460b      	mov	r3, r1
 80070c2:	4630      	mov	r0, r6
 80070c4:	4639      	mov	r1, r7
 80070c6:	f7f9 f8a5 	bl	8000214 <__adddf3>
 80070ca:	4606      	mov	r6, r0
 80070cc:	460f      	mov	r7, r1
 80070ce:	4602      	mov	r2, r0
 80070d0:	460b      	mov	r3, r1
 80070d2:	4640      	mov	r0, r8
 80070d4:	4649      	mov	r1, r9
 80070d6:	f7f9 f89d 	bl	8000214 <__adddf3>
 80070da:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80070de:	a33c      	add	r3, pc, #240	@ (adr r3, 80071d0 <__ieee754_pow+0x760>)
 80070e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e4:	4658      	mov	r0, fp
 80070e6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80070ea:	460d      	mov	r5, r1
 80070ec:	f7f9 fa48 	bl	8000580 <__aeabi_dmul>
 80070f0:	465c      	mov	r4, fp
 80070f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80070f6:	4642      	mov	r2, r8
 80070f8:	464b      	mov	r3, r9
 80070fa:	4620      	mov	r0, r4
 80070fc:	4629      	mov	r1, r5
 80070fe:	f7f9 f887 	bl	8000210 <__aeabi_dsub>
 8007102:	4602      	mov	r2, r0
 8007104:	460b      	mov	r3, r1
 8007106:	4630      	mov	r0, r6
 8007108:	4639      	mov	r1, r7
 800710a:	f7f9 f881 	bl	8000210 <__aeabi_dsub>
 800710e:	a332      	add	r3, pc, #200	@ (adr r3, 80071d8 <__ieee754_pow+0x768>)
 8007110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007114:	f7f9 fa34 	bl	8000580 <__aeabi_dmul>
 8007118:	a331      	add	r3, pc, #196	@ (adr r3, 80071e0 <__ieee754_pow+0x770>)
 800711a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711e:	4606      	mov	r6, r0
 8007120:	460f      	mov	r7, r1
 8007122:	4620      	mov	r0, r4
 8007124:	4629      	mov	r1, r5
 8007126:	f7f9 fa2b 	bl	8000580 <__aeabi_dmul>
 800712a:	4602      	mov	r2, r0
 800712c:	460b      	mov	r3, r1
 800712e:	4630      	mov	r0, r6
 8007130:	4639      	mov	r1, r7
 8007132:	f7f9 f86f 	bl	8000214 <__adddf3>
 8007136:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007138:	4b32      	ldr	r3, [pc, #200]	@ (8007204 <__ieee754_pow+0x794>)
 800713a:	4413      	add	r3, r2
 800713c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007140:	f7f9 f868 	bl	8000214 <__adddf3>
 8007144:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007148:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800714a:	f7f9 f9af 	bl	80004ac <__aeabi_i2d>
 800714e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007150:	4b2d      	ldr	r3, [pc, #180]	@ (8007208 <__ieee754_pow+0x798>)
 8007152:	4413      	add	r3, r2
 8007154:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007158:	4606      	mov	r6, r0
 800715a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800715e:	460f      	mov	r7, r1
 8007160:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007164:	f7f9 f856 	bl	8000214 <__adddf3>
 8007168:	4642      	mov	r2, r8
 800716a:	464b      	mov	r3, r9
 800716c:	f7f9 f852 	bl	8000214 <__adddf3>
 8007170:	4632      	mov	r2, r6
 8007172:	463b      	mov	r3, r7
 8007174:	f7f9 f84e 	bl	8000214 <__adddf3>
 8007178:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800717c:	4632      	mov	r2, r6
 800717e:	463b      	mov	r3, r7
 8007180:	4658      	mov	r0, fp
 8007182:	460d      	mov	r5, r1
 8007184:	f7f9 f844 	bl	8000210 <__aeabi_dsub>
 8007188:	4642      	mov	r2, r8
 800718a:	464b      	mov	r3, r9
 800718c:	f7f9 f840 	bl	8000210 <__aeabi_dsub>
 8007190:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007194:	f7f9 f83c 	bl	8000210 <__aeabi_dsub>
 8007198:	465c      	mov	r4, fp
 800719a:	4602      	mov	r2, r0
 800719c:	e036      	b.n	800720c <__ieee754_pow+0x79c>
 800719e:	bf00      	nop
 80071a0:	4a454eef 	.word	0x4a454eef
 80071a4:	3fca7e28 	.word	0x3fca7e28
 80071a8:	93c9db65 	.word	0x93c9db65
 80071ac:	3fcd864a 	.word	0x3fcd864a
 80071b0:	a91d4101 	.word	0xa91d4101
 80071b4:	3fd17460 	.word	0x3fd17460
 80071b8:	518f264d 	.word	0x518f264d
 80071bc:	3fd55555 	.word	0x3fd55555
 80071c0:	db6fabff 	.word	0xdb6fabff
 80071c4:	3fdb6db6 	.word	0x3fdb6db6
 80071c8:	33333303 	.word	0x33333303
 80071cc:	3fe33333 	.word	0x3fe33333
 80071d0:	e0000000 	.word	0xe0000000
 80071d4:	3feec709 	.word	0x3feec709
 80071d8:	dc3a03fd 	.word	0xdc3a03fd
 80071dc:	3feec709 	.word	0x3feec709
 80071e0:	145b01f5 	.word	0x145b01f5
 80071e4:	be3e2fe0 	.word	0xbe3e2fe0
 80071e8:	7ff00000 	.word	0x7ff00000
 80071ec:	43400000 	.word	0x43400000
 80071f0:	0003988e 	.word	0x0003988e
 80071f4:	000bb679 	.word	0x000bb679
 80071f8:	080077c0 	.word	0x080077c0
 80071fc:	3ff00000 	.word	0x3ff00000
 8007200:	40080000 	.word	0x40080000
 8007204:	080077a0 	.word	0x080077a0
 8007208:	080077b0 	.word	0x080077b0
 800720c:	460b      	mov	r3, r1
 800720e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007212:	e5d7      	b.n	8006dc4 <__ieee754_pow+0x354>
 8007214:	f04f 0a01 	mov.w	sl, #1
 8007218:	e65e      	b.n	8006ed8 <__ieee754_pow+0x468>
 800721a:	a3b4      	add	r3, pc, #720	@ (adr r3, 80074ec <__ieee754_pow+0xa7c>)
 800721c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007220:	4630      	mov	r0, r6
 8007222:	4639      	mov	r1, r7
 8007224:	f7f8 fff6 	bl	8000214 <__adddf3>
 8007228:	4642      	mov	r2, r8
 800722a:	e9cd 0100 	strd	r0, r1, [sp]
 800722e:	464b      	mov	r3, r9
 8007230:	4620      	mov	r0, r4
 8007232:	4629      	mov	r1, r5
 8007234:	f7f8 ffec 	bl	8000210 <__aeabi_dsub>
 8007238:	4602      	mov	r2, r0
 800723a:	460b      	mov	r3, r1
 800723c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007240:	f7f9 fc2e 	bl	8000aa0 <__aeabi_dcmpgt>
 8007244:	2800      	cmp	r0, #0
 8007246:	f47f ae00 	bne.w	8006e4a <__ieee754_pow+0x3da>
 800724a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800724e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007252:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8007256:	fa43 fa0a 	asr.w	sl, r3, sl
 800725a:	44da      	add	sl, fp
 800725c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8007260:	489d      	ldr	r0, [pc, #628]	@ (80074d8 <__ieee754_pow+0xa68>)
 8007262:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8007266:	4108      	asrs	r0, r1
 8007268:	ea00 030a 	and.w	r3, r0, sl
 800726c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8007270:	f1c1 0114 	rsb	r1, r1, #20
 8007274:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8007278:	fa4a fa01 	asr.w	sl, sl, r1
 800727c:	f1bb 0f00 	cmp.w	fp, #0
 8007280:	4640      	mov	r0, r8
 8007282:	4649      	mov	r1, r9
 8007284:	f04f 0200 	mov.w	r2, #0
 8007288:	bfb8      	it	lt
 800728a:	f1ca 0a00 	rsblt	sl, sl, #0
 800728e:	f7f8 ffbf 	bl	8000210 <__aeabi_dsub>
 8007292:	4680      	mov	r8, r0
 8007294:	4689      	mov	r9, r1
 8007296:	4632      	mov	r2, r6
 8007298:	463b      	mov	r3, r7
 800729a:	4640      	mov	r0, r8
 800729c:	4649      	mov	r1, r9
 800729e:	f7f8 ffb9 	bl	8000214 <__adddf3>
 80072a2:	2400      	movs	r4, #0
 80072a4:	a37c      	add	r3, pc, #496	@ (adr r3, 8007498 <__ieee754_pow+0xa28>)
 80072a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072aa:	4620      	mov	r0, r4
 80072ac:	460d      	mov	r5, r1
 80072ae:	f7f9 f967 	bl	8000580 <__aeabi_dmul>
 80072b2:	4642      	mov	r2, r8
 80072b4:	e9cd 0100 	strd	r0, r1, [sp]
 80072b8:	464b      	mov	r3, r9
 80072ba:	4620      	mov	r0, r4
 80072bc:	4629      	mov	r1, r5
 80072be:	f7f8 ffa7 	bl	8000210 <__aeabi_dsub>
 80072c2:	4602      	mov	r2, r0
 80072c4:	460b      	mov	r3, r1
 80072c6:	4630      	mov	r0, r6
 80072c8:	4639      	mov	r1, r7
 80072ca:	f7f8 ffa1 	bl	8000210 <__aeabi_dsub>
 80072ce:	a374      	add	r3, pc, #464	@ (adr r3, 80074a0 <__ieee754_pow+0xa30>)
 80072d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d4:	f7f9 f954 	bl	8000580 <__aeabi_dmul>
 80072d8:	a373      	add	r3, pc, #460	@ (adr r3, 80074a8 <__ieee754_pow+0xa38>)
 80072da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072de:	4680      	mov	r8, r0
 80072e0:	4689      	mov	r9, r1
 80072e2:	4620      	mov	r0, r4
 80072e4:	4629      	mov	r1, r5
 80072e6:	f7f9 f94b 	bl	8000580 <__aeabi_dmul>
 80072ea:	4602      	mov	r2, r0
 80072ec:	460b      	mov	r3, r1
 80072ee:	4640      	mov	r0, r8
 80072f0:	4649      	mov	r1, r9
 80072f2:	f7f8 ff8f 	bl	8000214 <__adddf3>
 80072f6:	4604      	mov	r4, r0
 80072f8:	460d      	mov	r5, r1
 80072fa:	4602      	mov	r2, r0
 80072fc:	460b      	mov	r3, r1
 80072fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007302:	f7f8 ff87 	bl	8000214 <__adddf3>
 8007306:	e9dd 2300 	ldrd	r2, r3, [sp]
 800730a:	4680      	mov	r8, r0
 800730c:	4689      	mov	r9, r1
 800730e:	f7f8 ff7f 	bl	8000210 <__aeabi_dsub>
 8007312:	4602      	mov	r2, r0
 8007314:	460b      	mov	r3, r1
 8007316:	4620      	mov	r0, r4
 8007318:	4629      	mov	r1, r5
 800731a:	f7f8 ff79 	bl	8000210 <__aeabi_dsub>
 800731e:	4642      	mov	r2, r8
 8007320:	4606      	mov	r6, r0
 8007322:	460f      	mov	r7, r1
 8007324:	464b      	mov	r3, r9
 8007326:	4640      	mov	r0, r8
 8007328:	4649      	mov	r1, r9
 800732a:	f7f9 f929 	bl	8000580 <__aeabi_dmul>
 800732e:	a360      	add	r3, pc, #384	@ (adr r3, 80074b0 <__ieee754_pow+0xa40>)
 8007330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007334:	4604      	mov	r4, r0
 8007336:	460d      	mov	r5, r1
 8007338:	f7f9 f922 	bl	8000580 <__aeabi_dmul>
 800733c:	a35e      	add	r3, pc, #376	@ (adr r3, 80074b8 <__ieee754_pow+0xa48>)
 800733e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007342:	f7f8 ff65 	bl	8000210 <__aeabi_dsub>
 8007346:	4622      	mov	r2, r4
 8007348:	462b      	mov	r3, r5
 800734a:	f7f9 f919 	bl	8000580 <__aeabi_dmul>
 800734e:	a35c      	add	r3, pc, #368	@ (adr r3, 80074c0 <__ieee754_pow+0xa50>)
 8007350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007354:	f7f8 ff5e 	bl	8000214 <__adddf3>
 8007358:	4622      	mov	r2, r4
 800735a:	462b      	mov	r3, r5
 800735c:	f7f9 f910 	bl	8000580 <__aeabi_dmul>
 8007360:	a359      	add	r3, pc, #356	@ (adr r3, 80074c8 <__ieee754_pow+0xa58>)
 8007362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007366:	f7f8 ff53 	bl	8000210 <__aeabi_dsub>
 800736a:	4622      	mov	r2, r4
 800736c:	462b      	mov	r3, r5
 800736e:	f7f9 f907 	bl	8000580 <__aeabi_dmul>
 8007372:	a357      	add	r3, pc, #348	@ (adr r3, 80074d0 <__ieee754_pow+0xa60>)
 8007374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007378:	f7f8 ff4c 	bl	8000214 <__adddf3>
 800737c:	4622      	mov	r2, r4
 800737e:	462b      	mov	r3, r5
 8007380:	f7f9 f8fe 	bl	8000580 <__aeabi_dmul>
 8007384:	4602      	mov	r2, r0
 8007386:	460b      	mov	r3, r1
 8007388:	4640      	mov	r0, r8
 800738a:	4649      	mov	r1, r9
 800738c:	f7f8 ff40 	bl	8000210 <__aeabi_dsub>
 8007390:	4604      	mov	r4, r0
 8007392:	460d      	mov	r5, r1
 8007394:	4602      	mov	r2, r0
 8007396:	460b      	mov	r3, r1
 8007398:	4640      	mov	r0, r8
 800739a:	4649      	mov	r1, r9
 800739c:	f7f9 f8f0 	bl	8000580 <__aeabi_dmul>
 80073a0:	2200      	movs	r2, #0
 80073a2:	e9cd 0100 	strd	r0, r1, [sp]
 80073a6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80073aa:	4620      	mov	r0, r4
 80073ac:	4629      	mov	r1, r5
 80073ae:	f7f8 ff2f 	bl	8000210 <__aeabi_dsub>
 80073b2:	4602      	mov	r2, r0
 80073b4:	460b      	mov	r3, r1
 80073b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80073ba:	f7f9 fa0b 	bl	80007d4 <__aeabi_ddiv>
 80073be:	4632      	mov	r2, r6
 80073c0:	4604      	mov	r4, r0
 80073c2:	460d      	mov	r5, r1
 80073c4:	463b      	mov	r3, r7
 80073c6:	4640      	mov	r0, r8
 80073c8:	4649      	mov	r1, r9
 80073ca:	f7f9 f8d9 	bl	8000580 <__aeabi_dmul>
 80073ce:	4632      	mov	r2, r6
 80073d0:	463b      	mov	r3, r7
 80073d2:	f7f8 ff1f 	bl	8000214 <__adddf3>
 80073d6:	4602      	mov	r2, r0
 80073d8:	460b      	mov	r3, r1
 80073da:	4620      	mov	r0, r4
 80073dc:	4629      	mov	r1, r5
 80073de:	f7f8 ff17 	bl	8000210 <__aeabi_dsub>
 80073e2:	4642      	mov	r2, r8
 80073e4:	464b      	mov	r3, r9
 80073e6:	f7f8 ff13 	bl	8000210 <__aeabi_dsub>
 80073ea:	460b      	mov	r3, r1
 80073ec:	4602      	mov	r2, r0
 80073ee:	493b      	ldr	r1, [pc, #236]	@ (80074dc <__ieee754_pow+0xa6c>)
 80073f0:	2000      	movs	r0, #0
 80073f2:	f7f8 ff0d 	bl	8000210 <__aeabi_dsub>
 80073f6:	ec41 0b10 	vmov	d0, r0, r1
 80073fa:	ee10 3a90 	vmov	r3, s1
 80073fe:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007402:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007406:	da30      	bge.n	800746a <__ieee754_pow+0x9fa>
 8007408:	4650      	mov	r0, sl
 800740a:	f000 f87d 	bl	8007508 <scalbn>
 800740e:	ec51 0b10 	vmov	r0, r1, d0
 8007412:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007416:	f7ff bbd2 	b.w	8006bbe <__ieee754_pow+0x14e>
 800741a:	4c31      	ldr	r4, [pc, #196]	@ (80074e0 <__ieee754_pow+0xa70>)
 800741c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007420:	42a3      	cmp	r3, r4
 8007422:	d91a      	bls.n	800745a <__ieee754_pow+0x9ea>
 8007424:	4b2f      	ldr	r3, [pc, #188]	@ (80074e4 <__ieee754_pow+0xa74>)
 8007426:	440b      	add	r3, r1
 8007428:	4303      	orrs	r3, r0
 800742a:	d009      	beq.n	8007440 <__ieee754_pow+0x9d0>
 800742c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007430:	2200      	movs	r2, #0
 8007432:	2300      	movs	r3, #0
 8007434:	f7f9 fb16 	bl	8000a64 <__aeabi_dcmplt>
 8007438:	3800      	subs	r0, #0
 800743a:	bf18      	it	ne
 800743c:	2001      	movne	r0, #1
 800743e:	e42b      	b.n	8006c98 <__ieee754_pow+0x228>
 8007440:	4642      	mov	r2, r8
 8007442:	464b      	mov	r3, r9
 8007444:	f7f8 fee4 	bl	8000210 <__aeabi_dsub>
 8007448:	4632      	mov	r2, r6
 800744a:	463b      	mov	r3, r7
 800744c:	f7f9 fb1e 	bl	8000a8c <__aeabi_dcmpge>
 8007450:	2800      	cmp	r0, #0
 8007452:	d1eb      	bne.n	800742c <__ieee754_pow+0x9bc>
 8007454:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80074f4 <__ieee754_pow+0xa84>
 8007458:	e6f7      	b.n	800724a <__ieee754_pow+0x7da>
 800745a:	469a      	mov	sl, r3
 800745c:	4b22      	ldr	r3, [pc, #136]	@ (80074e8 <__ieee754_pow+0xa78>)
 800745e:	459a      	cmp	sl, r3
 8007460:	f63f aef3 	bhi.w	800724a <__ieee754_pow+0x7da>
 8007464:	f8dd a010 	ldr.w	sl, [sp, #16]
 8007468:	e715      	b.n	8007296 <__ieee754_pow+0x826>
 800746a:	ec51 0b10 	vmov	r0, r1, d0
 800746e:	4619      	mov	r1, r3
 8007470:	e7cf      	b.n	8007412 <__ieee754_pow+0x9a2>
 8007472:	491a      	ldr	r1, [pc, #104]	@ (80074dc <__ieee754_pow+0xa6c>)
 8007474:	2000      	movs	r0, #0
 8007476:	f7ff bb18 	b.w	8006aaa <__ieee754_pow+0x3a>
 800747a:	2000      	movs	r0, #0
 800747c:	2100      	movs	r1, #0
 800747e:	f7ff bb14 	b.w	8006aaa <__ieee754_pow+0x3a>
 8007482:	4630      	mov	r0, r6
 8007484:	4639      	mov	r1, r7
 8007486:	f7ff bb10 	b.w	8006aaa <__ieee754_pow+0x3a>
 800748a:	460c      	mov	r4, r1
 800748c:	f7ff bb5e 	b.w	8006b4c <__ieee754_pow+0xdc>
 8007490:	2400      	movs	r4, #0
 8007492:	f7ff bb49 	b.w	8006b28 <__ieee754_pow+0xb8>
 8007496:	bf00      	nop
 8007498:	00000000 	.word	0x00000000
 800749c:	3fe62e43 	.word	0x3fe62e43
 80074a0:	fefa39ef 	.word	0xfefa39ef
 80074a4:	3fe62e42 	.word	0x3fe62e42
 80074a8:	0ca86c39 	.word	0x0ca86c39
 80074ac:	be205c61 	.word	0xbe205c61
 80074b0:	72bea4d0 	.word	0x72bea4d0
 80074b4:	3e663769 	.word	0x3e663769
 80074b8:	c5d26bf1 	.word	0xc5d26bf1
 80074bc:	3ebbbd41 	.word	0x3ebbbd41
 80074c0:	af25de2c 	.word	0xaf25de2c
 80074c4:	3f11566a 	.word	0x3f11566a
 80074c8:	16bebd93 	.word	0x16bebd93
 80074cc:	3f66c16c 	.word	0x3f66c16c
 80074d0:	5555553e 	.word	0x5555553e
 80074d4:	3fc55555 	.word	0x3fc55555
 80074d8:	fff00000 	.word	0xfff00000
 80074dc:	3ff00000 	.word	0x3ff00000
 80074e0:	4090cbff 	.word	0x4090cbff
 80074e4:	3f6f3400 	.word	0x3f6f3400
 80074e8:	3fe00000 	.word	0x3fe00000
 80074ec:	652b82fe 	.word	0x652b82fe
 80074f0:	3c971547 	.word	0x3c971547
 80074f4:	4090cc00 	.word	0x4090cc00

080074f8 <fabs>:
 80074f8:	ec51 0b10 	vmov	r0, r1, d0
 80074fc:	4602      	mov	r2, r0
 80074fe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007502:	ec43 2b10 	vmov	d0, r2, r3
 8007506:	4770      	bx	lr

08007508 <scalbn>:
 8007508:	b570      	push	{r4, r5, r6, lr}
 800750a:	ec55 4b10 	vmov	r4, r5, d0
 800750e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8007512:	4606      	mov	r6, r0
 8007514:	462b      	mov	r3, r5
 8007516:	b991      	cbnz	r1, 800753e <scalbn+0x36>
 8007518:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800751c:	4323      	orrs	r3, r4
 800751e:	d03d      	beq.n	800759c <scalbn+0x94>
 8007520:	4b35      	ldr	r3, [pc, #212]	@ (80075f8 <scalbn+0xf0>)
 8007522:	4620      	mov	r0, r4
 8007524:	4629      	mov	r1, r5
 8007526:	2200      	movs	r2, #0
 8007528:	f7f9 f82a 	bl	8000580 <__aeabi_dmul>
 800752c:	4b33      	ldr	r3, [pc, #204]	@ (80075fc <scalbn+0xf4>)
 800752e:	429e      	cmp	r6, r3
 8007530:	4604      	mov	r4, r0
 8007532:	460d      	mov	r5, r1
 8007534:	da0f      	bge.n	8007556 <scalbn+0x4e>
 8007536:	a328      	add	r3, pc, #160	@ (adr r3, 80075d8 <scalbn+0xd0>)
 8007538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753c:	e01e      	b.n	800757c <scalbn+0x74>
 800753e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8007542:	4291      	cmp	r1, r2
 8007544:	d10b      	bne.n	800755e <scalbn+0x56>
 8007546:	4622      	mov	r2, r4
 8007548:	4620      	mov	r0, r4
 800754a:	4629      	mov	r1, r5
 800754c:	f7f8 fe62 	bl	8000214 <__adddf3>
 8007550:	4604      	mov	r4, r0
 8007552:	460d      	mov	r5, r1
 8007554:	e022      	b.n	800759c <scalbn+0x94>
 8007556:	460b      	mov	r3, r1
 8007558:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800755c:	3936      	subs	r1, #54	@ 0x36
 800755e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8007562:	4296      	cmp	r6, r2
 8007564:	dd0d      	ble.n	8007582 <scalbn+0x7a>
 8007566:	2d00      	cmp	r5, #0
 8007568:	a11d      	add	r1, pc, #116	@ (adr r1, 80075e0 <scalbn+0xd8>)
 800756a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800756e:	da02      	bge.n	8007576 <scalbn+0x6e>
 8007570:	a11d      	add	r1, pc, #116	@ (adr r1, 80075e8 <scalbn+0xe0>)
 8007572:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007576:	a31a      	add	r3, pc, #104	@ (adr r3, 80075e0 <scalbn+0xd8>)
 8007578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757c:	f7f9 f800 	bl	8000580 <__aeabi_dmul>
 8007580:	e7e6      	b.n	8007550 <scalbn+0x48>
 8007582:	1872      	adds	r2, r6, r1
 8007584:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8007588:	428a      	cmp	r2, r1
 800758a:	dcec      	bgt.n	8007566 <scalbn+0x5e>
 800758c:	2a00      	cmp	r2, #0
 800758e:	dd08      	ble.n	80075a2 <scalbn+0x9a>
 8007590:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007594:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007598:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800759c:	ec45 4b10 	vmov	d0, r4, r5
 80075a0:	bd70      	pop	{r4, r5, r6, pc}
 80075a2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80075a6:	da08      	bge.n	80075ba <scalbn+0xb2>
 80075a8:	2d00      	cmp	r5, #0
 80075aa:	a10b      	add	r1, pc, #44	@ (adr r1, 80075d8 <scalbn+0xd0>)
 80075ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075b0:	dac1      	bge.n	8007536 <scalbn+0x2e>
 80075b2:	a10f      	add	r1, pc, #60	@ (adr r1, 80075f0 <scalbn+0xe8>)
 80075b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075b8:	e7bd      	b.n	8007536 <scalbn+0x2e>
 80075ba:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80075be:	3236      	adds	r2, #54	@ 0x36
 80075c0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80075c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80075c8:	4620      	mov	r0, r4
 80075ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007600 <scalbn+0xf8>)
 80075cc:	4629      	mov	r1, r5
 80075ce:	2200      	movs	r2, #0
 80075d0:	e7d4      	b.n	800757c <scalbn+0x74>
 80075d2:	bf00      	nop
 80075d4:	f3af 8000 	nop.w
 80075d8:	c2f8f359 	.word	0xc2f8f359
 80075dc:	01a56e1f 	.word	0x01a56e1f
 80075e0:	8800759c 	.word	0x8800759c
 80075e4:	7e37e43c 	.word	0x7e37e43c
 80075e8:	8800759c 	.word	0x8800759c
 80075ec:	fe37e43c 	.word	0xfe37e43c
 80075f0:	c2f8f359 	.word	0xc2f8f359
 80075f4:	81a56e1f 	.word	0x81a56e1f
 80075f8:	43500000 	.word	0x43500000
 80075fc:	ffff3cb0 	.word	0xffff3cb0
 8007600:	3c900000 	.word	0x3c900000

08007604 <with_errno>:
 8007604:	b510      	push	{r4, lr}
 8007606:	ed2d 8b02 	vpush	{d8}
 800760a:	eeb0 8a40 	vmov.f32	s16, s0
 800760e:	eef0 8a60 	vmov.f32	s17, s1
 8007612:	4604      	mov	r4, r0
 8007614:	f000 f83c 	bl	8007690 <__errno>
 8007618:	eeb0 0a48 	vmov.f32	s0, s16
 800761c:	eef0 0a68 	vmov.f32	s1, s17
 8007620:	ecbd 8b02 	vpop	{d8}
 8007624:	6004      	str	r4, [r0, #0]
 8007626:	bd10      	pop	{r4, pc}

08007628 <xflow>:
 8007628:	4603      	mov	r3, r0
 800762a:	b507      	push	{r0, r1, r2, lr}
 800762c:	ec51 0b10 	vmov	r0, r1, d0
 8007630:	b183      	cbz	r3, 8007654 <xflow+0x2c>
 8007632:	4602      	mov	r2, r0
 8007634:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007638:	e9cd 2300 	strd	r2, r3, [sp]
 800763c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007640:	f7f8 ff9e 	bl	8000580 <__aeabi_dmul>
 8007644:	ec41 0b10 	vmov	d0, r0, r1
 8007648:	2022      	movs	r0, #34	@ 0x22
 800764a:	b003      	add	sp, #12
 800764c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007650:	f7ff bfd8 	b.w	8007604 <with_errno>
 8007654:	4602      	mov	r2, r0
 8007656:	460b      	mov	r3, r1
 8007658:	e7ee      	b.n	8007638 <xflow+0x10>
 800765a:	0000      	movs	r0, r0
 800765c:	0000      	movs	r0, r0
	...

08007660 <__math_uflow>:
 8007660:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007668 <__math_uflow+0x8>
 8007664:	f7ff bfe0 	b.w	8007628 <xflow>
 8007668:	00000000 	.word	0x00000000
 800766c:	10000000 	.word	0x10000000

08007670 <__math_oflow>:
 8007670:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007678 <__math_oflow+0x8>
 8007674:	f7ff bfd8 	b.w	8007628 <xflow>
 8007678:	00000000 	.word	0x00000000
 800767c:	70000000 	.word	0x70000000

08007680 <memset>:
 8007680:	4402      	add	r2, r0
 8007682:	4603      	mov	r3, r0
 8007684:	4293      	cmp	r3, r2
 8007686:	d100      	bne.n	800768a <memset+0xa>
 8007688:	4770      	bx	lr
 800768a:	f803 1b01 	strb.w	r1, [r3], #1
 800768e:	e7f9      	b.n	8007684 <memset+0x4>

08007690 <__errno>:
 8007690:	4b01      	ldr	r3, [pc, #4]	@ (8007698 <__errno+0x8>)
 8007692:	6818      	ldr	r0, [r3, #0]
 8007694:	4770      	bx	lr
 8007696:	bf00      	nop
 8007698:	20000020 	.word	0x20000020

0800769c <__libc_init_array>:
 800769c:	b570      	push	{r4, r5, r6, lr}
 800769e:	4d0d      	ldr	r5, [pc, #52]	@ (80076d4 <__libc_init_array+0x38>)
 80076a0:	4c0d      	ldr	r4, [pc, #52]	@ (80076d8 <__libc_init_array+0x3c>)
 80076a2:	1b64      	subs	r4, r4, r5
 80076a4:	10a4      	asrs	r4, r4, #2
 80076a6:	2600      	movs	r6, #0
 80076a8:	42a6      	cmp	r6, r4
 80076aa:	d109      	bne.n	80076c0 <__libc_init_array+0x24>
 80076ac:	4d0b      	ldr	r5, [pc, #44]	@ (80076dc <__libc_init_array+0x40>)
 80076ae:	4c0c      	ldr	r4, [pc, #48]	@ (80076e0 <__libc_init_array+0x44>)
 80076b0:	f000 f818 	bl	80076e4 <_init>
 80076b4:	1b64      	subs	r4, r4, r5
 80076b6:	10a4      	asrs	r4, r4, #2
 80076b8:	2600      	movs	r6, #0
 80076ba:	42a6      	cmp	r6, r4
 80076bc:	d105      	bne.n	80076ca <__libc_init_array+0x2e>
 80076be:	bd70      	pop	{r4, r5, r6, pc}
 80076c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80076c4:	4798      	blx	r3
 80076c6:	3601      	adds	r6, #1
 80076c8:	e7ee      	b.n	80076a8 <__libc_init_array+0xc>
 80076ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80076ce:	4798      	blx	r3
 80076d0:	3601      	adds	r6, #1
 80076d2:	e7f2      	b.n	80076ba <__libc_init_array+0x1e>
 80076d4:	080077d8 	.word	0x080077d8
 80076d8:	080077d8 	.word	0x080077d8
 80076dc:	080077d8 	.word	0x080077d8
 80076e0:	080077dc 	.word	0x080077dc

080076e4 <_init>:
 80076e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076e6:	bf00      	nop
 80076e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ea:	bc08      	pop	{r3}
 80076ec:	469e      	mov	lr, r3
 80076ee:	4770      	bx	lr

080076f0 <_fini>:
 80076f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076f2:	bf00      	nop
 80076f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076f6:	bc08      	pop	{r3}
 80076f8:	469e      	mov	lr, r3
 80076fa:	4770      	bx	lr
