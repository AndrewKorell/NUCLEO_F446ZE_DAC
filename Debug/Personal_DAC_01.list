
Personal_DAC_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f80  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08006148  08006148  00007148  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006338  08006338  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  08006338  08006338  00007338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006340  08006340  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006340  08006340  00007340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006344  08006344  00007344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006348  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f0  2000000c  08006354  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005fc  08006354  000085fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012926  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002874  00000000  00000000  0001a962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  0001d1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d0e  00000000  00000000  0001e290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022b85  00000000  00000000  0001ef9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014381  00000000  00000000  00041b23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4a8f  00000000  00000000  00055ea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012a933  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bb8  00000000  00000000  0012a978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0012f530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006130 	.word	0x08006130

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08006130 	.word	0x08006130

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2uiz>:
 8000b04:	004a      	lsls	r2, r1, #1
 8000b06:	d211      	bcs.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b08:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b0c:	d211      	bcs.n	8000b32 <__aeabi_d2uiz+0x2e>
 8000b0e:	d50d      	bpl.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b10:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b18:	d40e      	bmi.n	8000b38 <__aeabi_d2uiz+0x34>
 8000b1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b36:	d102      	bne.n	8000b3e <__aeabi_d2uiz+0x3a>
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_d2f>:
 8000b44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b4c:	bf24      	itt	cs
 8000b4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b56:	d90d      	bls.n	8000b74 <__aeabi_d2f+0x30>
 8000b58:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b64:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b6c:	bf08      	it	eq
 8000b6e:	f020 0001 	biceq.w	r0, r0, #1
 8000b72:	4770      	bx	lr
 8000b74:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b78:	d121      	bne.n	8000bbe <__aeabi_d2f+0x7a>
 8000b7a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b7e:	bfbc      	itt	lt
 8000b80:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b84:	4770      	bxlt	lr
 8000b86:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8e:	f1c2 0218 	rsb	r2, r2, #24
 8000b92:	f1c2 0c20 	rsb	ip, r2, #32
 8000b96:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9e:	bf18      	it	ne
 8000ba0:	f040 0001 	orrne.w	r0, r0, #1
 8000ba4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bac:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb0:	ea40 000c 	orr.w	r0, r0, ip
 8000bb4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bbc:	e7cc      	b.n	8000b58 <__aeabi_d2f+0x14>
 8000bbe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc2:	d107      	bne.n	8000bd4 <__aeabi_d2f+0x90>
 8000bc4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc8:	bf1e      	ittt	ne
 8000bca:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bce:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bd2:	4770      	bxne	lr
 8000bd4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bdc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop

08000be4 <__aeabi_uldivmod>:
 8000be4:	b953      	cbnz	r3, 8000bfc <__aeabi_uldivmod+0x18>
 8000be6:	b94a      	cbnz	r2, 8000bfc <__aeabi_uldivmod+0x18>
 8000be8:	2900      	cmp	r1, #0
 8000bea:	bf08      	it	eq
 8000bec:	2800      	cmpeq	r0, #0
 8000bee:	bf1c      	itt	ne
 8000bf0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf8:	f000 b96a 	b.w	8000ed0 <__aeabi_idiv0>
 8000bfc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c04:	f000 f806 	bl	8000c14 <__udivmoddi4>
 8000c08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c10:	b004      	add	sp, #16
 8000c12:	4770      	bx	lr

08000c14 <__udivmoddi4>:
 8000c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c18:	9d08      	ldr	r5, [sp, #32]
 8000c1a:	460c      	mov	r4, r1
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d14e      	bne.n	8000cbe <__udivmoddi4+0xaa>
 8000c20:	4694      	mov	ip, r2
 8000c22:	458c      	cmp	ip, r1
 8000c24:	4686      	mov	lr, r0
 8000c26:	fab2 f282 	clz	r2, r2
 8000c2a:	d962      	bls.n	8000cf2 <__udivmoddi4+0xde>
 8000c2c:	b14a      	cbz	r2, 8000c42 <__udivmoddi4+0x2e>
 8000c2e:	f1c2 0320 	rsb	r3, r2, #32
 8000c32:	4091      	lsls	r1, r2
 8000c34:	fa20 f303 	lsr.w	r3, r0, r3
 8000c38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c3c:	4319      	orrs	r1, r3
 8000c3e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c46:	fa1f f68c 	uxth.w	r6, ip
 8000c4a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c4e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c52:	fb07 1114 	mls	r1, r7, r4, r1
 8000c56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5a:	fb04 f106 	mul.w	r1, r4, r6
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x64>
 8000c62:	eb1c 0303 	adds.w	r3, ip, r3
 8000c66:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6a:	f080 8112 	bcs.w	8000e92 <__udivmoddi4+0x27e>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 810f 	bls.w	8000e92 <__udivmoddi4+0x27e>
 8000c74:	3c02      	subs	r4, #2
 8000c76:	4463      	add	r3, ip
 8000c78:	1a59      	subs	r1, r3, r1
 8000c7a:	fa1f f38e 	uxth.w	r3, lr
 8000c7e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c82:	fb07 1110 	mls	r1, r7, r0, r1
 8000c86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8a:	fb00 f606 	mul.w	r6, r0, r6
 8000c8e:	429e      	cmp	r6, r3
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x94>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9a:	f080 80fc 	bcs.w	8000e96 <__udivmoddi4+0x282>
 8000c9e:	429e      	cmp	r6, r3
 8000ca0:	f240 80f9 	bls.w	8000e96 <__udivmoddi4+0x282>
 8000ca4:	4463      	add	r3, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	1b9b      	subs	r3, r3, r6
 8000caa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa6>
 8000cb2:	40d3      	lsrs	r3, r2
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xba>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb4>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa6>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x150>
 8000cd6:	42a3      	cmp	r3, r4
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xcc>
 8000cda:	4290      	cmp	r0, r2
 8000cdc:	f0c0 80f0 	bcc.w	8000ec0 <__udivmoddi4+0x2ac>
 8000ce0:	1a86      	subs	r6, r0, r2
 8000ce2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	2d00      	cmp	r5, #0
 8000cea:	d0e6      	beq.n	8000cba <__udivmoddi4+0xa6>
 8000cec:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf0:	e7e3      	b.n	8000cba <__udivmoddi4+0xa6>
 8000cf2:	2a00      	cmp	r2, #0
 8000cf4:	f040 8090 	bne.w	8000e18 <__udivmoddi4+0x204>
 8000cf8:	eba1 040c 	sub.w	r4, r1, ip
 8000cfc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d00:	fa1f f78c 	uxth.w	r7, ip
 8000d04:	2101      	movs	r1, #1
 8000d06:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d0e:	fb08 4416 	mls	r4, r8, r6, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb07 f006 	mul.w	r0, r7, r6
 8000d1a:	4298      	cmp	r0, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x11c>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x11a>
 8000d28:	4298      	cmp	r0, r3
 8000d2a:	f200 80cd 	bhi.w	8000ec8 <__udivmoddi4+0x2b4>
 8000d2e:	4626      	mov	r6, r4
 8000d30:	1a1c      	subs	r4, r3, r0
 8000d32:	fa1f f38e 	uxth.w	r3, lr
 8000d36:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3a:	fb08 4410 	mls	r4, r8, r0, r4
 8000d3e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d42:	fb00 f707 	mul.w	r7, r0, r7
 8000d46:	429f      	cmp	r7, r3
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x148>
 8000d4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x146>
 8000d54:	429f      	cmp	r7, r3
 8000d56:	f200 80b0 	bhi.w	8000eba <__udivmoddi4+0x2a6>
 8000d5a:	4620      	mov	r0, r4
 8000d5c:	1bdb      	subs	r3, r3, r7
 8000d5e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x9c>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d74:	fa04 f301 	lsl.w	r3, r4, r1
 8000d78:	ea43 030c 	orr.w	r3, r3, ip
 8000d7c:	40f4      	lsrs	r4, r6
 8000d7e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d82:	0c38      	lsrs	r0, r7, #16
 8000d84:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d88:	fbb4 fef0 	udiv	lr, r4, r0
 8000d8c:	fa1f fc87 	uxth.w	ip, r7
 8000d90:	fb00 441e 	mls	r4, r0, lr, r4
 8000d94:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d98:	fb0e f90c 	mul.w	r9, lr, ip
 8000d9c:	45a1      	cmp	r9, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d90a      	bls.n	8000dba <__udivmoddi4+0x1a6>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000daa:	f080 8084 	bcs.w	8000eb6 <__udivmoddi4+0x2a2>
 8000dae:	45a1      	cmp	r9, r4
 8000db0:	f240 8081 	bls.w	8000eb6 <__udivmoddi4+0x2a2>
 8000db4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	eba4 0409 	sub.w	r4, r4, r9
 8000dbe:	fa1f f983 	uxth.w	r9, r3
 8000dc2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dc6:	fb00 4413 	mls	r4, r0, r3, r4
 8000dca:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dce:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d907      	bls.n	8000de6 <__udivmoddi4+0x1d2>
 8000dd6:	193c      	adds	r4, r7, r4
 8000dd8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ddc:	d267      	bcs.n	8000eae <__udivmoddi4+0x29a>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d965      	bls.n	8000eae <__udivmoddi4+0x29a>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dea:	fba0 9302 	umull	r9, r3, r0, r2
 8000dee:	eba4 040c 	sub.w	r4, r4, ip
 8000df2:	429c      	cmp	r4, r3
 8000df4:	46ce      	mov	lr, r9
 8000df6:	469c      	mov	ip, r3
 8000df8:	d351      	bcc.n	8000e9e <__udivmoddi4+0x28a>
 8000dfa:	d04e      	beq.n	8000e9a <__udivmoddi4+0x286>
 8000dfc:	b155      	cbz	r5, 8000e14 <__udivmoddi4+0x200>
 8000dfe:	ebb8 030e 	subs.w	r3, r8, lr
 8000e02:	eb64 040c 	sbc.w	r4, r4, ip
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	40cb      	lsrs	r3, r1
 8000e0c:	431e      	orrs	r6, r3
 8000e0e:	40cc      	lsrs	r4, r1
 8000e10:	e9c5 6400 	strd	r6, r4, [r5]
 8000e14:	2100      	movs	r1, #0
 8000e16:	e750      	b.n	8000cba <__udivmoddi4+0xa6>
 8000e18:	f1c2 0320 	rsb	r3, r2, #32
 8000e1c:	fa20 f103 	lsr.w	r1, r0, r3
 8000e20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e24:	fa24 f303 	lsr.w	r3, r4, r3
 8000e28:	4094      	lsls	r4, r2
 8000e2a:	430c      	orrs	r4, r1
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e34:	fa1f f78c 	uxth.w	r7, ip
 8000e38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e3c:	fb08 3110 	mls	r1, r8, r0, r3
 8000e40:	0c23      	lsrs	r3, r4, #16
 8000e42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e46:	fb00 f107 	mul.w	r1, r0, r7
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x24c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e56:	d22c      	bcs.n	8000eb2 <__udivmoddi4+0x29e>
 8000e58:	4299      	cmp	r1, r3
 8000e5a:	d92a      	bls.n	8000eb2 <__udivmoddi4+0x29e>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4463      	add	r3, ip
 8000e60:	1a5b      	subs	r3, r3, r1
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e68:	fb08 3311 	mls	r3, r8, r1, r3
 8000e6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e70:	fb01 f307 	mul.w	r3, r1, r7
 8000e74:	42a3      	cmp	r3, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x276>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e80:	d213      	bcs.n	8000eaa <__udivmoddi4+0x296>
 8000e82:	42a3      	cmp	r3, r4
 8000e84:	d911      	bls.n	8000eaa <__udivmoddi4+0x296>
 8000e86:	3902      	subs	r1, #2
 8000e88:	4464      	add	r4, ip
 8000e8a:	1ae4      	subs	r4, r4, r3
 8000e8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e90:	e739      	b.n	8000d06 <__udivmoddi4+0xf2>
 8000e92:	4604      	mov	r4, r0
 8000e94:	e6f0      	b.n	8000c78 <__udivmoddi4+0x64>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e706      	b.n	8000ca8 <__udivmoddi4+0x94>
 8000e9a:	45c8      	cmp	r8, r9
 8000e9c:	d2ae      	bcs.n	8000dfc <__udivmoddi4+0x1e8>
 8000e9e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ea6:	3801      	subs	r0, #1
 8000ea8:	e7a8      	b.n	8000dfc <__udivmoddi4+0x1e8>
 8000eaa:	4631      	mov	r1, r6
 8000eac:	e7ed      	b.n	8000e8a <__udivmoddi4+0x276>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	e799      	b.n	8000de6 <__udivmoddi4+0x1d2>
 8000eb2:	4630      	mov	r0, r6
 8000eb4:	e7d4      	b.n	8000e60 <__udivmoddi4+0x24c>
 8000eb6:	46d6      	mov	lr, sl
 8000eb8:	e77f      	b.n	8000dba <__udivmoddi4+0x1a6>
 8000eba:	4463      	add	r3, ip
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	e74d      	b.n	8000d5c <__udivmoddi4+0x148>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	4623      	mov	r3, r4
 8000ec4:	4608      	mov	r0, r1
 8000ec6:	e70f      	b.n	8000ce8 <__udivmoddi4+0xd4>
 8000ec8:	3e02      	subs	r6, #2
 8000eca:	4463      	add	r3, ip
 8000ecc:	e730      	b.n	8000d30 <__udivmoddi4+0x11c>
 8000ece:	bf00      	nop

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	0000      	movs	r0, r0
	...

08000ed8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000edc:	b08c      	sub	sp, #48	@ 0x30
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee0:	f000 fd20 	bl	8001924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee4:	f000 f8ec 	bl	80010c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee8:	f000 fa42 	bl	8001370 <MX_GPIO_Init>
  MX_DAC_Init();
 8000eec:	f000 f954 	bl	8001198 <MX_DAC_Init>
  MX_TIM6_Init();
 8000ef0:	f000 f986 	bl	8001200 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 8000ef4:	f000 f9e4 	bl	80012c0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ef8:	f000 fa0c 	bl	8001314 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 8000efc:	f000 f9b6 	bl	800126c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  uint16_t bufferSize = 10;
 8000f00:	230a      	movs	r3, #10
 8000f02:	857b      	strh	r3, [r7, #42]	@ 0x2a
  uint8_t dataBuffer[bufferSize];
 8000f04:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8000f06:	460b      	mov	r3, r1
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f0c:	b28b      	uxth	r3, r1
 8000f0e:	2200      	movs	r2, #0
 8000f10:	603b      	str	r3, [r7, #0]
 8000f12:	607a      	str	r2, [r7, #4]
 8000f14:	f04f 0200 	mov.w	r2, #0
 8000f18:	f04f 0300 	mov.w	r3, #0
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	00c3      	lsls	r3, r0, #3
 8000f20:	6838      	ldr	r0, [r7, #0]
 8000f22:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000f26:	6838      	ldr	r0, [r7, #0]
 8000f28:	00c2      	lsls	r2, r0, #3
 8000f2a:	b28b      	uxth	r3, r1
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	469a      	mov	sl, r3
 8000f30:	4693      	mov	fp, r2
 8000f32:	f04f 0200 	mov.w	r2, #0
 8000f36:	f04f 0300 	mov.w	r3, #0
 8000f3a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000f3e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000f42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000f46:	460b      	mov	r3, r1
 8000f48:	3307      	adds	r3, #7
 8000f4a:	08db      	lsrs	r3, r3, #3
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	ebad 0d03 	sub.w	sp, sp, r3
 8000f52:	466b      	mov	r3, sp
 8000f54:	3300      	adds	r3, #0
 8000f56:	623b      	str	r3, [r7, #32]
  HAL_UART_Receive_IT(&huart2, dataBuffer, bufferSize);
 8000f58:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	6a39      	ldr	r1, [r7, #32]
 8000f5e:	4854      	ldr	r0, [pc, #336]	@ (80010b0 <main+0x1d8>)
 8000f60:	f002 fe6c 	bl	8003c3c <HAL_UART_Receive_IT>

  HAL_TIM_Base_Start_IT(&htim6);
 8000f64:	4853      	ldr	r0, [pc, #332]	@ (80010b4 <main+0x1dc>)
 8000f66:	f002 fc81 	bl	800386c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t sample = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  uint16_t no_samples = 32;
 8000f6e:	2320      	movs	r3, #32
 8000f70:	83fb      	strh	r3, [r7, #30]

  uint16_t sample_collect[no_samples];
 8000f72:	8bf9      	ldrh	r1, [r7, #30]
 8000f74:	460b      	mov	r3, r1
 8000f76:	3b01      	subs	r3, #1
 8000f78:	61bb      	str	r3, [r7, #24]
 8000f7a:	b28b      	uxth	r3, r1
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	4698      	mov	r8, r3
 8000f80:	4691      	mov	r9, r2
 8000f82:	f04f 0200 	mov.w	r2, #0
 8000f86:	f04f 0300 	mov.w	r3, #0
 8000f8a:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8000f8e:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8000f92:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8000f96:	b28b      	uxth	r3, r1
 8000f98:	2200      	movs	r2, #0
 8000f9a:	461c      	mov	r4, r3
 8000f9c:	4615      	mov	r5, r2
 8000f9e:	f04f 0200 	mov.w	r2, #0
 8000fa2:	f04f 0300 	mov.w	r3, #0
 8000fa6:	012b      	lsls	r3, r5, #4
 8000fa8:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000fac:	0122      	lsls	r2, r4, #4
 8000fae:	460b      	mov	r3, r1
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	3307      	adds	r3, #7
 8000fb4:	08db      	lsrs	r3, r3, #3
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	ebad 0d03 	sub.w	sp, sp, r3
 8000fbc:	466b      	mov	r3, sp
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	085b      	lsrs	r3, r3, #1
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	617b      	str	r3, [r7, #20]

  float temp_a = ((2.0 * 3.14)/ ((float) no_samples));
 8000fc6:	8bfb      	ldrh	r3, [r7, #30]
 8000fc8:	ee07 3a90 	vmov	s15, r3
 8000fcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fd0:	ee17 0a90 	vmov	r0, s15
 8000fd4:	f7ff fa7c 	bl	80004d0 <__aeabi_f2d>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	a132      	add	r1, pc, #200	@ (adr r1, 80010a8 <main+0x1d0>)
 8000fde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000fe2:	f7ff fbf7 	bl	80007d4 <__aeabi_ddiv>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4610      	mov	r0, r2
 8000fec:	4619      	mov	r1, r3
 8000fee:	f7ff fda9 	bl	8000b44 <__aeabi_d2f>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	613b      	str	r3, [r7, #16]
  float temp_b = ((0xfff+1)/2);
 8000ff6:	f04f 438a 	mov.w	r3, #1157627904	@ 0x45000000
 8000ffa:	60fb      	str	r3, [r7, #12]
  uint16_t out_value = 2048;
 8000ffc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001000:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  sample_collect[sample] = out_value;
 8001002:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8001008:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  //while((int) hdac.State != (int)HAL_DAC_STATE_READY);
	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, out_value);
 800100c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800100e:	2200      	movs	r2, #0
 8001010:	2100      	movs	r1, #0
 8001012:	4829      	ldr	r0, [pc, #164]	@ (80010b8 <main+0x1e0>)
 8001014:	f000 fea6 	bl	8001d64 <HAL_DAC_SetValue>
	  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001018:	2100      	movs	r1, #0
 800101a:	4827      	ldr	r0, [pc, #156]	@ (80010b8 <main+0x1e0>)
 800101c:	f000 fe4b 	bl	8001cb6 <HAL_DAC_Start>

	  uint32_t current_tick = HAL_GetTick();
 8001020:	f000 fce6 	bl	80019f0 <HAL_GetTick>
 8001024:	60b8      	str	r0, [r7, #8]
	  //while((int) hdac.State == (int)HAL_DAC_STATE_BUSY);
	  while(HAL_GetTick() < (current_tick+2));
 8001026:	bf00      	nop
 8001028:	f000 fce2 	bl	80019f0 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	3302      	adds	r3, #2
 8001032:	429a      	cmp	r2, r3
 8001034:	d3f8      	bcc.n	8001028 <main+0x150>
	  sample = sample + 1;
 8001036:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001038:	3301      	adds	r3, #1
 800103a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	  if(sample >= no_samples)
 800103c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800103e:	8bfb      	ldrh	r3, [r7, #30]
 8001040:	429a      	cmp	r2, r3
 8001042:	d301      	bcc.n	8001048 <main+0x170>
	  {
		  sample = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	  }
	  out_value = (uint16_t) ((sin(sample * temp_a) + 1) * temp_b);
 8001048:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800104a:	ee07 3a90 	vmov	s15, r3
 800104e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001052:	edd7 7a04 	vldr	s15, [r7, #16]
 8001056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800105a:	ee17 0a90 	vmov	r0, s15
 800105e:	f7ff fa37 	bl	80004d0 <__aeabi_f2d>
 8001062:	4602      	mov	r2, r0
 8001064:	460b      	mov	r3, r1
 8001066:	ec43 2b10 	vmov	d0, r2, r3
 800106a:	f004 f831 	bl	80050d0 <sin>
 800106e:	ec51 0b10 	vmov	r0, r1, d0
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	4b11      	ldr	r3, [pc, #68]	@ (80010bc <main+0x1e4>)
 8001078:	f7ff f8cc 	bl	8000214 <__adddf3>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4614      	mov	r4, r2
 8001082:	461d      	mov	r5, r3
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f7ff fa23 	bl	80004d0 <__aeabi_f2d>
 800108a:	4602      	mov	r2, r0
 800108c:	460b      	mov	r3, r1
 800108e:	4620      	mov	r0, r4
 8001090:	4629      	mov	r1, r5
 8001092:	f7ff fa75 	bl	8000580 <__aeabi_dmul>
 8001096:	4602      	mov	r2, r0
 8001098:	460b      	mov	r3, r1
 800109a:	4610      	mov	r0, r2
 800109c:	4619      	mov	r1, r3
 800109e:	f7ff fd31 	bl	8000b04 <__aeabi_d2uiz>
 80010a2:	4603      	mov	r3, r0
 80010a4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  {
 80010a6:	e7ac      	b.n	8001002 <main+0x12a>
 80010a8:	51eb851f 	.word	0x51eb851f
 80010ac:	40191eb8 	.word	0x40191eb8
 80010b0:	20000084 	.word	0x20000084
 80010b4:	2000003c 	.word	0x2000003c
 80010b8:	20000028 	.word	0x20000028
 80010bc:	3ff00000 	.word	0x3ff00000

080010c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b094      	sub	sp, #80	@ 0x50
 80010c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010c6:	f107 031c 	add.w	r3, r7, #28
 80010ca:	2234      	movs	r2, #52	@ 0x34
 80010cc:	2100      	movs	r1, #0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f003 ffd1 	bl	8005076 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d4:	f107 0308 	add.w	r3, r7, #8
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e4:	2300      	movs	r3, #0
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	4b29      	ldr	r3, [pc, #164]	@ (8001190 <SystemClock_Config+0xd0>)
 80010ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ec:	4a28      	ldr	r2, [pc, #160]	@ (8001190 <SystemClock_Config+0xd0>)
 80010ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80010f4:	4b26      	ldr	r3, [pc, #152]	@ (8001190 <SystemClock_Config+0xd0>)
 80010f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001100:	2300      	movs	r3, #0
 8001102:	603b      	str	r3, [r7, #0]
 8001104:	4b23      	ldr	r3, [pc, #140]	@ (8001194 <SystemClock_Config+0xd4>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a22      	ldr	r2, [pc, #136]	@ (8001194 <SystemClock_Config+0xd4>)
 800110a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800110e:	6013      	str	r3, [r2, #0]
 8001110:	4b20      	ldr	r3, [pc, #128]	@ (8001194 <SystemClock_Config+0xd4>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001118:	603b      	str	r3, [r7, #0]
 800111a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800111c:	2301      	movs	r3, #1
 800111e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001120:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001124:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001126:	2302      	movs	r3, #2
 8001128:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800112a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800112e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001130:	2304      	movs	r3, #4
 8001132:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001134:	23a8      	movs	r3, #168	@ 0xa8
 8001136:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001138:	2302      	movs	r3, #2
 800113a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800113c:	2307      	movs	r3, #7
 800113e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001140:	2302      	movs	r3, #2
 8001142:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001144:	f107 031c 	add.w	r3, r7, #28
 8001148:	4618      	mov	r0, r3
 800114a:	f002 f8a1 	bl	8003290 <HAL_RCC_OscConfig>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001154:	f000 f9e0 	bl	8001518 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001158:	230f      	movs	r3, #15
 800115a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800115c:	2302      	movs	r3, #2
 800115e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001160:	2300      	movs	r3, #0
 8001162:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001164:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001168:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800116a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800116e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001170:	f107 0308 	add.w	r3, r7, #8
 8001174:	2105      	movs	r1, #5
 8001176:	4618      	mov	r0, r3
 8001178:	f001 fa16 	bl	80025a8 <HAL_RCC_ClockConfig>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001182:	f000 f9c9 	bl	8001518 <Error_Handler>
  }
}
 8001186:	bf00      	nop
 8001188:	3750      	adds	r7, #80	@ 0x50
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800
 8001194:	40007000 	.word	0x40007000

08001198 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800119e:	463b      	mov	r3, r7
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80011a6:	4b14      	ldr	r3, [pc, #80]	@ (80011f8 <MX_DAC_Init+0x60>)
 80011a8:	4a14      	ldr	r2, [pc, #80]	@ (80011fc <MX_DAC_Init+0x64>)
 80011aa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80011ac:	4812      	ldr	r0, [pc, #72]	@ (80011f8 <MX_DAC_Init+0x60>)
 80011ae:	f000 fd60 	bl	8001c72 <HAL_DAC_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80011b8:	f000 f9ae 	bl	8001518 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80011bc:	2300      	movs	r3, #0
 80011be:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011c4:	463b      	mov	r3, r7
 80011c6:	2200      	movs	r2, #0
 80011c8:	4619      	mov	r1, r3
 80011ca:	480b      	ldr	r0, [pc, #44]	@ (80011f8 <MX_DAC_Init+0x60>)
 80011cc:	f000 fdf4 	bl	8001db8 <HAL_DAC_ConfigChannel>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80011d6:	f000 f99f 	bl	8001518 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80011da:	463b      	mov	r3, r7
 80011dc:	2210      	movs	r2, #16
 80011de:	4619      	mov	r1, r3
 80011e0:	4805      	ldr	r0, [pc, #20]	@ (80011f8 <MX_DAC_Init+0x60>)
 80011e2:	f000 fde9 	bl	8001db8 <HAL_DAC_ConfigChannel>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 80011ec:	f000 f994 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000028 	.word	0x20000028
 80011fc:	40007400 	.word	0x40007400

08001200 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001206:	463b      	mov	r3, r7
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800120e:	4b15      	ldr	r3, [pc, #84]	@ (8001264 <MX_TIM6_Init+0x64>)
 8001210:	4a15      	ldr	r2, [pc, #84]	@ (8001268 <MX_TIM6_Init+0x68>)
 8001212:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001214:	4b13      	ldr	r3, [pc, #76]	@ (8001264 <MX_TIM6_Init+0x64>)
 8001216:	2200      	movs	r2, #0
 8001218:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121a:	4b12      	ldr	r3, [pc, #72]	@ (8001264 <MX_TIM6_Init+0x64>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001220:	4b10      	ldr	r3, [pc, #64]	@ (8001264 <MX_TIM6_Init+0x64>)
 8001222:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001226:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001228:	4b0e      	ldr	r3, [pc, #56]	@ (8001264 <MX_TIM6_Init+0x64>)
 800122a:	2200      	movs	r2, #0
 800122c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800122e:	480d      	ldr	r0, [pc, #52]	@ (8001264 <MX_TIM6_Init+0x64>)
 8001230:	f002 facc 	bl	80037cc <HAL_TIM_Base_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800123a:	f000 f96d 	bl	8001518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800123e:	2300      	movs	r3, #0
 8001240:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001246:	463b      	mov	r3, r7
 8001248:	4619      	mov	r1, r3
 800124a:	4806      	ldr	r0, [pc, #24]	@ (8001264 <MX_TIM6_Init+0x64>)
 800124c:	f002 fc2a 	bl	8003aa4 <HAL_TIMEx_MasterConfigSynchronization>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001256:	f000 f95f 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	2000003c 	.word	0x2000003c
 8001268:	40001000 	.word	0x40001000

0800126c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001270:	4b11      	ldr	r3, [pc, #68]	@ (80012b8 <MX_USART2_UART_Init+0x4c>)
 8001272:	4a12      	ldr	r2, [pc, #72]	@ (80012bc <MX_USART2_UART_Init+0x50>)
 8001274:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001276:	4b10      	ldr	r3, [pc, #64]	@ (80012b8 <MX_USART2_UART_Init+0x4c>)
 8001278:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800127c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800127e:	4b0e      	ldr	r3, [pc, #56]	@ (80012b8 <MX_USART2_UART_Init+0x4c>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001284:	4b0c      	ldr	r3, [pc, #48]	@ (80012b8 <MX_USART2_UART_Init+0x4c>)
 8001286:	2200      	movs	r2, #0
 8001288:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800128a:	4b0b      	ldr	r3, [pc, #44]	@ (80012b8 <MX_USART2_UART_Init+0x4c>)
 800128c:	2200      	movs	r2, #0
 800128e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001290:	4b09      	ldr	r3, [pc, #36]	@ (80012b8 <MX_USART2_UART_Init+0x4c>)
 8001292:	220c      	movs	r2, #12
 8001294:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001296:	4b08      	ldr	r3, [pc, #32]	@ (80012b8 <MX_USART2_UART_Init+0x4c>)
 8001298:	2200      	movs	r2, #0
 800129a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800129c:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <MX_USART2_UART_Init+0x4c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012a2:	4805      	ldr	r0, [pc, #20]	@ (80012b8 <MX_USART2_UART_Init+0x4c>)
 80012a4:	f002 fc7a 	bl	8003b9c <HAL_UART_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012ae:	f000 f933 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000084 	.word	0x20000084
 80012bc:	40004400 	.word	0x40004400

080012c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012c4:	4b11      	ldr	r3, [pc, #68]	@ (800130c <MX_USART3_UART_Init+0x4c>)
 80012c6:	4a12      	ldr	r2, [pc, #72]	@ (8001310 <MX_USART3_UART_Init+0x50>)
 80012c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012ca:	4b10      	ldr	r3, [pc, #64]	@ (800130c <MX_USART3_UART_Init+0x4c>)
 80012cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	@ (800130c <MX_USART3_UART_Init+0x4c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012d8:	4b0c      	ldr	r3, [pc, #48]	@ (800130c <MX_USART3_UART_Init+0x4c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012de:	4b0b      	ldr	r3, [pc, #44]	@ (800130c <MX_USART3_UART_Init+0x4c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012e4:	4b09      	ldr	r3, [pc, #36]	@ (800130c <MX_USART3_UART_Init+0x4c>)
 80012e6:	220c      	movs	r2, #12
 80012e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ea:	4b08      	ldr	r3, [pc, #32]	@ (800130c <MX_USART3_UART_Init+0x4c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f0:	4b06      	ldr	r3, [pc, #24]	@ (800130c <MX_USART3_UART_Init+0x4c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012f6:	4805      	ldr	r0, [pc, #20]	@ (800130c <MX_USART3_UART_Init+0x4c>)
 80012f8:	f002 fc50 	bl	8003b9c <HAL_UART_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001302:	f000 f909 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200000cc 	.word	0x200000cc
 8001310:	40004800 	.word	0x40004800

08001314 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001318:	4b14      	ldr	r3, [pc, #80]	@ (800136c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800131a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800131e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001320:	4b12      	ldr	r3, [pc, #72]	@ (800136c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001322:	2206      	movs	r2, #6
 8001324:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001326:	4b11      	ldr	r3, [pc, #68]	@ (800136c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001328:	2202      	movs	r2, #2
 800132a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800132c:	4b0f      	ldr	r3, [pc, #60]	@ (800136c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800132e:	2200      	movs	r2, #0
 8001330:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001332:	4b0e      	ldr	r3, [pc, #56]	@ (800136c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001334:	2202      	movs	r2, #2
 8001336:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001338:	4b0c      	ldr	r3, [pc, #48]	@ (800136c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800133a:	2201      	movs	r2, #1
 800133c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800133e:	4b0b      	ldr	r3, [pc, #44]	@ (800136c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001340:	2200      	movs	r2, #0
 8001342:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001344:	4b09      	ldr	r3, [pc, #36]	@ (800136c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001346:	2200      	movs	r2, #0
 8001348:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800134a:	4b08      	ldr	r3, [pc, #32]	@ (800136c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800134c:	2201      	movs	r2, #1
 800134e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001350:	4b06      	ldr	r3, [pc, #24]	@ (800136c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001352:	2200      	movs	r2, #0
 8001354:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001356:	4805      	ldr	r0, [pc, #20]	@ (800136c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001358:	f000 ffeb 	bl	8002332 <HAL_PCD_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001362:	f000 f8d9 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000114 	.word	0x20000114

08001370 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08c      	sub	sp, #48	@ 0x30
 8001374:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001376:	f107 031c 	add.w	r3, r7, #28
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]
 8001384:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	61bb      	str	r3, [r7, #24]
 800138a:	4b50      	ldr	r3, [pc, #320]	@ (80014cc <MX_GPIO_Init+0x15c>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138e:	4a4f      	ldr	r2, [pc, #316]	@ (80014cc <MX_GPIO_Init+0x15c>)
 8001390:	f043 0304 	orr.w	r3, r3, #4
 8001394:	6313      	str	r3, [r2, #48]	@ 0x30
 8001396:	4b4d      	ldr	r3, [pc, #308]	@ (80014cc <MX_GPIO_Init+0x15c>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	f003 0304 	and.w	r3, r3, #4
 800139e:	61bb      	str	r3, [r7, #24]
 80013a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
 80013a6:	4b49      	ldr	r3, [pc, #292]	@ (80014cc <MX_GPIO_Init+0x15c>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013aa:	4a48      	ldr	r2, [pc, #288]	@ (80014cc <MX_GPIO_Init+0x15c>)
 80013ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b2:	4b46      	ldr	r3, [pc, #280]	@ (80014cc <MX_GPIO_Init+0x15c>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	4b42      	ldr	r3, [pc, #264]	@ (80014cc <MX_GPIO_Init+0x15c>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	4a41      	ldr	r2, [pc, #260]	@ (80014cc <MX_GPIO_Init+0x15c>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ce:	4b3f      	ldr	r3, [pc, #252]	@ (80014cc <MX_GPIO_Init+0x15c>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	4b3b      	ldr	r3, [pc, #236]	@ (80014cc <MX_GPIO_Init+0x15c>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	4a3a      	ldr	r2, [pc, #232]	@ (80014cc <MX_GPIO_Init+0x15c>)
 80013e4:	f043 0302 	orr.w	r3, r3, #2
 80013e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ea:	4b38      	ldr	r3, [pc, #224]	@ (80014cc <MX_GPIO_Init+0x15c>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	4b34      	ldr	r3, [pc, #208]	@ (80014cc <MX_GPIO_Init+0x15c>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	4a33      	ldr	r2, [pc, #204]	@ (80014cc <MX_GPIO_Init+0x15c>)
 8001400:	f043 0308 	orr.w	r3, r3, #8
 8001404:	6313      	str	r3, [r2, #48]	@ 0x30
 8001406:	4b31      	ldr	r3, [pc, #196]	@ (80014cc <MX_GPIO_Init+0x15c>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	f003 0308 	and.w	r3, r3, #8
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	4b2d      	ldr	r3, [pc, #180]	@ (80014cc <MX_GPIO_Init+0x15c>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	4a2c      	ldr	r2, [pc, #176]	@ (80014cc <MX_GPIO_Init+0x15c>)
 800141c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001420:	6313      	str	r3, [r2, #48]	@ 0x30
 8001422:	4b2a      	ldr	r3, [pc, #168]	@ (80014cc <MX_GPIO_Init+0x15c>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800142e:	2200      	movs	r2, #0
 8001430:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001434:	4826      	ldr	r0, [pc, #152]	@ (80014d0 <MX_GPIO_Init+0x160>)
 8001436:	f000 ff3f 	bl	80022b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	2140      	movs	r1, #64	@ 0x40
 800143e:	4825      	ldr	r0, [pc, #148]	@ (80014d4 <MX_GPIO_Init+0x164>)
 8001440:	f000 ff3a 	bl	80022b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001444:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001448:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800144a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800144e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001454:	f107 031c 	add.w	r3, r7, #28
 8001458:	4619      	mov	r1, r3
 800145a:	481f      	ldr	r0, [pc, #124]	@ (80014d8 <MX_GPIO_Init+0x168>)
 800145c:	f000 fd98 	bl	8001f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001460:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001464:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001466:	2301      	movs	r3, #1
 8001468:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146e:	2300      	movs	r3, #0
 8001470:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001472:	f107 031c 	add.w	r3, r7, #28
 8001476:	4619      	mov	r1, r3
 8001478:	4815      	ldr	r0, [pc, #84]	@ (80014d0 <MX_GPIO_Init+0x160>)
 800147a:	f000 fd89 	bl	8001f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800147e:	2340      	movs	r3, #64	@ 0x40
 8001480:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001482:	2301      	movs	r3, #1
 8001484:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148a:	2300      	movs	r3, #0
 800148c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800148e:	f107 031c 	add.w	r3, r7, #28
 8001492:	4619      	mov	r1, r3
 8001494:	480f      	ldr	r0, [pc, #60]	@ (80014d4 <MX_GPIO_Init+0x164>)
 8001496:	f000 fd7b 	bl	8001f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800149a:	2380      	movs	r3, #128	@ 0x80
 800149c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800149e:	2300      	movs	r3, #0
 80014a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014a6:	f107 031c 	add.w	r3, r7, #28
 80014aa:	4619      	mov	r1, r3
 80014ac:	4809      	ldr	r0, [pc, #36]	@ (80014d4 <MX_GPIO_Init+0x164>)
 80014ae:	f000 fd6f 	bl	8001f90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2100      	movs	r1, #0
 80014b6:	2028      	movs	r0, #40	@ 0x28
 80014b8:	f000 fba5 	bl	8001c06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014bc:	2028      	movs	r0, #40	@ 0x28
 80014be:	f000 fbbe 	bl	8001c3e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014c2:	bf00      	nop
 80014c4:	3730      	adds	r7, #48	@ 0x30
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020400 	.word	0x40020400
 80014d4:	40021800 	.word	0x40021800
 80014d8:	40020800 	.word	0x40020800

080014dc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  if(huart == &huart2)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a06      	ldr	r2, [pc, #24]	@ (8001500 <HAL_UART_RxCpltCallback+0x24>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d104      	bne.n	80014f6 <HAL_UART_RxCpltCallback+0x1a>
  {
	  UART2_Receive(huart2.pRxBuffPtr);
 80014ec:	4b04      	ldr	r3, [pc, #16]	@ (8001500 <HAL_UART_RxCpltCallback+0x24>)
 80014ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f0:	4618      	mov	r0, r3
 80014f2:	f000 f807 	bl	8001504 <UART2_Receive>
  }

}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000084 	.word	0x20000084

08001504 <UART2_Receive>:

void UART2_Receive(uint8_t *rxBuffer)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]

}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800151c:	b672      	cpsid	i
}
 800151e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001520:	bf00      	nop
 8001522:	e7fd      	b.n	8001520 <Error_Handler+0x8>

08001524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	607b      	str	r3, [r7, #4]
 800152e:	4b10      	ldr	r3, [pc, #64]	@ (8001570 <HAL_MspInit+0x4c>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001532:	4a0f      	ldr	r2, [pc, #60]	@ (8001570 <HAL_MspInit+0x4c>)
 8001534:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001538:	6453      	str	r3, [r2, #68]	@ 0x44
 800153a:	4b0d      	ldr	r3, [pc, #52]	@ (8001570 <HAL_MspInit+0x4c>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	603b      	str	r3, [r7, #0]
 800154a:	4b09      	ldr	r3, [pc, #36]	@ (8001570 <HAL_MspInit+0x4c>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154e:	4a08      	ldr	r2, [pc, #32]	@ (8001570 <HAL_MspInit+0x4c>)
 8001550:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001554:	6413      	str	r3, [r2, #64]	@ 0x40
 8001556:	4b06      	ldr	r3, [pc, #24]	@ (8001570 <HAL_MspInit+0x4c>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800155e:	603b      	str	r3, [r7, #0]
 8001560:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800

08001574 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	@ 0x28
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a17      	ldr	r2, [pc, #92]	@ (80015f0 <HAL_DAC_MspInit+0x7c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d127      	bne.n	80015e6 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	4b16      	ldr	r3, [pc, #88]	@ (80015f4 <HAL_DAC_MspInit+0x80>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159e:	4a15      	ldr	r2, [pc, #84]	@ (80015f4 <HAL_DAC_MspInit+0x80>)
 80015a0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80015a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015a6:	4b13      	ldr	r3, [pc, #76]	@ (80015f4 <HAL_DAC_MspInit+0x80>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	4b0f      	ldr	r3, [pc, #60]	@ (80015f4 <HAL_DAC_MspInit+0x80>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	4a0e      	ldr	r2, [pc, #56]	@ (80015f4 <HAL_DAC_MspInit+0x80>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c2:	4b0c      	ldr	r3, [pc, #48]	@ (80015f4 <HAL_DAC_MspInit+0x80>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80015ce:	2330      	movs	r3, #48	@ 0x30
 80015d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015d2:	2303      	movs	r3, #3
 80015d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	4619      	mov	r1, r3
 80015e0:	4805      	ldr	r0, [pc, #20]	@ (80015f8 <HAL_DAC_MspInit+0x84>)
 80015e2:	f000 fcd5 	bl	8001f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80015e6:	bf00      	nop
 80015e8:	3728      	adds	r7, #40	@ 0x28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40007400 	.word	0x40007400
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40020000 	.word	0x40020000

080015fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a0b      	ldr	r2, [pc, #44]	@ (8001638 <HAL_TIM_Base_MspInit+0x3c>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d10d      	bne.n	800162a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	4b0a      	ldr	r3, [pc, #40]	@ (800163c <HAL_TIM_Base_MspInit+0x40>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001616:	4a09      	ldr	r2, [pc, #36]	@ (800163c <HAL_TIM_Base_MspInit+0x40>)
 8001618:	f043 0310 	orr.w	r3, r3, #16
 800161c:	6413      	str	r3, [r2, #64]	@ 0x40
 800161e:	4b07      	ldr	r3, [pc, #28]	@ (800163c <HAL_TIM_Base_MspInit+0x40>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001622:	f003 0310 	and.w	r3, r3, #16
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800162a:	bf00      	nop
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	40001000 	.word	0x40001000
 800163c:	40023800 	.word	0x40023800

08001640 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08c      	sub	sp, #48	@ 0x30
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001648:	f107 031c 	add.w	r3, r7, #28
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a36      	ldr	r2, [pc, #216]	@ (8001738 <HAL_UART_MspInit+0xf8>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d134      	bne.n	80016cc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	61bb      	str	r3, [r7, #24]
 8001666:	4b35      	ldr	r3, [pc, #212]	@ (800173c <HAL_UART_MspInit+0xfc>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166a:	4a34      	ldr	r2, [pc, #208]	@ (800173c <HAL_UART_MspInit+0xfc>)
 800166c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001670:	6413      	str	r3, [r2, #64]	@ 0x40
 8001672:	4b32      	ldr	r3, [pc, #200]	@ (800173c <HAL_UART_MspInit+0xfc>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800167a:	61bb      	str	r3, [r7, #24]
 800167c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
 8001682:	4b2e      	ldr	r3, [pc, #184]	@ (800173c <HAL_UART_MspInit+0xfc>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	4a2d      	ldr	r2, [pc, #180]	@ (800173c <HAL_UART_MspInit+0xfc>)
 8001688:	f043 0308 	orr.w	r3, r3, #8
 800168c:	6313      	str	r3, [r2, #48]	@ 0x30
 800168e:	4b2b      	ldr	r3, [pc, #172]	@ (800173c <HAL_UART_MspInit+0xfc>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	f003 0308 	and.w	r3, r3, #8
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800169a:	2360      	movs	r3, #96	@ 0x60
 800169c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169e:	2302      	movs	r3, #2
 80016a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a6:	2303      	movs	r3, #3
 80016a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016aa:	2307      	movs	r3, #7
 80016ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ae:	f107 031c 	add.w	r3, r7, #28
 80016b2:	4619      	mov	r1, r3
 80016b4:	4822      	ldr	r0, [pc, #136]	@ (8001740 <HAL_UART_MspInit+0x100>)
 80016b6:	f000 fc6b 	bl	8001f90 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2100      	movs	r1, #0
 80016be:	2026      	movs	r0, #38	@ 0x26
 80016c0:	f000 faa1 	bl	8001c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016c4:	2026      	movs	r0, #38	@ 0x26
 80016c6:	f000 faba 	bl	8001c3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80016ca:	e031      	b.n	8001730 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a1c      	ldr	r2, [pc, #112]	@ (8001744 <HAL_UART_MspInit+0x104>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d12c      	bne.n	8001730 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	4b18      	ldr	r3, [pc, #96]	@ (800173c <HAL_UART_MspInit+0xfc>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016de:	4a17      	ldr	r2, [pc, #92]	@ (800173c <HAL_UART_MspInit+0xfc>)
 80016e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016e6:	4b15      	ldr	r3, [pc, #84]	@ (800173c <HAL_UART_MspInit+0xfc>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016ee:	613b      	str	r3, [r7, #16]
 80016f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	4b11      	ldr	r3, [pc, #68]	@ (800173c <HAL_UART_MspInit+0xfc>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	4a10      	ldr	r2, [pc, #64]	@ (800173c <HAL_UART_MspInit+0xfc>)
 80016fc:	f043 0308 	orr.w	r3, r3, #8
 8001700:	6313      	str	r3, [r2, #48]	@ 0x30
 8001702:	4b0e      	ldr	r3, [pc, #56]	@ (800173c <HAL_UART_MspInit+0xfc>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	f003 0308 	and.w	r3, r3, #8
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800170e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001714:	2302      	movs	r3, #2
 8001716:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171c:	2303      	movs	r3, #3
 800171e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001720:	2307      	movs	r3, #7
 8001722:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001724:	f107 031c 	add.w	r3, r7, #28
 8001728:	4619      	mov	r1, r3
 800172a:	4805      	ldr	r0, [pc, #20]	@ (8001740 <HAL_UART_MspInit+0x100>)
 800172c:	f000 fc30 	bl	8001f90 <HAL_GPIO_Init>
}
 8001730:	bf00      	nop
 8001732:	3730      	adds	r7, #48	@ 0x30
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40004400 	.word	0x40004400
 800173c:	40023800 	.word	0x40023800
 8001740:	40020c00 	.word	0x40020c00
 8001744:	40004800 	.word	0x40004800

08001748 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b0a0      	sub	sp, #128	@ 0x80
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001750:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001760:	f107 0310 	add.w	r3, r7, #16
 8001764:	225c      	movs	r2, #92	@ 0x5c
 8001766:	2100      	movs	r1, #0
 8001768:	4618      	mov	r0, r3
 800176a:	f003 fc84 	bl	8005076 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001776:	d14e      	bne.n	8001816 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001778:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800177c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800177e:	2300      	movs	r3, #0
 8001780:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001782:	f107 0310 	add.w	r3, r7, #16
 8001786:	4618      	mov	r0, r3
 8001788:	f001 f828 	bl	80027dc <HAL_RCCEx_PeriphCLKConfig>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8001792:	f7ff fec1 	bl	8001518 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	4b21      	ldr	r3, [pc, #132]	@ (8001820 <HAL_PCD_MspInit+0xd8>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	4a20      	ldr	r2, [pc, #128]	@ (8001820 <HAL_PCD_MspInit+0xd8>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001820 <HAL_PCD_MspInit+0xd8>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80017b2:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80017b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b8:	2302      	movs	r3, #2
 80017ba:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c0:	2303      	movs	r3, #3
 80017c2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017c4:	230a      	movs	r3, #10
 80017c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80017cc:	4619      	mov	r1, r3
 80017ce:	4815      	ldr	r0, [pc, #84]	@ (8001824 <HAL_PCD_MspInit+0xdc>)
 80017d0:	f000 fbde 	bl	8001f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80017d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017da:	2300      	movs	r3, #0
 80017dc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80017e2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80017e6:	4619      	mov	r1, r3
 80017e8:	480e      	ldr	r0, [pc, #56]	@ (8001824 <HAL_PCD_MspInit+0xdc>)
 80017ea:	f000 fbd1 	bl	8001f90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80017ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001820 <HAL_PCD_MspInit+0xd8>)
 80017f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017f2:	4a0b      	ldr	r2, [pc, #44]	@ (8001820 <HAL_PCD_MspInit+0xd8>)
 80017f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017f8:	6353      	str	r3, [r2, #52]	@ 0x34
 80017fa:	2300      	movs	r3, #0
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	4b08      	ldr	r3, [pc, #32]	@ (8001820 <HAL_PCD_MspInit+0xd8>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001802:	4a07      	ldr	r2, [pc, #28]	@ (8001820 <HAL_PCD_MspInit+0xd8>)
 8001804:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001808:	6453      	str	r3, [r2, #68]	@ 0x44
 800180a:	4b05      	ldr	r3, [pc, #20]	@ (8001820 <HAL_PCD_MspInit+0xd8>)
 800180c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800180e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001816:	bf00      	nop
 8001818:	3780      	adds	r7, #128	@ 0x80
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40023800 	.word	0x40023800
 8001824:	40020000 	.word	0x40020000

08001828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800182c:	bf00      	nop
 800182e:	e7fd      	b.n	800182c <NMI_Handler+0x4>

08001830 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001834:	bf00      	nop
 8001836:	e7fd      	b.n	8001834 <HardFault_Handler+0x4>

08001838 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800183c:	bf00      	nop
 800183e:	e7fd      	b.n	800183c <MemManage_Handler+0x4>

08001840 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001844:	bf00      	nop
 8001846:	e7fd      	b.n	8001844 <BusFault_Handler+0x4>

08001848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800184c:	bf00      	nop
 800184e:	e7fd      	b.n	800184c <UsageFault_Handler+0x4>

08001850 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800187e:	f000 f8a3 	bl	80019c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800188c:	4802      	ldr	r0, [pc, #8]	@ (8001898 <USART2_IRQHandler+0x10>)
 800188e:	f002 f9fb 	bl	8003c88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000084 	.word	0x20000084

0800189c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80018a0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80018a4:	f000 fd22 	bl	80022ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018a8:	bf00      	nop
 80018aa:	bd80      	pop	{r7, pc}

080018ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018b0:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <SystemInit+0x20>)
 80018b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018b6:	4a05      	ldr	r2, [pc, #20]	@ (80018cc <SystemInit+0x20>)
 80018b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001908 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80018d4:	f7ff ffea 	bl	80018ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018d8:	480c      	ldr	r0, [pc, #48]	@ (800190c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018da:	490d      	ldr	r1, [pc, #52]	@ (8001910 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001914 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018e0:	e002      	b.n	80018e8 <LoopCopyDataInit>

080018e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018e6:	3304      	adds	r3, #4

080018e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018ec:	d3f9      	bcc.n	80018e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001918 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018f0:	4c0a      	ldr	r4, [pc, #40]	@ (800191c <LoopFillZerobss+0x22>)
  movs r3, #0
 80018f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f4:	e001      	b.n	80018fa <LoopFillZerobss>

080018f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f8:	3204      	adds	r2, #4

080018fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018fc:	d3fb      	bcc.n	80018f6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80018fe:	f003 fbc3 	bl	8005088 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001902:	f7ff fae9 	bl	8000ed8 <main>
  bx  lr    
 8001906:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001908:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800190c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001910:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001914:	08006348 	.word	0x08006348
  ldr r2, =_sbss
 8001918:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800191c:	200005fc 	.word	0x200005fc

08001920 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001920:	e7fe      	b.n	8001920 <ADC_IRQHandler>
	...

08001924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001928:	4b0e      	ldr	r3, [pc, #56]	@ (8001964 <HAL_Init+0x40>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a0d      	ldr	r2, [pc, #52]	@ (8001964 <HAL_Init+0x40>)
 800192e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001932:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001934:	4b0b      	ldr	r3, [pc, #44]	@ (8001964 <HAL_Init+0x40>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a0a      	ldr	r2, [pc, #40]	@ (8001964 <HAL_Init+0x40>)
 800193a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800193e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001940:	4b08      	ldr	r3, [pc, #32]	@ (8001964 <HAL_Init+0x40>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a07      	ldr	r2, [pc, #28]	@ (8001964 <HAL_Init+0x40>)
 8001946:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800194a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800194c:	2003      	movs	r0, #3
 800194e:	f000 f94f 	bl	8001bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001952:	2000      	movs	r0, #0
 8001954:	f000 f808 	bl	8001968 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001958:	f7ff fde4 	bl	8001524 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40023c00 	.word	0x40023c00

08001968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001970:	4b12      	ldr	r3, [pc, #72]	@ (80019bc <HAL_InitTick+0x54>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	4b12      	ldr	r3, [pc, #72]	@ (80019c0 <HAL_InitTick+0x58>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	4619      	mov	r1, r3
 800197a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800197e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001982:	fbb2 f3f3 	udiv	r3, r2, r3
 8001986:	4618      	mov	r0, r3
 8001988:	f000 f967 	bl	8001c5a <HAL_SYSTICK_Config>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e00e      	b.n	80019b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b0f      	cmp	r3, #15
 800199a:	d80a      	bhi.n	80019b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800199c:	2200      	movs	r2, #0
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	f04f 30ff 	mov.w	r0, #4294967295
 80019a4:	f000 f92f 	bl	8001c06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019a8:	4a06      	ldr	r2, [pc, #24]	@ (80019c4 <HAL_InitTick+0x5c>)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
 80019b0:	e000      	b.n	80019b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20000000 	.word	0x20000000
 80019c0:	20000008 	.word	0x20000008
 80019c4:	20000004 	.word	0x20000004

080019c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019cc:	4b06      	ldr	r3, [pc, #24]	@ (80019e8 <HAL_IncTick+0x20>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	461a      	mov	r2, r3
 80019d2:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <HAL_IncTick+0x24>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4413      	add	r3, r2
 80019d8:	4a04      	ldr	r2, [pc, #16]	@ (80019ec <HAL_IncTick+0x24>)
 80019da:	6013      	str	r3, [r2, #0]
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	20000008 	.word	0x20000008
 80019ec:	200005f8 	.word	0x200005f8

080019f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  return uwTick;
 80019f4:	4b03      	ldr	r3, [pc, #12]	@ (8001a04 <HAL_GetTick+0x14>)
 80019f6:	681b      	ldr	r3, [r3, #0]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	200005f8 	.word	0x200005f8

08001a08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a10:	f7ff ffee 	bl	80019f0 <HAL_GetTick>
 8001a14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a20:	d005      	beq.n	8001a2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a22:	4b0a      	ldr	r3, [pc, #40]	@ (8001a4c <HAL_Delay+0x44>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	461a      	mov	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a2e:	bf00      	nop
 8001a30:	f7ff ffde 	bl	80019f0 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d8f7      	bhi.n	8001a30 <HAL_Delay+0x28>
  {
  }
}
 8001a40:	bf00      	nop
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000008 	.word	0x20000008

08001a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a60:	4b0c      	ldr	r3, [pc, #48]	@ (8001a94 <__NVIC_SetPriorityGrouping+0x44>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a66:	68ba      	ldr	r2, [r7, #8]
 8001a68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a82:	4a04      	ldr	r2, [pc, #16]	@ (8001a94 <__NVIC_SetPriorityGrouping+0x44>)
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	60d3      	str	r3, [r2, #12]
}
 8001a88:	bf00      	nop
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a9c:	4b04      	ldr	r3, [pc, #16]	@ (8001ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	0a1b      	lsrs	r3, r3, #8
 8001aa2:	f003 0307 	and.w	r3, r3, #7
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	db0b      	blt.n	8001ade <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	f003 021f 	and.w	r2, r3, #31
 8001acc:	4907      	ldr	r1, [pc, #28]	@ (8001aec <__NVIC_EnableIRQ+0x38>)
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	095b      	lsrs	r3, r3, #5
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8001ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000e100 	.word	0xe000e100

08001af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	6039      	str	r1, [r7, #0]
 8001afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	db0a      	blt.n	8001b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	b2da      	uxtb	r2, r3
 8001b08:	490c      	ldr	r1, [pc, #48]	@ (8001b3c <__NVIC_SetPriority+0x4c>)
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	0112      	lsls	r2, r2, #4
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	440b      	add	r3, r1
 8001b14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b18:	e00a      	b.n	8001b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	4908      	ldr	r1, [pc, #32]	@ (8001b40 <__NVIC_SetPriority+0x50>)
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	3b04      	subs	r3, #4
 8001b28:	0112      	lsls	r2, r2, #4
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	761a      	strb	r2, [r3, #24]
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	e000e100 	.word	0xe000e100
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b089      	sub	sp, #36	@ 0x24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f1c3 0307 	rsb	r3, r3, #7
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	bf28      	it	cs
 8001b62:	2304      	movcs	r3, #4
 8001b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3304      	adds	r3, #4
 8001b6a:	2b06      	cmp	r3, #6
 8001b6c:	d902      	bls.n	8001b74 <NVIC_EncodePriority+0x30>
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	3b03      	subs	r3, #3
 8001b72:	e000      	b.n	8001b76 <NVIC_EncodePriority+0x32>
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b78:	f04f 32ff 	mov.w	r2, #4294967295
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43da      	mvns	r2, r3
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	401a      	ands	r2, r3
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	fa01 f303 	lsl.w	r3, r1, r3
 8001b96:	43d9      	mvns	r1, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b9c:	4313      	orrs	r3, r2
         );
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3724      	adds	r7, #36	@ 0x24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
	...

08001bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bbc:	d301      	bcc.n	8001bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e00f      	b.n	8001be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bec <SysTick_Config+0x40>)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bca:	210f      	movs	r1, #15
 8001bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd0:	f7ff ff8e 	bl	8001af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bd4:	4b05      	ldr	r3, [pc, #20]	@ (8001bec <SysTick_Config+0x40>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bda:	4b04      	ldr	r3, [pc, #16]	@ (8001bec <SysTick_Config+0x40>)
 8001bdc:	2207      	movs	r2, #7
 8001bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	e000e010 	.word	0xe000e010

08001bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff ff29 	bl	8001a50 <__NVIC_SetPriorityGrouping>
}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b086      	sub	sp, #24
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	607a      	str	r2, [r7, #4]
 8001c12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c18:	f7ff ff3e 	bl	8001a98 <__NVIC_GetPriorityGrouping>
 8001c1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	68b9      	ldr	r1, [r7, #8]
 8001c22:	6978      	ldr	r0, [r7, #20]
 8001c24:	f7ff ff8e 	bl	8001b44 <NVIC_EncodePriority>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c2e:	4611      	mov	r1, r2
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff ff5d 	bl	8001af0 <__NVIC_SetPriority>
}
 8001c36:	bf00      	nop
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b082      	sub	sp, #8
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	4603      	mov	r3, r0
 8001c46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ff31 	bl	8001ab4 <__NVIC_EnableIRQ>
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff ffa2 	bl	8001bac <SysTick_Config>
 8001c68:	4603      	mov	r3, r0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e014      	b.n	8001cae <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	791b      	ldrb	r3, [r3, #4]
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d105      	bne.n	8001c9a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7ff fc6d 	bl	8001574 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e046      	b.n	8001d58 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	795b      	ldrb	r3, [r3, #5]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d101      	bne.n	8001cd6 <HAL_DAC_Start+0x20>
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	e040      	b.n	8001d58 <HAL_DAC_Start+0xa2>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2202      	movs	r2, #2
 8001ce0:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6819      	ldr	r1, [r3, #0]
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	f003 0310 	and.w	r3, r3, #16
 8001cee:	2201      	movs	r2, #1
 8001cf0:	409a      	lsls	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d10f      	bne.n	8001d20 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8001d0a:	2b3c      	cmp	r3, #60	@ 0x3c
 8001d0c:	d11d      	bne.n	8001d4a <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f042 0201 	orr.w	r2, r2, #1
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	e014      	b.n	8001d4a <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	f003 0310 	and.w	r3, r3, #16
 8001d30:	213c      	movs	r1, #60	@ 0x3c
 8001d32:	fa01 f303 	lsl.w	r3, r1, r3
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d107      	bne.n	8001d4a <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f042 0202 	orr.w	r2, r2, #2
 8001d48:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b087      	sub	sp, #28
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
 8001d70:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d101      	bne.n	8001d80 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e015      	b.n	8001dac <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d105      	bne.n	8001d98 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4413      	add	r3, r2
 8001d92:	3308      	adds	r3, #8
 8001d94:	617b      	str	r3, [r7, #20]
 8001d96:	e004      	b.n	8001da2 <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	3314      	adds	r3, #20
 8001da0:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	461a      	mov	r2, r3
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	371c      	adds	r7, #28
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b089      	sub	sp, #36	@ 0x24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d002      	beq.n	8001dd4 <HAL_DAC_ConfigChannel+0x1c>
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d101      	bne.n	8001dd8 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e042      	b.n	8001e5e <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	795b      	ldrb	r3, [r3, #5]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d101      	bne.n	8001de4 <HAL_DAC_ConfigChannel+0x2c>
 8001de0:	2302      	movs	r3, #2
 8001de2:	e03c      	b.n	8001e5e <HAL_DAC_ConfigChannel+0xa6>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2201      	movs	r2, #1
 8001de8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2202      	movs	r2, #2
 8001dee:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f003 0310 	and.w	r3, r3, #16
 8001dfe:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8001e06:	43db      	mvns	r3, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f003 0310 	and.w	r3, r3, #16
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6819      	ldr	r1, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f003 0310 	and.w	r3, r3, #16
 8001e40:	22c0      	movs	r2, #192	@ 0xc0
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43da      	mvns	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	400a      	ands	r2, r1
 8001e4e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2201      	movs	r2, #1
 8001e54:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001e5c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3724      	adds	r7, #36	@ 0x24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b084      	sub	sp, #16
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e76:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e78:	f7ff fdba 	bl	80019f0 <HAL_GetTick>
 8001e7c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d008      	beq.n	8001e9c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2280      	movs	r2, #128	@ 0x80
 8001e8e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e052      	b.n	8001f42 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0216 	bic.w	r2, r2, #22
 8001eaa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	695a      	ldr	r2, [r3, #20]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001eba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d103      	bne.n	8001ecc <HAL_DMA_Abort+0x62>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d007      	beq.n	8001edc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 0208 	bic.w	r2, r2, #8
 8001eda:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0201 	bic.w	r2, r2, #1
 8001eea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eec:	e013      	b.n	8001f16 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eee:	f7ff fd7f 	bl	80019f0 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b05      	cmp	r3, #5
 8001efa:	d90c      	bls.n	8001f16 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2220      	movs	r2, #32
 8001f00:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2203      	movs	r2, #3
 8001f06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e015      	b.n	8001f42 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1e4      	bne.n	8001eee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f28:	223f      	movs	r2, #63	@ 0x3f
 8001f2a:	409a      	lsls	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d004      	beq.n	8001f68 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2280      	movs	r2, #128	@ 0x80
 8001f62:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e00c      	b.n	8001f82 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2205      	movs	r2, #5
 8001f6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0201 	bic.w	r2, r2, #1
 8001f7e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
	...

08001f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b089      	sub	sp, #36	@ 0x24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61fb      	str	r3, [r7, #28]
 8001faa:	e165      	b.n	8002278 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fac:	2201      	movs	r2, #1
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	f040 8154 	bne.w	8002272 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d005      	beq.n	8001fe2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d130      	bne.n	8002044 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	2203      	movs	r2, #3
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4313      	orrs	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002018:	2201      	movs	r2, #1
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	091b      	lsrs	r3, r3, #4
 800202e:	f003 0201 	and.w	r2, r3, #1
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	2b03      	cmp	r3, #3
 800204e:	d017      	beq.n	8002080 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	2203      	movs	r2, #3
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d123      	bne.n	80020d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	08da      	lsrs	r2, r3, #3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3208      	adds	r2, #8
 8002094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002098:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	220f      	movs	r2, #15
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	691a      	ldr	r2, [r3, #16]
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	08da      	lsrs	r2, r3, #3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3208      	adds	r2, #8
 80020ce:	69b9      	ldr	r1, [r7, #24]
 80020d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	2203      	movs	r2, #3
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 0203 	and.w	r2, r3, #3
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 80ae 	beq.w	8002272 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	4b5d      	ldr	r3, [pc, #372]	@ (8002290 <HAL_GPIO_Init+0x300>)
 800211c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211e:	4a5c      	ldr	r2, [pc, #368]	@ (8002290 <HAL_GPIO_Init+0x300>)
 8002120:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002124:	6453      	str	r3, [r2, #68]	@ 0x44
 8002126:	4b5a      	ldr	r3, [pc, #360]	@ (8002290 <HAL_GPIO_Init+0x300>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800212a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002132:	4a58      	ldr	r2, [pc, #352]	@ (8002294 <HAL_GPIO_Init+0x304>)
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	089b      	lsrs	r3, r3, #2
 8002138:	3302      	adds	r3, #2
 800213a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800213e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	f003 0303 	and.w	r3, r3, #3
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	220f      	movs	r2, #15
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4013      	ands	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a4f      	ldr	r2, [pc, #316]	@ (8002298 <HAL_GPIO_Init+0x308>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d025      	beq.n	80021aa <HAL_GPIO_Init+0x21a>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a4e      	ldr	r2, [pc, #312]	@ (800229c <HAL_GPIO_Init+0x30c>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d01f      	beq.n	80021a6 <HAL_GPIO_Init+0x216>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a4d      	ldr	r2, [pc, #308]	@ (80022a0 <HAL_GPIO_Init+0x310>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d019      	beq.n	80021a2 <HAL_GPIO_Init+0x212>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a4c      	ldr	r2, [pc, #304]	@ (80022a4 <HAL_GPIO_Init+0x314>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d013      	beq.n	800219e <HAL_GPIO_Init+0x20e>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a4b      	ldr	r2, [pc, #300]	@ (80022a8 <HAL_GPIO_Init+0x318>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d00d      	beq.n	800219a <HAL_GPIO_Init+0x20a>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a4a      	ldr	r2, [pc, #296]	@ (80022ac <HAL_GPIO_Init+0x31c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d007      	beq.n	8002196 <HAL_GPIO_Init+0x206>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a49      	ldr	r2, [pc, #292]	@ (80022b0 <HAL_GPIO_Init+0x320>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d101      	bne.n	8002192 <HAL_GPIO_Init+0x202>
 800218e:	2306      	movs	r3, #6
 8002190:	e00c      	b.n	80021ac <HAL_GPIO_Init+0x21c>
 8002192:	2307      	movs	r3, #7
 8002194:	e00a      	b.n	80021ac <HAL_GPIO_Init+0x21c>
 8002196:	2305      	movs	r3, #5
 8002198:	e008      	b.n	80021ac <HAL_GPIO_Init+0x21c>
 800219a:	2304      	movs	r3, #4
 800219c:	e006      	b.n	80021ac <HAL_GPIO_Init+0x21c>
 800219e:	2303      	movs	r3, #3
 80021a0:	e004      	b.n	80021ac <HAL_GPIO_Init+0x21c>
 80021a2:	2302      	movs	r3, #2
 80021a4:	e002      	b.n	80021ac <HAL_GPIO_Init+0x21c>
 80021a6:	2301      	movs	r3, #1
 80021a8:	e000      	b.n	80021ac <HAL_GPIO_Init+0x21c>
 80021aa:	2300      	movs	r3, #0
 80021ac:	69fa      	ldr	r2, [r7, #28]
 80021ae:	f002 0203 	and.w	r2, r2, #3
 80021b2:	0092      	lsls	r2, r2, #2
 80021b4:	4093      	lsls	r3, r2
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021bc:	4935      	ldr	r1, [pc, #212]	@ (8002294 <HAL_GPIO_Init+0x304>)
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	089b      	lsrs	r3, r3, #2
 80021c2:	3302      	adds	r3, #2
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021ca:	4b3a      	ldr	r3, [pc, #232]	@ (80022b4 <HAL_GPIO_Init+0x324>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	43db      	mvns	r3, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4013      	ands	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021ee:	4a31      	ldr	r2, [pc, #196]	@ (80022b4 <HAL_GPIO_Init+0x324>)
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021f4:	4b2f      	ldr	r3, [pc, #188]	@ (80022b4 <HAL_GPIO_Init+0x324>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d003      	beq.n	8002218 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	4313      	orrs	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002218:	4a26      	ldr	r2, [pc, #152]	@ (80022b4 <HAL_GPIO_Init+0x324>)
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800221e:	4b25      	ldr	r3, [pc, #148]	@ (80022b4 <HAL_GPIO_Init+0x324>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	43db      	mvns	r3, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4013      	ands	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002242:	4a1c      	ldr	r2, [pc, #112]	@ (80022b4 <HAL_GPIO_Init+0x324>)
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002248:	4b1a      	ldr	r3, [pc, #104]	@ (80022b4 <HAL_GPIO_Init+0x324>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	43db      	mvns	r3, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4013      	ands	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4313      	orrs	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800226c:	4a11      	ldr	r2, [pc, #68]	@ (80022b4 <HAL_GPIO_Init+0x324>)
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	3301      	adds	r3, #1
 8002276:	61fb      	str	r3, [r7, #28]
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	2b0f      	cmp	r3, #15
 800227c:	f67f ae96 	bls.w	8001fac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002280:	bf00      	nop
 8002282:	bf00      	nop
 8002284:	3724      	adds	r7, #36	@ 0x24
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	40023800 	.word	0x40023800
 8002294:	40013800 	.word	0x40013800
 8002298:	40020000 	.word	0x40020000
 800229c:	40020400 	.word	0x40020400
 80022a0:	40020800 	.word	0x40020800
 80022a4:	40020c00 	.word	0x40020c00
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40021400 	.word	0x40021400
 80022b0:	40021800 	.word	0x40021800
 80022b4:	40013c00 	.word	0x40013c00

080022b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	460b      	mov	r3, r1
 80022c2:	807b      	strh	r3, [r7, #2]
 80022c4:	4613      	mov	r3, r2
 80022c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022c8:	787b      	ldrb	r3, [r7, #1]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022ce:	887a      	ldrh	r2, [r7, #2]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022d4:	e003      	b.n	80022de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022d6:	887b      	ldrh	r3, [r7, #2]
 80022d8:	041a      	lsls	r2, r3, #16
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	619a      	str	r2, [r3, #24]
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
	...

080022ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80022f6:	4b08      	ldr	r3, [pc, #32]	@ (8002318 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022f8:	695a      	ldr	r2, [r3, #20]
 80022fa:	88fb      	ldrh	r3, [r7, #6]
 80022fc:	4013      	ands	r3, r2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d006      	beq.n	8002310 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002302:	4a05      	ldr	r2, [pc, #20]	@ (8002318 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002304:	88fb      	ldrh	r3, [r7, #6]
 8002306:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002308:	88fb      	ldrh	r3, [r7, #6]
 800230a:	4618      	mov	r0, r3
 800230c:	f000 f806 	bl	800231c <HAL_GPIO_EXTI_Callback>
  }
}
 8002310:	bf00      	nop
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40013c00 	.word	0x40013c00

0800231c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b086      	sub	sp, #24
 8002336:	af02      	add	r7, sp, #8
 8002338:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e108      	b.n	8002556 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d106      	bne.n	8002364 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7ff f9f2 	bl	8001748 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2203      	movs	r2, #3
 8002368:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002372:	d102      	bne.n	800237a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f002 fbe4 	bl	8004b4c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6818      	ldr	r0, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	7c1a      	ldrb	r2, [r3, #16]
 800238c:	f88d 2000 	strb.w	r2, [sp]
 8002390:	3304      	adds	r3, #4
 8002392:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002394:	f002 fb76 	bl	8004a84 <USB_CoreInit>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d005      	beq.n	80023aa <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2202      	movs	r2, #2
 80023a2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e0d5      	b.n	8002556 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2100      	movs	r1, #0
 80023b0:	4618      	mov	r0, r3
 80023b2:	f002 fbdc 	bl	8004b6e <USB_SetCurrentMode>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d005      	beq.n	80023c8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2202      	movs	r2, #2
 80023c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e0c6      	b.n	8002556 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023c8:	2300      	movs	r3, #0
 80023ca:	73fb      	strb	r3, [r7, #15]
 80023cc:	e04a      	b.n	8002464 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023ce:	7bfa      	ldrb	r2, [r7, #15]
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	4613      	mov	r3, r2
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	4413      	add	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	440b      	add	r3, r1
 80023dc:	3315      	adds	r3, #21
 80023de:	2201      	movs	r2, #1
 80023e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023e2:	7bfa      	ldrb	r2, [r7, #15]
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	4613      	mov	r3, r2
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	4413      	add	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	440b      	add	r3, r1
 80023f0:	3314      	adds	r3, #20
 80023f2:	7bfa      	ldrb	r2, [r7, #15]
 80023f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023f6:	7bfa      	ldrb	r2, [r7, #15]
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
 80023fa:	b298      	uxth	r0, r3
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	4613      	mov	r3, r2
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	4413      	add	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	440b      	add	r3, r1
 8002408:	332e      	adds	r3, #46	@ 0x2e
 800240a:	4602      	mov	r2, r0
 800240c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800240e:	7bfa      	ldrb	r2, [r7, #15]
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	4613      	mov	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	4413      	add	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	440b      	add	r3, r1
 800241c:	3318      	adds	r3, #24
 800241e:	2200      	movs	r2, #0
 8002420:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002422:	7bfa      	ldrb	r2, [r7, #15]
 8002424:	6879      	ldr	r1, [r7, #4]
 8002426:	4613      	mov	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	4413      	add	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	440b      	add	r3, r1
 8002430:	331c      	adds	r3, #28
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002436:	7bfa      	ldrb	r2, [r7, #15]
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	4413      	add	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	440b      	add	r3, r1
 8002444:	3320      	adds	r3, #32
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800244a:	7bfa      	ldrb	r2, [r7, #15]
 800244c:	6879      	ldr	r1, [r7, #4]
 800244e:	4613      	mov	r3, r2
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	4413      	add	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	440b      	add	r3, r1
 8002458:	3324      	adds	r3, #36	@ 0x24
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800245e:	7bfb      	ldrb	r3, [r7, #15]
 8002460:	3301      	adds	r3, #1
 8002462:	73fb      	strb	r3, [r7, #15]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	791b      	ldrb	r3, [r3, #4]
 8002468:	7bfa      	ldrb	r2, [r7, #15]
 800246a:	429a      	cmp	r2, r3
 800246c:	d3af      	bcc.n	80023ce <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800246e:	2300      	movs	r3, #0
 8002470:	73fb      	strb	r3, [r7, #15]
 8002472:	e044      	b.n	80024fe <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002474:	7bfa      	ldrb	r2, [r7, #15]
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	4613      	mov	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	4413      	add	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002486:	2200      	movs	r2, #0
 8002488:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800248a:	7bfa      	ldrb	r2, [r7, #15]
 800248c:	6879      	ldr	r1, [r7, #4]
 800248e:	4613      	mov	r3, r2
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	4413      	add	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	440b      	add	r3, r1
 8002498:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800249c:	7bfa      	ldrb	r2, [r7, #15]
 800249e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024a0:	7bfa      	ldrb	r2, [r7, #15]
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	4613      	mov	r3, r2
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	4413      	add	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	440b      	add	r3, r1
 80024ae:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80024b2:	2200      	movs	r2, #0
 80024b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024b6:	7bfa      	ldrb	r2, [r7, #15]
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	4613      	mov	r3, r2
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	4413      	add	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	440b      	add	r3, r1
 80024c4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024cc:	7bfa      	ldrb	r2, [r7, #15]
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	4413      	add	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024e2:	7bfa      	ldrb	r2, [r7, #15]
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	4613      	mov	r3, r2
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	4413      	add	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	440b      	add	r3, r1
 80024f0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
 80024fa:	3301      	adds	r3, #1
 80024fc:	73fb      	strb	r3, [r7, #15]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	791b      	ldrb	r3, [r3, #4]
 8002502:	7bfa      	ldrb	r2, [r7, #15]
 8002504:	429a      	cmp	r2, r3
 8002506:	d3b5      	bcc.n	8002474 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6818      	ldr	r0, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	7c1a      	ldrb	r2, [r3, #16]
 8002510:	f88d 2000 	strb.w	r2, [sp]
 8002514:	3304      	adds	r3, #4
 8002516:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002518:	f002 fb76 	bl	8004c08 <USB_DevInit>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d005      	beq.n	800252e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2202      	movs	r2, #2
 8002526:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e013      	b.n	8002556 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	7b1b      	ldrb	r3, [r3, #12]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d102      	bne.n	800254a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 f80a 	bl	800255e <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f002 fd31 	bl	8004fb6 <USB_DevDisconnect>

  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800255e:	b480      	push	{r7}
 8002560:	b085      	sub	sp, #20
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800258c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002590:	f043 0303 	orr.w	r3, r3, #3
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
	...

080025a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e0cc      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025bc:	4b68      	ldr	r3, [pc, #416]	@ (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 030f 	and.w	r3, r3, #15
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d90c      	bls.n	80025e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ca:	4b65      	ldr	r3, [pc, #404]	@ (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d2:	4b63      	ldr	r3, [pc, #396]	@ (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d001      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e0b8      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d020      	beq.n	8002632 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d005      	beq.n	8002608 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025fc:	4b59      	ldr	r3, [pc, #356]	@ (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	4a58      	ldr	r2, [pc, #352]	@ (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002602:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002606:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	2b00      	cmp	r3, #0
 8002612:	d005      	beq.n	8002620 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002614:	4b53      	ldr	r3, [pc, #332]	@ (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	4a52      	ldr	r2, [pc, #328]	@ (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 800261a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800261e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002620:	4b50      	ldr	r3, [pc, #320]	@ (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	494d      	ldr	r1, [pc, #308]	@ (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 800262e:	4313      	orrs	r3, r2
 8002630:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d044      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d107      	bne.n	8002656 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002646:	4b47      	ldr	r3, [pc, #284]	@ (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d119      	bne.n	8002686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e07f      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b02      	cmp	r3, #2
 800265c:	d003      	beq.n	8002666 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002662:	2b03      	cmp	r3, #3
 8002664:	d107      	bne.n	8002676 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002666:	4b3f      	ldr	r3, [pc, #252]	@ (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d109      	bne.n	8002686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e06f      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002676:	4b3b      	ldr	r3, [pc, #236]	@ (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e067      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002686:	4b37      	ldr	r3, [pc, #220]	@ (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f023 0203 	bic.w	r2, r3, #3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	4934      	ldr	r1, [pc, #208]	@ (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002694:	4313      	orrs	r3, r2
 8002696:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002698:	f7ff f9aa 	bl	80019f0 <HAL_GetTick>
 800269c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269e:	e00a      	b.n	80026b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a0:	f7ff f9a6 	bl	80019f0 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e04f      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b6:	4b2b      	ldr	r3, [pc, #172]	@ (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 020c 	and.w	r2, r3, #12
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d1eb      	bne.n	80026a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026c8:	4b25      	ldr	r3, [pc, #148]	@ (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 030f 	and.w	r3, r3, #15
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d20c      	bcs.n	80026f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d6:	4b22      	ldr	r3, [pc, #136]	@ (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026de:	4b20      	ldr	r3, [pc, #128]	@ (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d001      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e032      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d008      	beq.n	800270e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026fc:	4b19      	ldr	r3, [pc, #100]	@ (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	4916      	ldr	r1, [pc, #88]	@ (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 800270a:	4313      	orrs	r3, r2
 800270c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d009      	beq.n	800272e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800271a:	4b12      	ldr	r3, [pc, #72]	@ (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	490e      	ldr	r1, [pc, #56]	@ (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 800272a:	4313      	orrs	r3, r2
 800272c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800272e:	f000 fb7f 	bl	8002e30 <HAL_RCC_GetSysClockFreq>
 8002732:	4602      	mov	r2, r0
 8002734:	4b0b      	ldr	r3, [pc, #44]	@ (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	091b      	lsrs	r3, r3, #4
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	490a      	ldr	r1, [pc, #40]	@ (8002768 <HAL_RCC_ClockConfig+0x1c0>)
 8002740:	5ccb      	ldrb	r3, [r1, r3]
 8002742:	fa22 f303 	lsr.w	r3, r2, r3
 8002746:	4a09      	ldr	r2, [pc, #36]	@ (800276c <HAL_RCC_ClockConfig+0x1c4>)
 8002748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800274a:	4b09      	ldr	r3, [pc, #36]	@ (8002770 <HAL_RCC_ClockConfig+0x1c8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff f90a 	bl	8001968 <HAL_InitTick>

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40023c00 	.word	0x40023c00
 8002764:	40023800 	.word	0x40023800
 8002768:	08006148 	.word	0x08006148
 800276c:	20000000 	.word	0x20000000
 8002770:	20000004 	.word	0x20000004

08002774 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002778:	4b03      	ldr	r3, [pc, #12]	@ (8002788 <HAL_RCC_GetHCLKFreq+0x14>)
 800277a:	681b      	ldr	r3, [r3, #0]
}
 800277c:	4618      	mov	r0, r3
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	20000000 	.word	0x20000000

0800278c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002790:	f7ff fff0 	bl	8002774 <HAL_RCC_GetHCLKFreq>
 8002794:	4602      	mov	r2, r0
 8002796:	4b05      	ldr	r3, [pc, #20]	@ (80027ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	0a9b      	lsrs	r3, r3, #10
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	4903      	ldr	r1, [pc, #12]	@ (80027b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027a2:	5ccb      	ldrb	r3, [r1, r3]
 80027a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40023800 	.word	0x40023800
 80027b0:	08006158 	.word	0x08006158

080027b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027b8:	f7ff ffdc 	bl	8002774 <HAL_RCC_GetHCLKFreq>
 80027bc:	4602      	mov	r2, r0
 80027be:	4b05      	ldr	r3, [pc, #20]	@ (80027d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	0b5b      	lsrs	r3, r3, #13
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	4903      	ldr	r1, [pc, #12]	@ (80027d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ca:	5ccb      	ldrb	r3, [r1, r3]
 80027cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40023800 	.word	0x40023800
 80027d8:	08006158 	.word	0x08006158

080027dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b08c      	sub	sp, #48	@ 0x30
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027e4:	2300      	movs	r3, #0
 80027e6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 80027e8:	2300      	movs	r3, #0
 80027ea:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80027ec:	2300      	movs	r3, #0
 80027ee:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80027f8:	2300      	movs	r3, #0
 80027fa:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002800:	2300      	movs	r3, #0
 8002802:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8002804:	2300      	movs	r3, #0
 8002806:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b00      	cmp	r3, #0
 8002812:	d010      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002814:	4b6f      	ldr	r3, [pc, #444]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002816:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800281a:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002822:	496c      	ldr	r1, [pc, #432]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002824:	4313      	orrs	r3, r2
 8002826:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002832:	2301      	movs	r3, #1
 8002834:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d010      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002842:	4b64      	ldr	r3, [pc, #400]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002844:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002848:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002850:	4960      	ldr	r1, [pc, #384]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002852:	4313      	orrs	r3, r2
 8002854:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002860:	2301      	movs	r3, #1
 8002862:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	d017      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002870:	4b58      	ldr	r3, [pc, #352]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002872:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002876:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287e:	4955      	ldr	r1, [pc, #340]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002880:	4313      	orrs	r3, r2
 8002882:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800288e:	d101      	bne.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002890:	2301      	movs	r3, #1
 8002892:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800289c:	2301      	movs	r3, #1
 800289e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0308 	and.w	r3, r3, #8
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d017      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028ac:	4b49      	ldr	r3, [pc, #292]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028b2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ba:	4946      	ldr	r1, [pc, #280]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028ca:	d101      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80028cc:	2301      	movs	r3, #1
 80028ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80028d8:	2301      	movs	r3, #1
 80028da:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0320 	and.w	r3, r3, #32
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 808a 	beq.w	80029fe <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	4b39      	ldr	r3, [pc, #228]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f2:	4a38      	ldr	r2, [pc, #224]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80028fa:	4b36      	ldr	r3, [pc, #216]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002902:	60bb      	str	r3, [r7, #8]
 8002904:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002906:	4b34      	ldr	r3, [pc, #208]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a33      	ldr	r2, [pc, #204]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800290c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002910:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002912:	f7ff f86d 	bl	80019f0 <HAL_GetTick>
 8002916:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002918:	e008      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800291a:	f7ff f869 	bl	80019f0 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d901      	bls.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e278      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800292c:	4b2a      	ldr	r3, [pc, #168]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0f0      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002938:	4b26      	ldr	r3, [pc, #152]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800293a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800293c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002940:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d02f      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002950:	6a3a      	ldr	r2, [r7, #32]
 8002952:	429a      	cmp	r2, r3
 8002954:	d028      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002956:	4b1f      	ldr	r3, [pc, #124]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002958:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800295a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800295e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002960:	4b1e      	ldr	r3, [pc, #120]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002962:	2201      	movs	r2, #1
 8002964:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002966:	4b1d      	ldr	r3, [pc, #116]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800296c:	4a19      	ldr	r2, [pc, #100]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002972:	4b18      	ldr	r3, [pc, #96]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b01      	cmp	r3, #1
 800297c:	d114      	bne.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800297e:	f7ff f837 	bl	80019f0 <HAL_GetTick>
 8002982:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002984:	e00a      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002986:	f7ff f833 	bl	80019f0 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002994:	4293      	cmp	r3, r2
 8002996:	d901      	bls.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e240      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800299c:	4b0d      	ldr	r3, [pc, #52]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800299e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0ee      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80029b4:	d114      	bne.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80029b6:	4b07      	ldr	r3, [pc, #28]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80029c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029ca:	4902      	ldr	r1, [pc, #8]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	608b      	str	r3, [r1, #8]
 80029d0:	e00c      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x210>
 80029d2:	bf00      	nop
 80029d4:	40023800 	.word	0x40023800
 80029d8:	40007000 	.word	0x40007000
 80029dc:	42470e40 	.word	0x42470e40
 80029e0:	4b4a      	ldr	r3, [pc, #296]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	4a49      	ldr	r2, [pc, #292]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029e6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80029ea:	6093      	str	r3, [r2, #8]
 80029ec:	4b47      	ldr	r3, [pc, #284]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029ee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f8:	4944      	ldr	r1, [pc, #272]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0310 	and.w	r3, r3, #16
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d004      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8002a10:	4b3f      	ldr	r3, [pc, #252]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002a12:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00a      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002a20:	4b3a      	ldr	r3, [pc, #232]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a26:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a2e:	4937      	ldr	r1, [pc, #220]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00a      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a42:	4b32      	ldr	r3, [pc, #200]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a48:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a50:	492e      	ldr	r1, [pc, #184]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d011      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002a64:	4b29      	ldr	r3, [pc, #164]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a6a:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a72:	4926      	ldr	r1, [pc, #152]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a82:	d101      	bne.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002a84:	2301      	movs	r3, #1
 8002a86:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00a      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002a94:	4b1d      	ldr	r3, [pc, #116]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a9a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa2:	491a      	ldr	r1, [pc, #104]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d011      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002ab6:	4b15      	ldr	r3, [pc, #84]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ab8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002abc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ac4:	4911      	ldr	r1, [pc, #68]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ad0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ad4:	d101      	bne.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d005      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ae8:	f040 80ff 	bne.w	8002cea <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002aec:	4b09      	ldr	r3, [pc, #36]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002af2:	f7fe ff7d 	bl	80019f0 <HAL_GetTick>
 8002af6:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002af8:	e00e      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002afa:	f7fe ff79 	bl	80019f0 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d907      	bls.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e188      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	424711e0 	.word	0x424711e0
 8002b14:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b18:	4b7e      	ldr	r3, [pc, #504]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1ea      	bne.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d009      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d028      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d124      	bne.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002b4c:	4b71      	ldr	r3, [pc, #452]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b52:	0c1b      	lsrs	r3, r3, #16
 8002b54:	f003 0303 	and.w	r3, r3, #3
 8002b58:	3301      	adds	r3, #1
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b5e:	4b6d      	ldr	r3, [pc, #436]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b64:	0e1b      	lsrs	r3, r3, #24
 8002b66:	f003 030f 	and.w	r3, r3, #15
 8002b6a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	019b      	lsls	r3, r3, #6
 8002b76:	431a      	orrs	r2, r3
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	085b      	lsrs	r3, r3, #1
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	041b      	lsls	r3, r3, #16
 8002b80:	431a      	orrs	r2, r3
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	061b      	lsls	r3, r3, #24
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	071b      	lsls	r3, r3, #28
 8002b8e:	4961      	ldr	r1, [pc, #388]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0304 	and.w	r3, r3, #4
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d004      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002baa:	d00a      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d035      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bbc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bc0:	d130      	bne.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002bc2:	4b54      	ldr	r3, [pc, #336]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bc8:	0c1b      	lsrs	r3, r3, #16
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	3301      	adds	r3, #1
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002bd4:	4b4f      	ldr	r3, [pc, #316]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bda:	0f1b      	lsrs	r3, r3, #28
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	019b      	lsls	r3, r3, #6
 8002bec:	431a      	orrs	r2, r3
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	085b      	lsrs	r3, r3, #1
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	041b      	lsls	r3, r3, #16
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	061b      	lsls	r3, r3, #24
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	071b      	lsls	r3, r3, #28
 8002c04:	4943      	ldr	r1, [pc, #268]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002c0c:	4b41      	ldr	r3, [pc, #260]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c12:	f023 021f 	bic.w	r2, r3, #31
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	493d      	ldr	r1, [pc, #244]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d029      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c38:	d124      	bne.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002c3a:	4b36      	ldr	r3, [pc, #216]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c40:	0c1b      	lsrs	r3, r3, #16
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	3301      	adds	r3, #1
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c4c:	4b31      	ldr	r3, [pc, #196]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c52:	0f1b      	lsrs	r3, r3, #28
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	019b      	lsls	r3, r3, #6
 8002c64:	431a      	orrs	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	085b      	lsrs	r3, r3, #1
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	041b      	lsls	r3, r3, #16
 8002c70:	431a      	orrs	r2, r3
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	061b      	lsls	r3, r3, #24
 8002c76:	431a      	orrs	r2, r3
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	071b      	lsls	r3, r3, #28
 8002c7c:	4925      	ldr	r1, [pc, #148]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d016      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	019b      	lsls	r3, r3, #6
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	085b      	lsrs	r3, r3, #1
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	041b      	lsls	r3, r3, #16
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	061b      	lsls	r3, r3, #24
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	071b      	lsls	r3, r3, #28
 8002cb6:	4917      	ldr	r1, [pc, #92]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002cbe:	4b16      	ldr	r3, [pc, #88]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002cc4:	f7fe fe94 	bl	80019f0 <HAL_GetTick>
 8002cc8:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cca:	e008      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002ccc:	f7fe fe90 	bl	80019f0 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e09f      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cde:	4b0d      	ldr	r3, [pc, #52]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0f0      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	f040 8095 	bne.w	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002cf8:	f7fe fe7a 	bl	80019f0 <HAL_GetTick>
 8002cfc:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002cfe:	e00f      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002d00:	f7fe fe76 	bl	80019f0 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d908      	bls.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e085      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002d12:	bf00      	nop
 8002d14:	40023800 	.word	0x40023800
 8002d18:	42470068 	.word	0x42470068
 8002d1c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d20:	4b41      	ldr	r3, [pc, #260]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d2c:	d0e8      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0304 	and.w	r3, r3, #4
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d009      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d02b      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d127      	bne.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002d56:	4b34      	ldr	r3, [pc, #208]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d5c:	0c1b      	lsrs	r3, r3, #16
 8002d5e:	f003 0303 	and.w	r3, r3, #3
 8002d62:	3301      	adds	r3, #1
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	699a      	ldr	r2, [r3, #24]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	019b      	lsls	r3, r3, #6
 8002d72:	431a      	orrs	r2, r3
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	085b      	lsrs	r3, r3, #1
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	041b      	lsls	r3, r3, #16
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d82:	061b      	lsls	r3, r3, #24
 8002d84:	4928      	ldr	r1, [pc, #160]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002d8c:	4b26      	ldr	r3, [pc, #152]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d92:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	021b      	lsls	r3, r3, #8
 8002d9e:	4922      	ldr	r1, [pc, #136]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d01d      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002dba:	d118      	bne.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dc2:	0e1b      	lsrs	r3, r3, #24
 8002dc4:	f003 030f 	and.w	r3, r3, #15
 8002dc8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	699a      	ldr	r2, [r3, #24]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	019b      	lsls	r3, r3, #6
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	085b      	lsrs	r3, r3, #1
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	041b      	lsls	r3, r3, #16
 8002de0:	431a      	orrs	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	061b      	lsls	r3, r3, #24
 8002de6:	4910      	ldr	r1, [pc, #64]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002dee:	4b0f      	ldr	r3, [pc, #60]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002df0:	2201      	movs	r2, #1
 8002df2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002df4:	f7fe fdfc 	bl	80019f0 <HAL_GetTick>
 8002df8:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002dfc:	f7fe fdf8 	bl	80019f0 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e007      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e0e:	4b06      	ldr	r3, [pc, #24]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e1a:	d1ef      	bne.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3730      	adds	r7, #48	@ 0x30
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	42470070 	.word	0x42470070

08002e30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e34:	b0ae      	sub	sp, #184	@ 0xb8
 8002e36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e56:	4bcb      	ldr	r3, [pc, #812]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 030c 	and.w	r3, r3, #12
 8002e5e:	2b0c      	cmp	r3, #12
 8002e60:	f200 8206 	bhi.w	8003270 <HAL_RCC_GetSysClockFreq+0x440>
 8002e64:	a201      	add	r2, pc, #4	@ (adr r2, 8002e6c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6a:	bf00      	nop
 8002e6c:	08002ea1 	.word	0x08002ea1
 8002e70:	08003271 	.word	0x08003271
 8002e74:	08003271 	.word	0x08003271
 8002e78:	08003271 	.word	0x08003271
 8002e7c:	08002ea9 	.word	0x08002ea9
 8002e80:	08003271 	.word	0x08003271
 8002e84:	08003271 	.word	0x08003271
 8002e88:	08003271 	.word	0x08003271
 8002e8c:	08002eb1 	.word	0x08002eb1
 8002e90:	08003271 	.word	0x08003271
 8002e94:	08003271 	.word	0x08003271
 8002e98:	08003271 	.word	0x08003271
 8002e9c:	080030a1 	.word	0x080030a1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ea0:	4bb9      	ldr	r3, [pc, #740]	@ (8003188 <HAL_RCC_GetSysClockFreq+0x358>)
 8002ea2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8002ea6:	e1e7      	b.n	8003278 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ea8:	4bb8      	ldr	r3, [pc, #736]	@ (800318c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002eaa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002eae:	e1e3      	b.n	8003278 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eb0:	4bb4      	ldr	r3, [pc, #720]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x354>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002eb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ebc:	4bb1      	ldr	r3, [pc, #708]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d071      	beq.n	8002fac <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ec8:	4bae      	ldr	r3, [pc, #696]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x354>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	099b      	lsrs	r3, r3, #6
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002ed4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002ed8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002edc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ee0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002eea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002eee:	4622      	mov	r2, r4
 8002ef0:	462b      	mov	r3, r5
 8002ef2:	f04f 0000 	mov.w	r0, #0
 8002ef6:	f04f 0100 	mov.w	r1, #0
 8002efa:	0159      	lsls	r1, r3, #5
 8002efc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f00:	0150      	lsls	r0, r2, #5
 8002f02:	4602      	mov	r2, r0
 8002f04:	460b      	mov	r3, r1
 8002f06:	4621      	mov	r1, r4
 8002f08:	1a51      	subs	r1, r2, r1
 8002f0a:	6439      	str	r1, [r7, #64]	@ 0x40
 8002f0c:	4629      	mov	r1, r5
 8002f0e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f12:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f14:	f04f 0200 	mov.w	r2, #0
 8002f18:	f04f 0300 	mov.w	r3, #0
 8002f1c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002f20:	4649      	mov	r1, r9
 8002f22:	018b      	lsls	r3, r1, #6
 8002f24:	4641      	mov	r1, r8
 8002f26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f2a:	4641      	mov	r1, r8
 8002f2c:	018a      	lsls	r2, r1, #6
 8002f2e:	4641      	mov	r1, r8
 8002f30:	1a51      	subs	r1, r2, r1
 8002f32:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002f34:	4649      	mov	r1, r9
 8002f36:	eb63 0301 	sbc.w	r3, r3, r1
 8002f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f3c:	f04f 0200 	mov.w	r2, #0
 8002f40:	f04f 0300 	mov.w	r3, #0
 8002f44:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002f48:	4649      	mov	r1, r9
 8002f4a:	00cb      	lsls	r3, r1, #3
 8002f4c:	4641      	mov	r1, r8
 8002f4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f52:	4641      	mov	r1, r8
 8002f54:	00ca      	lsls	r2, r1, #3
 8002f56:	4610      	mov	r0, r2
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	4622      	mov	r2, r4
 8002f5e:	189b      	adds	r3, r3, r2
 8002f60:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f62:	462b      	mov	r3, r5
 8002f64:	460a      	mov	r2, r1
 8002f66:	eb42 0303 	adc.w	r3, r2, r3
 8002f6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f6c:	f04f 0200 	mov.w	r2, #0
 8002f70:	f04f 0300 	mov.w	r3, #0
 8002f74:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002f78:	4629      	mov	r1, r5
 8002f7a:	024b      	lsls	r3, r1, #9
 8002f7c:	4621      	mov	r1, r4
 8002f7e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f82:	4621      	mov	r1, r4
 8002f84:	024a      	lsls	r2, r1, #9
 8002f86:	4610      	mov	r0, r2
 8002f88:	4619      	mov	r1, r3
 8002f8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002f94:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002f98:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002f9c:	f7fd fe22 	bl	8000be4 <__aeabi_uldivmod>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002faa:	e067      	b.n	800307c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fac:	4b75      	ldr	r3, [pc, #468]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	099b      	lsrs	r3, r3, #6
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002fb8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002fbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002fc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fc4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002fca:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002fce:	4622      	mov	r2, r4
 8002fd0:	462b      	mov	r3, r5
 8002fd2:	f04f 0000 	mov.w	r0, #0
 8002fd6:	f04f 0100 	mov.w	r1, #0
 8002fda:	0159      	lsls	r1, r3, #5
 8002fdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fe0:	0150      	lsls	r0, r2, #5
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	4621      	mov	r1, r4
 8002fe8:	1a51      	subs	r1, r2, r1
 8002fea:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002fec:	4629      	mov	r1, r5
 8002fee:	eb63 0301 	sbc.w	r3, r3, r1
 8002ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ff4:	f04f 0200 	mov.w	r2, #0
 8002ff8:	f04f 0300 	mov.w	r3, #0
 8002ffc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003000:	4649      	mov	r1, r9
 8003002:	018b      	lsls	r3, r1, #6
 8003004:	4641      	mov	r1, r8
 8003006:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800300a:	4641      	mov	r1, r8
 800300c:	018a      	lsls	r2, r1, #6
 800300e:	4641      	mov	r1, r8
 8003010:	ebb2 0a01 	subs.w	sl, r2, r1
 8003014:	4649      	mov	r1, r9
 8003016:	eb63 0b01 	sbc.w	fp, r3, r1
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	f04f 0300 	mov.w	r3, #0
 8003022:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003026:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800302a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800302e:	4692      	mov	sl, r2
 8003030:	469b      	mov	fp, r3
 8003032:	4623      	mov	r3, r4
 8003034:	eb1a 0303 	adds.w	r3, sl, r3
 8003038:	623b      	str	r3, [r7, #32]
 800303a:	462b      	mov	r3, r5
 800303c:	eb4b 0303 	adc.w	r3, fp, r3
 8003040:	627b      	str	r3, [r7, #36]	@ 0x24
 8003042:	f04f 0200 	mov.w	r2, #0
 8003046:	f04f 0300 	mov.w	r3, #0
 800304a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800304e:	4629      	mov	r1, r5
 8003050:	028b      	lsls	r3, r1, #10
 8003052:	4621      	mov	r1, r4
 8003054:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003058:	4621      	mov	r1, r4
 800305a:	028a      	lsls	r2, r1, #10
 800305c:	4610      	mov	r0, r2
 800305e:	4619      	mov	r1, r3
 8003060:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003064:	2200      	movs	r2, #0
 8003066:	673b      	str	r3, [r7, #112]	@ 0x70
 8003068:	677a      	str	r2, [r7, #116]	@ 0x74
 800306a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800306e:	f7fd fdb9 	bl	8000be4 <__aeabi_uldivmod>
 8003072:	4602      	mov	r2, r0
 8003074:	460b      	mov	r3, r1
 8003076:	4613      	mov	r3, r2
 8003078:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800307c:	4b41      	ldr	r3, [pc, #260]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x354>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	0c1b      	lsrs	r3, r3, #16
 8003082:	f003 0303 	and.w	r3, r3, #3
 8003086:	3301      	adds	r3, #1
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800308e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003092:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003096:	fbb2 f3f3 	udiv	r3, r2, r3
 800309a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800309e:	e0eb      	b.n	8003278 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030a0:	4b38      	ldr	r3, [pc, #224]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x354>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030ac:	4b35      	ldr	r3, [pc, #212]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x354>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d06b      	beq.n	8003190 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030b8:	4b32      	ldr	r3, [pc, #200]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x354>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	099b      	lsrs	r3, r3, #6
 80030be:	2200      	movs	r2, #0
 80030c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80030c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80030c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80030c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ca:	663b      	str	r3, [r7, #96]	@ 0x60
 80030cc:	2300      	movs	r3, #0
 80030ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80030d0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80030d4:	4622      	mov	r2, r4
 80030d6:	462b      	mov	r3, r5
 80030d8:	f04f 0000 	mov.w	r0, #0
 80030dc:	f04f 0100 	mov.w	r1, #0
 80030e0:	0159      	lsls	r1, r3, #5
 80030e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030e6:	0150      	lsls	r0, r2, #5
 80030e8:	4602      	mov	r2, r0
 80030ea:	460b      	mov	r3, r1
 80030ec:	4621      	mov	r1, r4
 80030ee:	1a51      	subs	r1, r2, r1
 80030f0:	61b9      	str	r1, [r7, #24]
 80030f2:	4629      	mov	r1, r5
 80030f4:	eb63 0301 	sbc.w	r3, r3, r1
 80030f8:	61fb      	str	r3, [r7, #28]
 80030fa:	f04f 0200 	mov.w	r2, #0
 80030fe:	f04f 0300 	mov.w	r3, #0
 8003102:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003106:	4659      	mov	r1, fp
 8003108:	018b      	lsls	r3, r1, #6
 800310a:	4651      	mov	r1, sl
 800310c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003110:	4651      	mov	r1, sl
 8003112:	018a      	lsls	r2, r1, #6
 8003114:	4651      	mov	r1, sl
 8003116:	ebb2 0801 	subs.w	r8, r2, r1
 800311a:	4659      	mov	r1, fp
 800311c:	eb63 0901 	sbc.w	r9, r3, r1
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	f04f 0300 	mov.w	r3, #0
 8003128:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800312c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003130:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003134:	4690      	mov	r8, r2
 8003136:	4699      	mov	r9, r3
 8003138:	4623      	mov	r3, r4
 800313a:	eb18 0303 	adds.w	r3, r8, r3
 800313e:	613b      	str	r3, [r7, #16]
 8003140:	462b      	mov	r3, r5
 8003142:	eb49 0303 	adc.w	r3, r9, r3
 8003146:	617b      	str	r3, [r7, #20]
 8003148:	f04f 0200 	mov.w	r2, #0
 800314c:	f04f 0300 	mov.w	r3, #0
 8003150:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003154:	4629      	mov	r1, r5
 8003156:	024b      	lsls	r3, r1, #9
 8003158:	4621      	mov	r1, r4
 800315a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800315e:	4621      	mov	r1, r4
 8003160:	024a      	lsls	r2, r1, #9
 8003162:	4610      	mov	r0, r2
 8003164:	4619      	mov	r1, r3
 8003166:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800316a:	2200      	movs	r2, #0
 800316c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800316e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003170:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003174:	f7fd fd36 	bl	8000be4 <__aeabi_uldivmod>
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	4613      	mov	r3, r2
 800317e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003182:	e065      	b.n	8003250 <HAL_RCC_GetSysClockFreq+0x420>
 8003184:	40023800 	.word	0x40023800
 8003188:	00f42400 	.word	0x00f42400
 800318c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003190:	4b3d      	ldr	r3, [pc, #244]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x458>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	099b      	lsrs	r3, r3, #6
 8003196:	2200      	movs	r2, #0
 8003198:	4618      	mov	r0, r3
 800319a:	4611      	mov	r1, r2
 800319c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80031a2:	2300      	movs	r3, #0
 80031a4:	657b      	str	r3, [r7, #84]	@ 0x54
 80031a6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80031aa:	4642      	mov	r2, r8
 80031ac:	464b      	mov	r3, r9
 80031ae:	f04f 0000 	mov.w	r0, #0
 80031b2:	f04f 0100 	mov.w	r1, #0
 80031b6:	0159      	lsls	r1, r3, #5
 80031b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031bc:	0150      	lsls	r0, r2, #5
 80031be:	4602      	mov	r2, r0
 80031c0:	460b      	mov	r3, r1
 80031c2:	4641      	mov	r1, r8
 80031c4:	1a51      	subs	r1, r2, r1
 80031c6:	60b9      	str	r1, [r7, #8]
 80031c8:	4649      	mov	r1, r9
 80031ca:	eb63 0301 	sbc.w	r3, r3, r1
 80031ce:	60fb      	str	r3, [r7, #12]
 80031d0:	f04f 0200 	mov.w	r2, #0
 80031d4:	f04f 0300 	mov.w	r3, #0
 80031d8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80031dc:	4659      	mov	r1, fp
 80031de:	018b      	lsls	r3, r1, #6
 80031e0:	4651      	mov	r1, sl
 80031e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031e6:	4651      	mov	r1, sl
 80031e8:	018a      	lsls	r2, r1, #6
 80031ea:	4651      	mov	r1, sl
 80031ec:	1a54      	subs	r4, r2, r1
 80031ee:	4659      	mov	r1, fp
 80031f0:	eb63 0501 	sbc.w	r5, r3, r1
 80031f4:	f04f 0200 	mov.w	r2, #0
 80031f8:	f04f 0300 	mov.w	r3, #0
 80031fc:	00eb      	lsls	r3, r5, #3
 80031fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003202:	00e2      	lsls	r2, r4, #3
 8003204:	4614      	mov	r4, r2
 8003206:	461d      	mov	r5, r3
 8003208:	4643      	mov	r3, r8
 800320a:	18e3      	adds	r3, r4, r3
 800320c:	603b      	str	r3, [r7, #0]
 800320e:	464b      	mov	r3, r9
 8003210:	eb45 0303 	adc.w	r3, r5, r3
 8003214:	607b      	str	r3, [r7, #4]
 8003216:	f04f 0200 	mov.w	r2, #0
 800321a:	f04f 0300 	mov.w	r3, #0
 800321e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003222:	4629      	mov	r1, r5
 8003224:	028b      	lsls	r3, r1, #10
 8003226:	4621      	mov	r1, r4
 8003228:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800322c:	4621      	mov	r1, r4
 800322e:	028a      	lsls	r2, r1, #10
 8003230:	4610      	mov	r0, r2
 8003232:	4619      	mov	r1, r3
 8003234:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003238:	2200      	movs	r2, #0
 800323a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800323c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800323e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003242:	f7fd fccf 	bl	8000be4 <__aeabi_uldivmod>
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	4613      	mov	r3, r2
 800324c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003250:	4b0d      	ldr	r3, [pc, #52]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x458>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	0f1b      	lsrs	r3, r3, #28
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800325e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003262:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003266:	fbb2 f3f3 	udiv	r3, r2, r3
 800326a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800326e:	e003      	b.n	8003278 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003270:	4b06      	ldr	r3, [pc, #24]	@ (800328c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003272:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003276:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003278:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800327c:	4618      	mov	r0, r3
 800327e:	37b8      	adds	r7, #184	@ 0xb8
 8003280:	46bd      	mov	sp, r7
 8003282:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003286:	bf00      	nop
 8003288:	40023800 	.word	0x40023800
 800328c:	00f42400 	.word	0x00f42400

08003290 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e28d      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f000 8083 	beq.w	80033b6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80032b0:	4b94      	ldr	r3, [pc, #592]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f003 030c 	and.w	r3, r3, #12
 80032b8:	2b04      	cmp	r3, #4
 80032ba:	d019      	beq.n	80032f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032bc:	4b91      	ldr	r3, [pc, #580]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d106      	bne.n	80032d6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032c8:	4b8e      	ldr	r3, [pc, #568]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032d4:	d00c      	beq.n	80032f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032d6:	4b8b      	ldr	r3, [pc, #556]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032de:	2b0c      	cmp	r3, #12
 80032e0:	d112      	bne.n	8003308 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032e2:	4b88      	ldr	r3, [pc, #544]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032ee:	d10b      	bne.n	8003308 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f0:	4b84      	ldr	r3, [pc, #528]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d05b      	beq.n	80033b4 <HAL_RCC_OscConfig+0x124>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d157      	bne.n	80033b4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e25a      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003310:	d106      	bne.n	8003320 <HAL_RCC_OscConfig+0x90>
 8003312:	4b7c      	ldr	r3, [pc, #496]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a7b      	ldr	r2, [pc, #492]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 8003318:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	e01d      	b.n	800335c <HAL_RCC_OscConfig+0xcc>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003328:	d10c      	bne.n	8003344 <HAL_RCC_OscConfig+0xb4>
 800332a:	4b76      	ldr	r3, [pc, #472]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a75      	ldr	r2, [pc, #468]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 8003330:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	4b73      	ldr	r3, [pc, #460]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a72      	ldr	r2, [pc, #456]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 800333c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003340:	6013      	str	r3, [r2, #0]
 8003342:	e00b      	b.n	800335c <HAL_RCC_OscConfig+0xcc>
 8003344:	4b6f      	ldr	r3, [pc, #444]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a6e      	ldr	r2, [pc, #440]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 800334a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800334e:	6013      	str	r3, [r2, #0]
 8003350:	4b6c      	ldr	r3, [pc, #432]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a6b      	ldr	r2, [pc, #428]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 8003356:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800335a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d013      	beq.n	800338c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003364:	f7fe fb44 	bl	80019f0 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800336c:	f7fe fb40 	bl	80019f0 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b64      	cmp	r3, #100	@ 0x64
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e21f      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337e:	4b61      	ldr	r3, [pc, #388]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0f0      	beq.n	800336c <HAL_RCC_OscConfig+0xdc>
 800338a:	e014      	b.n	80033b6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338c:	f7fe fb30 	bl	80019f0 <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003394:	f7fe fb2c 	bl	80019f0 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b64      	cmp	r3, #100	@ 0x64
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e20b      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033a6:	4b57      	ldr	r3, [pc, #348]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1f0      	bne.n	8003394 <HAL_RCC_OscConfig+0x104>
 80033b2:	e000      	b.n	80033b6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d06f      	beq.n	80034a2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80033c2:	4b50      	ldr	r3, [pc, #320]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 030c 	and.w	r3, r3, #12
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d017      	beq.n	80033fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033ce:	4b4d      	ldr	r3, [pc, #308]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80033d6:	2b08      	cmp	r3, #8
 80033d8:	d105      	bne.n	80033e6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033da:	4b4a      	ldr	r3, [pc, #296]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00b      	beq.n	80033fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033e6:	4b47      	ldr	r3, [pc, #284]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033ee:	2b0c      	cmp	r3, #12
 80033f0:	d11c      	bne.n	800342c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033f2:	4b44      	ldr	r3, [pc, #272]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d116      	bne.n	800342c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033fe:	4b41      	ldr	r3, [pc, #260]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d005      	beq.n	8003416 <HAL_RCC_OscConfig+0x186>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d001      	beq.n	8003416 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e1d3      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003416:	4b3b      	ldr	r3, [pc, #236]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	4937      	ldr	r1, [pc, #220]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 8003426:	4313      	orrs	r3, r2
 8003428:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800342a:	e03a      	b.n	80034a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d020      	beq.n	8003476 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003434:	4b34      	ldr	r3, [pc, #208]	@ (8003508 <HAL_RCC_OscConfig+0x278>)
 8003436:	2201      	movs	r2, #1
 8003438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343a:	f7fe fad9 	bl	80019f0 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003442:	f7fe fad5 	bl	80019f0 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e1b4      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003454:	4b2b      	ldr	r3, [pc, #172]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0f0      	beq.n	8003442 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003460:	4b28      	ldr	r3, [pc, #160]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	4925      	ldr	r1, [pc, #148]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 8003470:	4313      	orrs	r3, r2
 8003472:	600b      	str	r3, [r1, #0]
 8003474:	e015      	b.n	80034a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003476:	4b24      	ldr	r3, [pc, #144]	@ (8003508 <HAL_RCC_OscConfig+0x278>)
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347c:	f7fe fab8 	bl	80019f0 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003484:	f7fe fab4 	bl	80019f0 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e193      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003496:	4b1b      	ldr	r3, [pc, #108]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f0      	bne.n	8003484 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d036      	beq.n	800351c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d016      	beq.n	80034e4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034b6:	4b15      	ldr	r3, [pc, #84]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 80034b8:	2201      	movs	r2, #1
 80034ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034bc:	f7fe fa98 	bl	80019f0 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034c4:	f7fe fa94 	bl	80019f0 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e173      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 80034d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0f0      	beq.n	80034c4 <HAL_RCC_OscConfig+0x234>
 80034e2:	e01b      	b.n	800351c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034e4:	4b09      	ldr	r3, [pc, #36]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ea:	f7fe fa81 	bl	80019f0 <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f0:	e00e      	b.n	8003510 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034f2:	f7fe fa7d 	bl	80019f0 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d907      	bls.n	8003510 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e15c      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
 8003504:	40023800 	.word	0x40023800
 8003508:	42470000 	.word	0x42470000
 800350c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003510:	4b8a      	ldr	r3, [pc, #552]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 8003512:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1ea      	bne.n	80034f2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 8097 	beq.w	8003658 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800352a:	2300      	movs	r3, #0
 800352c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800352e:	4b83      	ldr	r3, [pc, #524]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 8003530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10f      	bne.n	800355a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800353a:	2300      	movs	r3, #0
 800353c:	60bb      	str	r3, [r7, #8]
 800353e:	4b7f      	ldr	r3, [pc, #508]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 8003540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003542:	4a7e      	ldr	r2, [pc, #504]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 8003544:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003548:	6413      	str	r3, [r2, #64]	@ 0x40
 800354a:	4b7c      	ldr	r3, [pc, #496]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 800354c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003552:	60bb      	str	r3, [r7, #8]
 8003554:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003556:	2301      	movs	r3, #1
 8003558:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800355a:	4b79      	ldr	r3, [pc, #484]	@ (8003740 <HAL_RCC_OscConfig+0x4b0>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003562:	2b00      	cmp	r3, #0
 8003564:	d118      	bne.n	8003598 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003566:	4b76      	ldr	r3, [pc, #472]	@ (8003740 <HAL_RCC_OscConfig+0x4b0>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a75      	ldr	r2, [pc, #468]	@ (8003740 <HAL_RCC_OscConfig+0x4b0>)
 800356c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003572:	f7fe fa3d 	bl	80019f0 <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800357a:	f7fe fa39 	bl	80019f0 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e118      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358c:	4b6c      	ldr	r3, [pc, #432]	@ (8003740 <HAL_RCC_OscConfig+0x4b0>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0f0      	beq.n	800357a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d106      	bne.n	80035ae <HAL_RCC_OscConfig+0x31e>
 80035a0:	4b66      	ldr	r3, [pc, #408]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035a4:	4a65      	ldr	r2, [pc, #404]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035a6:	f043 0301 	orr.w	r3, r3, #1
 80035aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80035ac:	e01c      	b.n	80035e8 <HAL_RCC_OscConfig+0x358>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	2b05      	cmp	r3, #5
 80035b4:	d10c      	bne.n	80035d0 <HAL_RCC_OscConfig+0x340>
 80035b6:	4b61      	ldr	r3, [pc, #388]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ba:	4a60      	ldr	r2, [pc, #384]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035bc:	f043 0304 	orr.w	r3, r3, #4
 80035c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80035c2:	4b5e      	ldr	r3, [pc, #376]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035c6:	4a5d      	ldr	r2, [pc, #372]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035c8:	f043 0301 	orr.w	r3, r3, #1
 80035cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80035ce:	e00b      	b.n	80035e8 <HAL_RCC_OscConfig+0x358>
 80035d0:	4b5a      	ldr	r3, [pc, #360]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035d4:	4a59      	ldr	r2, [pc, #356]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035d6:	f023 0301 	bic.w	r3, r3, #1
 80035da:	6713      	str	r3, [r2, #112]	@ 0x70
 80035dc:	4b57      	ldr	r3, [pc, #348]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035e0:	4a56      	ldr	r2, [pc, #344]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035e2:	f023 0304 	bic.w	r3, r3, #4
 80035e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d015      	beq.n	800361c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f0:	f7fe f9fe 	bl	80019f0 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f6:	e00a      	b.n	800360e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035f8:	f7fe f9fa 	bl	80019f0 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003606:	4293      	cmp	r3, r2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e0d7      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800360e:	4b4b      	ldr	r3, [pc, #300]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 8003610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d0ee      	beq.n	80035f8 <HAL_RCC_OscConfig+0x368>
 800361a:	e014      	b.n	8003646 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361c:	f7fe f9e8 	bl	80019f0 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003622:	e00a      	b.n	800363a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003624:	f7fe f9e4 	bl	80019f0 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003632:	4293      	cmp	r3, r2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e0c1      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800363a:	4b40      	ldr	r3, [pc, #256]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 800363c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1ee      	bne.n	8003624 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003646:	7dfb      	ldrb	r3, [r7, #23]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d105      	bne.n	8003658 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800364c:	4b3b      	ldr	r3, [pc, #236]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 800364e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003650:	4a3a      	ldr	r2, [pc, #232]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 8003652:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003656:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 80ad 	beq.w	80037bc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003662:	4b36      	ldr	r3, [pc, #216]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 030c 	and.w	r3, r3, #12
 800366a:	2b08      	cmp	r3, #8
 800366c:	d060      	beq.n	8003730 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	2b02      	cmp	r3, #2
 8003674:	d145      	bne.n	8003702 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003676:	4b33      	ldr	r3, [pc, #204]	@ (8003744 <HAL_RCC_OscConfig+0x4b4>)
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367c:	f7fe f9b8 	bl	80019f0 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003684:	f7fe f9b4 	bl	80019f0 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e093      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003696:	4b29      	ldr	r3, [pc, #164]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1f0      	bne.n	8003684 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	69da      	ldr	r2, [r3, #28]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b0:	019b      	lsls	r3, r3, #6
 80036b2:	431a      	orrs	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b8:	085b      	lsrs	r3, r3, #1
 80036ba:	3b01      	subs	r3, #1
 80036bc:	041b      	lsls	r3, r3, #16
 80036be:	431a      	orrs	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c4:	061b      	lsls	r3, r3, #24
 80036c6:	431a      	orrs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036cc:	071b      	lsls	r3, r3, #28
 80036ce:	491b      	ldr	r1, [pc, #108]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003744 <HAL_RCC_OscConfig+0x4b4>)
 80036d6:	2201      	movs	r2, #1
 80036d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036da:	f7fe f989 	bl	80019f0 <HAL_GetTick>
 80036de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e0:	e008      	b.n	80036f4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036e2:	f7fe f985 	bl	80019f0 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e064      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f4:	4b11      	ldr	r3, [pc, #68]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d0f0      	beq.n	80036e2 <HAL_RCC_OscConfig+0x452>
 8003700:	e05c      	b.n	80037bc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003702:	4b10      	ldr	r3, [pc, #64]	@ (8003744 <HAL_RCC_OscConfig+0x4b4>)
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003708:	f7fe f972 	bl	80019f0 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003710:	f7fe f96e 	bl	80019f0 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e04d      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003722:	4b06      	ldr	r3, [pc, #24]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1f0      	bne.n	8003710 <HAL_RCC_OscConfig+0x480>
 800372e:	e045      	b.n	80037bc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d107      	bne.n	8003748 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e040      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
 800373c:	40023800 	.word	0x40023800
 8003740:	40007000 	.word	0x40007000
 8003744:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003748:	4b1f      	ldr	r3, [pc, #124]	@ (80037c8 <HAL_RCC_OscConfig+0x538>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d030      	beq.n	80037b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003760:	429a      	cmp	r2, r3
 8003762:	d129      	bne.n	80037b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800376e:	429a      	cmp	r2, r3
 8003770:	d122      	bne.n	80037b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003778:	4013      	ands	r3, r2
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800377e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003780:	4293      	cmp	r3, r2
 8003782:	d119      	bne.n	80037b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800378e:	085b      	lsrs	r3, r3, #1
 8003790:	3b01      	subs	r3, #1
 8003792:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003794:	429a      	cmp	r2, r3
 8003796:	d10f      	bne.n	80037b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d107      	bne.n	80037b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d001      	beq.n	80037bc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e000      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3718      	adds	r7, #24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40023800 	.word	0x40023800

080037cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e041      	b.n	8003862 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d106      	bne.n	80037f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7fd ff02 	bl	80015fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	3304      	adds	r3, #4
 8003808:	4619      	mov	r1, r3
 800380a:	4610      	mov	r0, r2
 800380c:	f000 f89e 	bl	800394c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
	...

0800386c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b01      	cmp	r3, #1
 800387e:	d001      	beq.n	8003884 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e04e      	b.n	8003922 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2202      	movs	r2, #2
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68da      	ldr	r2, [r3, #12]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0201 	orr.w	r2, r2, #1
 800389a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a23      	ldr	r2, [pc, #140]	@ (8003930 <HAL_TIM_Base_Start_IT+0xc4>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d022      	beq.n	80038ec <HAL_TIM_Base_Start_IT+0x80>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038ae:	d01d      	beq.n	80038ec <HAL_TIM_Base_Start_IT+0x80>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a1f      	ldr	r2, [pc, #124]	@ (8003934 <HAL_TIM_Base_Start_IT+0xc8>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d018      	beq.n	80038ec <HAL_TIM_Base_Start_IT+0x80>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a1e      	ldr	r2, [pc, #120]	@ (8003938 <HAL_TIM_Base_Start_IT+0xcc>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d013      	beq.n	80038ec <HAL_TIM_Base_Start_IT+0x80>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a1c      	ldr	r2, [pc, #112]	@ (800393c <HAL_TIM_Base_Start_IT+0xd0>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d00e      	beq.n	80038ec <HAL_TIM_Base_Start_IT+0x80>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a1b      	ldr	r2, [pc, #108]	@ (8003940 <HAL_TIM_Base_Start_IT+0xd4>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d009      	beq.n	80038ec <HAL_TIM_Base_Start_IT+0x80>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a19      	ldr	r2, [pc, #100]	@ (8003944 <HAL_TIM_Base_Start_IT+0xd8>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d004      	beq.n	80038ec <HAL_TIM_Base_Start_IT+0x80>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a18      	ldr	r2, [pc, #96]	@ (8003948 <HAL_TIM_Base_Start_IT+0xdc>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d111      	bne.n	8003910 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f003 0307 	and.w	r3, r3, #7
 80038f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2b06      	cmp	r3, #6
 80038fc:	d010      	beq.n	8003920 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f042 0201 	orr.w	r2, r2, #1
 800390c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800390e:	e007      	b.n	8003920 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f042 0201 	orr.w	r2, r2, #1
 800391e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3714      	adds	r7, #20
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	40010000 	.word	0x40010000
 8003934:	40000400 	.word	0x40000400
 8003938:	40000800 	.word	0x40000800
 800393c:	40000c00 	.word	0x40000c00
 8003940:	40010400 	.word	0x40010400
 8003944:	40014000 	.word	0x40014000
 8003948:	40001800 	.word	0x40001800

0800394c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a46      	ldr	r2, [pc, #280]	@ (8003a78 <TIM_Base_SetConfig+0x12c>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d013      	beq.n	800398c <TIM_Base_SetConfig+0x40>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800396a:	d00f      	beq.n	800398c <TIM_Base_SetConfig+0x40>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a43      	ldr	r2, [pc, #268]	@ (8003a7c <TIM_Base_SetConfig+0x130>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d00b      	beq.n	800398c <TIM_Base_SetConfig+0x40>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a42      	ldr	r2, [pc, #264]	@ (8003a80 <TIM_Base_SetConfig+0x134>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d007      	beq.n	800398c <TIM_Base_SetConfig+0x40>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a41      	ldr	r2, [pc, #260]	@ (8003a84 <TIM_Base_SetConfig+0x138>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d003      	beq.n	800398c <TIM_Base_SetConfig+0x40>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a40      	ldr	r2, [pc, #256]	@ (8003a88 <TIM_Base_SetConfig+0x13c>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d108      	bne.n	800399e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003992:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	4313      	orrs	r3, r2
 800399c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a35      	ldr	r2, [pc, #212]	@ (8003a78 <TIM_Base_SetConfig+0x12c>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d02b      	beq.n	80039fe <TIM_Base_SetConfig+0xb2>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039ac:	d027      	beq.n	80039fe <TIM_Base_SetConfig+0xb2>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a32      	ldr	r2, [pc, #200]	@ (8003a7c <TIM_Base_SetConfig+0x130>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d023      	beq.n	80039fe <TIM_Base_SetConfig+0xb2>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a31      	ldr	r2, [pc, #196]	@ (8003a80 <TIM_Base_SetConfig+0x134>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d01f      	beq.n	80039fe <TIM_Base_SetConfig+0xb2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a30      	ldr	r2, [pc, #192]	@ (8003a84 <TIM_Base_SetConfig+0x138>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d01b      	beq.n	80039fe <TIM_Base_SetConfig+0xb2>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a2f      	ldr	r2, [pc, #188]	@ (8003a88 <TIM_Base_SetConfig+0x13c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d017      	beq.n	80039fe <TIM_Base_SetConfig+0xb2>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a2e      	ldr	r2, [pc, #184]	@ (8003a8c <TIM_Base_SetConfig+0x140>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d013      	beq.n	80039fe <TIM_Base_SetConfig+0xb2>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a2d      	ldr	r2, [pc, #180]	@ (8003a90 <TIM_Base_SetConfig+0x144>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d00f      	beq.n	80039fe <TIM_Base_SetConfig+0xb2>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a2c      	ldr	r2, [pc, #176]	@ (8003a94 <TIM_Base_SetConfig+0x148>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d00b      	beq.n	80039fe <TIM_Base_SetConfig+0xb2>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a2b      	ldr	r2, [pc, #172]	@ (8003a98 <TIM_Base_SetConfig+0x14c>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d007      	beq.n	80039fe <TIM_Base_SetConfig+0xb2>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a2a      	ldr	r2, [pc, #168]	@ (8003a9c <TIM_Base_SetConfig+0x150>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d003      	beq.n	80039fe <TIM_Base_SetConfig+0xb2>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a29      	ldr	r2, [pc, #164]	@ (8003aa0 <TIM_Base_SetConfig+0x154>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d108      	bne.n	8003a10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a10      	ldr	r2, [pc, #64]	@ (8003a78 <TIM_Base_SetConfig+0x12c>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d003      	beq.n	8003a44 <TIM_Base_SetConfig+0xf8>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a12      	ldr	r2, [pc, #72]	@ (8003a88 <TIM_Base_SetConfig+0x13c>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d103      	bne.n	8003a4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	691a      	ldr	r2, [r3, #16]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d105      	bne.n	8003a6a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	f023 0201 	bic.w	r2, r3, #1
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	611a      	str	r2, [r3, #16]
  }
}
 8003a6a:	bf00      	nop
 8003a6c:	3714      	adds	r7, #20
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	40010000 	.word	0x40010000
 8003a7c:	40000400 	.word	0x40000400
 8003a80:	40000800 	.word	0x40000800
 8003a84:	40000c00 	.word	0x40000c00
 8003a88:	40010400 	.word	0x40010400
 8003a8c:	40014000 	.word	0x40014000
 8003a90:	40014400 	.word	0x40014400
 8003a94:	40014800 	.word	0x40014800
 8003a98:	40001800 	.word	0x40001800
 8003a9c:	40001c00 	.word	0x40001c00
 8003aa0:	40002000 	.word	0x40002000

08003aa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d101      	bne.n	8003abc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	e05a      	b.n	8003b72 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ae2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a21      	ldr	r2, [pc, #132]	@ (8003b80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d022      	beq.n	8003b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b08:	d01d      	beq.n	8003b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a1d      	ldr	r2, [pc, #116]	@ (8003b84 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d018      	beq.n	8003b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a1b      	ldr	r2, [pc, #108]	@ (8003b88 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d013      	beq.n	8003b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a1a      	ldr	r2, [pc, #104]	@ (8003b8c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d00e      	beq.n	8003b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a18      	ldr	r2, [pc, #96]	@ (8003b90 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d009      	beq.n	8003b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a17      	ldr	r2, [pc, #92]	@ (8003b94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d004      	beq.n	8003b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a15      	ldr	r2, [pc, #84]	@ (8003b98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d10c      	bne.n	8003b60 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	40010000 	.word	0x40010000
 8003b84:	40000400 	.word	0x40000400
 8003b88:	40000800 	.word	0x40000800
 8003b8c:	40000c00 	.word	0x40000c00
 8003b90:	40010400 	.word	0x40010400
 8003b94:	40014000 	.word	0x40014000
 8003b98:	40001800 	.word	0x40001800

08003b9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e042      	b.n	8003c34 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d106      	bne.n	8003bc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7fd fd3c 	bl	8001640 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2224      	movs	r2, #36	@ 0x24
 8003bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68da      	ldr	r2, [r3, #12]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003bde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 fcdb 	bl	800459c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	691a      	ldr	r2, [r3, #16]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003bf4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	695a      	ldr	r2, [r3, #20]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68da      	ldr	r2, [r3, #12]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3708      	adds	r7, #8
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	4613      	mov	r3, r2
 8003c48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b20      	cmp	r3, #32
 8003c54:	d112      	bne.n	8003c7c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d002      	beq.n	8003c62 <HAL_UART_Receive_IT+0x26>
 8003c5c:	88fb      	ldrh	r3, [r7, #6]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e00b      	b.n	8003c7e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003c6c:	88fb      	ldrh	r3, [r7, #6]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	68b9      	ldr	r1, [r7, #8]
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f000 faba 	bl	80041ec <UART_Start_Receive_IT>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	e000      	b.n	8003c7e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003c7c:	2302      	movs	r3, #2
  }
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
	...

08003c88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b0ba      	sub	sp, #232	@ 0xe8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003cc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10f      	bne.n	8003cee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cd2:	f003 0320 	and.w	r3, r3, #32
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d009      	beq.n	8003cee <HAL_UART_IRQHandler+0x66>
 8003cda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cde:	f003 0320 	and.w	r3, r3, #32
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 fb99 	bl	800441e <UART_Receive_IT>
      return;
 8003cec:	e25b      	b.n	80041a6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003cee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f000 80de 	beq.w	8003eb4 <HAL_UART_IRQHandler+0x22c>
 8003cf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d106      	bne.n	8003d12 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d08:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 80d1 	beq.w	8003eb4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00b      	beq.n	8003d36 <HAL_UART_IRQHandler+0xae>
 8003d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d005      	beq.n	8003d36 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d2e:	f043 0201 	orr.w	r2, r3, #1
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d3a:	f003 0304 	and.w	r3, r3, #4
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00b      	beq.n	8003d5a <HAL_UART_IRQHandler+0xd2>
 8003d42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d005      	beq.n	8003d5a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d52:	f043 0202 	orr.w	r2, r3, #2
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00b      	beq.n	8003d7e <HAL_UART_IRQHandler+0xf6>
 8003d66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d005      	beq.n	8003d7e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d76:	f043 0204 	orr.w	r2, r3, #4
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d82:	f003 0308 	and.w	r3, r3, #8
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d011      	beq.n	8003dae <HAL_UART_IRQHandler+0x126>
 8003d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d8e:	f003 0320 	and.w	r3, r3, #32
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d105      	bne.n	8003da2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d005      	beq.n	8003dae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003da6:	f043 0208 	orr.w	r2, r3, #8
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f000 81f2 	beq.w	800419c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dbc:	f003 0320 	and.w	r3, r3, #32
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d008      	beq.n	8003dd6 <HAL_UART_IRQHandler+0x14e>
 8003dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dc8:	f003 0320 	and.w	r3, r3, #32
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d002      	beq.n	8003dd6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 fb24 	bl	800441e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003de0:	2b40      	cmp	r3, #64	@ 0x40
 8003de2:	bf0c      	ite	eq
 8003de4:	2301      	moveq	r3, #1
 8003de6:	2300      	movne	r3, #0
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d103      	bne.n	8003e02 <HAL_UART_IRQHandler+0x17a>
 8003dfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d04f      	beq.n	8003ea2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 fa2c 	bl	8004260 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e12:	2b40      	cmp	r3, #64	@ 0x40
 8003e14:	d141      	bne.n	8003e9a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	3314      	adds	r3, #20
 8003e1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e20:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e24:	e853 3f00 	ldrex	r3, [r3]
 8003e28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003e2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	3314      	adds	r3, #20
 8003e3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003e42:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003e46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003e4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003e52:	e841 2300 	strex	r3, r2, [r1]
 8003e56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003e5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1d9      	bne.n	8003e16 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d013      	beq.n	8003e92 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e6e:	4a7e      	ldr	r2, [pc, #504]	@ (8004068 <HAL_UART_IRQHandler+0x3e0>)
 8003e70:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7fe f867 	bl	8001f4a <HAL_DMA_Abort_IT>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d016      	beq.n	8003eb0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003e8c:	4610      	mov	r0, r2
 8003e8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e90:	e00e      	b.n	8003eb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f994 	bl	80041c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e98:	e00a      	b.n	8003eb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f990 	bl	80041c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ea0:	e006      	b.n	8003eb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 f98c 	bl	80041c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003eae:	e175      	b.n	800419c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eb0:	bf00      	nop
    return;
 8003eb2:	e173      	b.n	800419c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	f040 814f 	bne.w	800415c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ec2:	f003 0310 	and.w	r3, r3, #16
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f000 8148 	beq.w	800415c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ed0:	f003 0310 	and.w	r3, r3, #16
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 8141 	beq.w	800415c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003eda:	2300      	movs	r3, #0
 8003edc:	60bb      	str	r3, [r7, #8]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	60bb      	str	r3, [r7, #8]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	60bb      	str	r3, [r7, #8]
 8003eee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003efa:	2b40      	cmp	r3, #64	@ 0x40
 8003efc:	f040 80b6 	bne.w	800406c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f0c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f000 8145 	beq.w	80041a0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	f080 813e 	bcs.w	80041a0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f2a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f36:	f000 8088 	beq.w	800404a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	330c      	adds	r3, #12
 8003f40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f44:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f48:	e853 3f00 	ldrex	r3, [r3]
 8003f4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003f50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	330c      	adds	r3, #12
 8003f62:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003f66:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003f6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003f72:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003f76:	e841 2300 	strex	r3, r2, [r1]
 8003f7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003f7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1d9      	bne.n	8003f3a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	3314      	adds	r3, #20
 8003f8c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f90:	e853 3f00 	ldrex	r3, [r3]
 8003f94:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003f96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f98:	f023 0301 	bic.w	r3, r3, #1
 8003f9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	3314      	adds	r3, #20
 8003fa6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003faa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003fae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003fb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003fb6:	e841 2300 	strex	r3, r2, [r1]
 8003fba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003fbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1e1      	bne.n	8003f86 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	3314      	adds	r3, #20
 8003fc8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003fcc:	e853 3f00 	ldrex	r3, [r3]
 8003fd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003fd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	3314      	adds	r3, #20
 8003fe2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003fe6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003fe8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003fec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003fee:	e841 2300 	strex	r3, r2, [r1]
 8003ff2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003ff4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1e3      	bne.n	8003fc2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	330c      	adds	r3, #12
 800400e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004010:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004012:	e853 3f00 	ldrex	r3, [r3]
 8004016:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004018:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800401a:	f023 0310 	bic.w	r3, r3, #16
 800401e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	330c      	adds	r3, #12
 8004028:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800402c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800402e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004030:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004032:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004034:	e841 2300 	strex	r3, r2, [r1]
 8004038:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800403a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1e3      	bne.n	8004008 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004044:	4618      	mov	r0, r3
 8004046:	f7fd ff10 	bl	8001e6a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2202      	movs	r2, #2
 800404e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004058:	b29b      	uxth	r3, r3
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	b29b      	uxth	r3, r3
 800405e:	4619      	mov	r1, r3
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 f8b7 	bl	80041d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004066:	e09b      	b.n	80041a0 <HAL_UART_IRQHandler+0x518>
 8004068:	08004327 	.word	0x08004327
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004074:	b29b      	uxth	r3, r3
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004080:	b29b      	uxth	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	f000 808e 	beq.w	80041a4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004088:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800408c:	2b00      	cmp	r3, #0
 800408e:	f000 8089 	beq.w	80041a4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	330c      	adds	r3, #12
 8004098:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800409c:	e853 3f00 	ldrex	r3, [r3]
 80040a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80040a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	330c      	adds	r3, #12
 80040b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80040b6:	647a      	str	r2, [r7, #68]	@ 0x44
 80040b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040be:	e841 2300 	strex	r3, r2, [r1]
 80040c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1e3      	bne.n	8004092 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	3314      	adds	r3, #20
 80040d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d4:	e853 3f00 	ldrex	r3, [r3]
 80040d8:	623b      	str	r3, [r7, #32]
   return(result);
 80040da:	6a3b      	ldr	r3, [r7, #32]
 80040dc:	f023 0301 	bic.w	r3, r3, #1
 80040e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	3314      	adds	r3, #20
 80040ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80040ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80040f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040f6:	e841 2300 	strex	r3, r2, [r1]
 80040fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80040fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1e3      	bne.n	80040ca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2220      	movs	r2, #32
 8004106:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	330c      	adds	r3, #12
 8004116:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	e853 3f00 	ldrex	r3, [r3]
 800411e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f023 0310 	bic.w	r3, r3, #16
 8004126:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	330c      	adds	r3, #12
 8004130:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004134:	61fa      	str	r2, [r7, #28]
 8004136:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004138:	69b9      	ldr	r1, [r7, #24]
 800413a:	69fa      	ldr	r2, [r7, #28]
 800413c:	e841 2300 	strex	r3, r2, [r1]
 8004140:	617b      	str	r3, [r7, #20]
   return(result);
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1e3      	bne.n	8004110 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2202      	movs	r2, #2
 800414c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800414e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004152:	4619      	mov	r1, r3
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 f83d 	bl	80041d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800415a:	e023      	b.n	80041a4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800415c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004160:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004164:	2b00      	cmp	r3, #0
 8004166:	d009      	beq.n	800417c <HAL_UART_IRQHandler+0x4f4>
 8004168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800416c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004170:	2b00      	cmp	r3, #0
 8004172:	d003      	beq.n	800417c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 f8ea 	bl	800434e <UART_Transmit_IT>
    return;
 800417a:	e014      	b.n	80041a6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800417c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00e      	beq.n	80041a6 <HAL_UART_IRQHandler+0x51e>
 8004188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800418c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004190:	2b00      	cmp	r3, #0
 8004192:	d008      	beq.n	80041a6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 f92a 	bl	80043ee <UART_EndTransmit_IT>
    return;
 800419a:	e004      	b.n	80041a6 <HAL_UART_IRQHandler+0x51e>
    return;
 800419c:	bf00      	nop
 800419e:	e002      	b.n	80041a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80041a0:	bf00      	nop
 80041a2:	e000      	b.n	80041a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80041a4:	bf00      	nop
  }
}
 80041a6:	37e8      	adds	r7, #232	@ 0xe8
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	460b      	mov	r3, r1
 80041de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	4613      	mov	r3, r2
 80041f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	68ba      	ldr	r2, [r7, #8]
 80041fe:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	88fa      	ldrh	r2, [r7, #6]
 8004204:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	88fa      	ldrh	r2, [r7, #6]
 800420a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2222      	movs	r2, #34	@ 0x22
 8004216:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d007      	beq.n	8004232 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68da      	ldr	r2, [r3, #12]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004230:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	695a      	ldr	r2, [r3, #20]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f042 0201 	orr.w	r2, r2, #1
 8004240:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68da      	ldr	r2, [r3, #12]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f042 0220 	orr.w	r2, r2, #32
 8004250:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3714      	adds	r7, #20
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004260:	b480      	push	{r7}
 8004262:	b095      	sub	sp, #84	@ 0x54
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	330c      	adds	r3, #12
 800426e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004272:	e853 3f00 	ldrex	r3, [r3]
 8004276:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800427a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800427e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	330c      	adds	r3, #12
 8004286:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004288:	643a      	str	r2, [r7, #64]	@ 0x40
 800428a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800428e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004290:	e841 2300 	strex	r3, r2, [r1]
 8004294:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1e5      	bne.n	8004268 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	3314      	adds	r3, #20
 80042a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a4:	6a3b      	ldr	r3, [r7, #32]
 80042a6:	e853 3f00 	ldrex	r3, [r3]
 80042aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	f023 0301 	bic.w	r3, r3, #1
 80042b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	3314      	adds	r3, #20
 80042ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042c4:	e841 2300 	strex	r3, r2, [r1]
 80042c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1e5      	bne.n	800429c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d119      	bne.n	800430c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	330c      	adds	r3, #12
 80042de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	e853 3f00 	ldrex	r3, [r3]
 80042e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	f023 0310 	bic.w	r3, r3, #16
 80042ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	330c      	adds	r3, #12
 80042f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042f8:	61ba      	str	r2, [r7, #24]
 80042fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fc:	6979      	ldr	r1, [r7, #20]
 80042fe:	69ba      	ldr	r2, [r7, #24]
 8004300:	e841 2300 	strex	r3, r2, [r1]
 8004304:	613b      	str	r3, [r7, #16]
   return(result);
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1e5      	bne.n	80042d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2220      	movs	r2, #32
 8004310:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800431a:	bf00      	nop
 800431c:	3754      	adds	r7, #84	@ 0x54
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b084      	sub	sp, #16
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004332:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f7ff ff3d 	bl	80041c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004346:	bf00      	nop
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800434e:	b480      	push	{r7}
 8004350:	b085      	sub	sp, #20
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b21      	cmp	r3, #33	@ 0x21
 8004360:	d13e      	bne.n	80043e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800436a:	d114      	bne.n	8004396 <UART_Transmit_IT+0x48>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d110      	bne.n	8004396 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	881b      	ldrh	r3, [r3, #0]
 800437e:	461a      	mov	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004388:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	1c9a      	adds	r2, r3, #2
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	621a      	str	r2, [r3, #32]
 8004394:	e008      	b.n	80043a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	1c59      	adds	r1, r3, #1
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6211      	str	r1, [r2, #32]
 80043a0:	781a      	ldrb	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	3b01      	subs	r3, #1
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	4619      	mov	r1, r3
 80043b6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10f      	bne.n	80043dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68da      	ldr	r2, [r3, #12]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80043dc:	2300      	movs	r3, #0
 80043de:	e000      	b.n	80043e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80043e0:	2302      	movs	r3, #2
  }
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b082      	sub	sp, #8
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68da      	ldr	r2, [r3, #12]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004404:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2220      	movs	r2, #32
 800440a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7ff fecc 	bl	80041ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3708      	adds	r7, #8
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b08c      	sub	sp, #48	@ 0x30
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b22      	cmp	r3, #34	@ 0x22
 8004430:	f040 80ae 	bne.w	8004590 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800443c:	d117      	bne.n	800446e <UART_Receive_IT+0x50>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d113      	bne.n	800446e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004446:	2300      	movs	r3, #0
 8004448:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800444e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	b29b      	uxth	r3, r3
 8004458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800445c:	b29a      	uxth	r2, r3
 800445e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004460:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004466:	1c9a      	adds	r2, r3, #2
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	629a      	str	r2, [r3, #40]	@ 0x28
 800446c:	e026      	b.n	80044bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004472:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004474:	2300      	movs	r3, #0
 8004476:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004480:	d007      	beq.n	8004492 <UART_Receive_IT+0x74>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10a      	bne.n	80044a0 <UART_Receive_IT+0x82>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d106      	bne.n	80044a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	b2da      	uxtb	r2, r3
 800449a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800449c:	701a      	strb	r2, [r3, #0]
 800449e:	e008      	b.n	80044b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b6:	1c5a      	adds	r2, r3, #1
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	3b01      	subs	r3, #1
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	4619      	mov	r1, r3
 80044ca:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d15d      	bne.n	800458c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68da      	ldr	r2, [r3, #12]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f022 0220 	bic.w	r2, r2, #32
 80044de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68da      	ldr	r2, [r3, #12]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	695a      	ldr	r2, [r3, #20]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 0201 	bic.w	r2, r2, #1
 80044fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2220      	movs	r2, #32
 8004504:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004512:	2b01      	cmp	r3, #1
 8004514:	d135      	bne.n	8004582 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	330c      	adds	r3, #12
 8004522:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	e853 3f00 	ldrex	r3, [r3]
 800452a:	613b      	str	r3, [r7, #16]
   return(result);
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	f023 0310 	bic.w	r3, r3, #16
 8004532:	627b      	str	r3, [r7, #36]	@ 0x24
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	330c      	adds	r3, #12
 800453a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800453c:	623a      	str	r2, [r7, #32]
 800453e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004540:	69f9      	ldr	r1, [r7, #28]
 8004542:	6a3a      	ldr	r2, [r7, #32]
 8004544:	e841 2300 	strex	r3, r2, [r1]
 8004548:	61bb      	str	r3, [r7, #24]
   return(result);
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1e5      	bne.n	800451c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0310 	and.w	r3, r3, #16
 800455a:	2b10      	cmp	r3, #16
 800455c:	d10a      	bne.n	8004574 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800455e:	2300      	movs	r3, #0
 8004560:	60fb      	str	r3, [r7, #12]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	60fb      	str	r3, [r7, #12]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	60fb      	str	r3, [r7, #12]
 8004572:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004578:	4619      	mov	r1, r3
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7ff fe2a 	bl	80041d4 <HAL_UARTEx_RxEventCallback>
 8004580:	e002      	b.n	8004588 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f7fc ffaa 	bl	80014dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004588:	2300      	movs	r3, #0
 800458a:	e002      	b.n	8004592 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800458c:	2300      	movs	r3, #0
 800458e:	e000      	b.n	8004592 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004590:	2302      	movs	r3, #2
  }
}
 8004592:	4618      	mov	r0, r3
 8004594:	3730      	adds	r7, #48	@ 0x30
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
	...

0800459c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800459c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045a0:	b0c0      	sub	sp, #256	@ 0x100
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80045b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b8:	68d9      	ldr	r1, [r3, #12]
 80045ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	ea40 0301 	orr.w	r3, r0, r1
 80045c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	431a      	orrs	r2, r3
 80045d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	431a      	orrs	r2, r3
 80045dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e0:	69db      	ldr	r3, [r3, #28]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80045f4:	f021 010c 	bic.w	r1, r1, #12
 80045f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004602:	430b      	orrs	r3, r1
 8004604:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004616:	6999      	ldr	r1, [r3, #24]
 8004618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	ea40 0301 	orr.w	r3, r0, r1
 8004622:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	4b8f      	ldr	r3, [pc, #572]	@ (8004868 <UART_SetConfig+0x2cc>)
 800462c:	429a      	cmp	r2, r3
 800462e:	d005      	beq.n	800463c <UART_SetConfig+0xa0>
 8004630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	4b8d      	ldr	r3, [pc, #564]	@ (800486c <UART_SetConfig+0x2d0>)
 8004638:	429a      	cmp	r2, r3
 800463a:	d104      	bne.n	8004646 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800463c:	f7fe f8ba 	bl	80027b4 <HAL_RCC_GetPCLK2Freq>
 8004640:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004644:	e003      	b.n	800464e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004646:	f7fe f8a1 	bl	800278c <HAL_RCC_GetPCLK1Freq>
 800464a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800464e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004652:	69db      	ldr	r3, [r3, #28]
 8004654:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004658:	f040 810c 	bne.w	8004874 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800465c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004660:	2200      	movs	r2, #0
 8004662:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004666:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800466a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800466e:	4622      	mov	r2, r4
 8004670:	462b      	mov	r3, r5
 8004672:	1891      	adds	r1, r2, r2
 8004674:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004676:	415b      	adcs	r3, r3
 8004678:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800467a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800467e:	4621      	mov	r1, r4
 8004680:	eb12 0801 	adds.w	r8, r2, r1
 8004684:	4629      	mov	r1, r5
 8004686:	eb43 0901 	adc.w	r9, r3, r1
 800468a:	f04f 0200 	mov.w	r2, #0
 800468e:	f04f 0300 	mov.w	r3, #0
 8004692:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004696:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800469a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800469e:	4690      	mov	r8, r2
 80046a0:	4699      	mov	r9, r3
 80046a2:	4623      	mov	r3, r4
 80046a4:	eb18 0303 	adds.w	r3, r8, r3
 80046a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80046ac:	462b      	mov	r3, r5
 80046ae:	eb49 0303 	adc.w	r3, r9, r3
 80046b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80046b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80046c2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80046c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80046ca:	460b      	mov	r3, r1
 80046cc:	18db      	adds	r3, r3, r3
 80046ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80046d0:	4613      	mov	r3, r2
 80046d2:	eb42 0303 	adc.w	r3, r2, r3
 80046d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80046d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80046dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80046e0:	f7fc fa80 	bl	8000be4 <__aeabi_uldivmod>
 80046e4:	4602      	mov	r2, r0
 80046e6:	460b      	mov	r3, r1
 80046e8:	4b61      	ldr	r3, [pc, #388]	@ (8004870 <UART_SetConfig+0x2d4>)
 80046ea:	fba3 2302 	umull	r2, r3, r3, r2
 80046ee:	095b      	lsrs	r3, r3, #5
 80046f0:	011c      	lsls	r4, r3, #4
 80046f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046f6:	2200      	movs	r2, #0
 80046f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046fc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004700:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004704:	4642      	mov	r2, r8
 8004706:	464b      	mov	r3, r9
 8004708:	1891      	adds	r1, r2, r2
 800470a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800470c:	415b      	adcs	r3, r3
 800470e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004710:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004714:	4641      	mov	r1, r8
 8004716:	eb12 0a01 	adds.w	sl, r2, r1
 800471a:	4649      	mov	r1, r9
 800471c:	eb43 0b01 	adc.w	fp, r3, r1
 8004720:	f04f 0200 	mov.w	r2, #0
 8004724:	f04f 0300 	mov.w	r3, #0
 8004728:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800472c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004730:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004734:	4692      	mov	sl, r2
 8004736:	469b      	mov	fp, r3
 8004738:	4643      	mov	r3, r8
 800473a:	eb1a 0303 	adds.w	r3, sl, r3
 800473e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004742:	464b      	mov	r3, r9
 8004744:	eb4b 0303 	adc.w	r3, fp, r3
 8004748:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800474c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004758:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800475c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004760:	460b      	mov	r3, r1
 8004762:	18db      	adds	r3, r3, r3
 8004764:	643b      	str	r3, [r7, #64]	@ 0x40
 8004766:	4613      	mov	r3, r2
 8004768:	eb42 0303 	adc.w	r3, r2, r3
 800476c:	647b      	str	r3, [r7, #68]	@ 0x44
 800476e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004772:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004776:	f7fc fa35 	bl	8000be4 <__aeabi_uldivmod>
 800477a:	4602      	mov	r2, r0
 800477c:	460b      	mov	r3, r1
 800477e:	4611      	mov	r1, r2
 8004780:	4b3b      	ldr	r3, [pc, #236]	@ (8004870 <UART_SetConfig+0x2d4>)
 8004782:	fba3 2301 	umull	r2, r3, r3, r1
 8004786:	095b      	lsrs	r3, r3, #5
 8004788:	2264      	movs	r2, #100	@ 0x64
 800478a:	fb02 f303 	mul.w	r3, r2, r3
 800478e:	1acb      	subs	r3, r1, r3
 8004790:	00db      	lsls	r3, r3, #3
 8004792:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004796:	4b36      	ldr	r3, [pc, #216]	@ (8004870 <UART_SetConfig+0x2d4>)
 8004798:	fba3 2302 	umull	r2, r3, r3, r2
 800479c:	095b      	lsrs	r3, r3, #5
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80047a4:	441c      	add	r4, r3
 80047a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047aa:	2200      	movs	r2, #0
 80047ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047b0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80047b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80047b8:	4642      	mov	r2, r8
 80047ba:	464b      	mov	r3, r9
 80047bc:	1891      	adds	r1, r2, r2
 80047be:	63b9      	str	r1, [r7, #56]	@ 0x38
 80047c0:	415b      	adcs	r3, r3
 80047c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80047c8:	4641      	mov	r1, r8
 80047ca:	1851      	adds	r1, r2, r1
 80047cc:	6339      	str	r1, [r7, #48]	@ 0x30
 80047ce:	4649      	mov	r1, r9
 80047d0:	414b      	adcs	r3, r1
 80047d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80047d4:	f04f 0200 	mov.w	r2, #0
 80047d8:	f04f 0300 	mov.w	r3, #0
 80047dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80047e0:	4659      	mov	r1, fp
 80047e2:	00cb      	lsls	r3, r1, #3
 80047e4:	4651      	mov	r1, sl
 80047e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047ea:	4651      	mov	r1, sl
 80047ec:	00ca      	lsls	r2, r1, #3
 80047ee:	4610      	mov	r0, r2
 80047f0:	4619      	mov	r1, r3
 80047f2:	4603      	mov	r3, r0
 80047f4:	4642      	mov	r2, r8
 80047f6:	189b      	adds	r3, r3, r2
 80047f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047fc:	464b      	mov	r3, r9
 80047fe:	460a      	mov	r2, r1
 8004800:	eb42 0303 	adc.w	r3, r2, r3
 8004804:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004814:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004818:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800481c:	460b      	mov	r3, r1
 800481e:	18db      	adds	r3, r3, r3
 8004820:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004822:	4613      	mov	r3, r2
 8004824:	eb42 0303 	adc.w	r3, r2, r3
 8004828:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800482a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800482e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004832:	f7fc f9d7 	bl	8000be4 <__aeabi_uldivmod>
 8004836:	4602      	mov	r2, r0
 8004838:	460b      	mov	r3, r1
 800483a:	4b0d      	ldr	r3, [pc, #52]	@ (8004870 <UART_SetConfig+0x2d4>)
 800483c:	fba3 1302 	umull	r1, r3, r3, r2
 8004840:	095b      	lsrs	r3, r3, #5
 8004842:	2164      	movs	r1, #100	@ 0x64
 8004844:	fb01 f303 	mul.w	r3, r1, r3
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	3332      	adds	r3, #50	@ 0x32
 800484e:	4a08      	ldr	r2, [pc, #32]	@ (8004870 <UART_SetConfig+0x2d4>)
 8004850:	fba2 2303 	umull	r2, r3, r2, r3
 8004854:	095b      	lsrs	r3, r3, #5
 8004856:	f003 0207 	and.w	r2, r3, #7
 800485a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4422      	add	r2, r4
 8004862:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004864:	e106      	b.n	8004a74 <UART_SetConfig+0x4d8>
 8004866:	bf00      	nop
 8004868:	40011000 	.word	0x40011000
 800486c:	40011400 	.word	0x40011400
 8004870:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004874:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004878:	2200      	movs	r2, #0
 800487a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800487e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004882:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004886:	4642      	mov	r2, r8
 8004888:	464b      	mov	r3, r9
 800488a:	1891      	adds	r1, r2, r2
 800488c:	6239      	str	r1, [r7, #32]
 800488e:	415b      	adcs	r3, r3
 8004890:	627b      	str	r3, [r7, #36]	@ 0x24
 8004892:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004896:	4641      	mov	r1, r8
 8004898:	1854      	adds	r4, r2, r1
 800489a:	4649      	mov	r1, r9
 800489c:	eb43 0501 	adc.w	r5, r3, r1
 80048a0:	f04f 0200 	mov.w	r2, #0
 80048a4:	f04f 0300 	mov.w	r3, #0
 80048a8:	00eb      	lsls	r3, r5, #3
 80048aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048ae:	00e2      	lsls	r2, r4, #3
 80048b0:	4614      	mov	r4, r2
 80048b2:	461d      	mov	r5, r3
 80048b4:	4643      	mov	r3, r8
 80048b6:	18e3      	adds	r3, r4, r3
 80048b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80048bc:	464b      	mov	r3, r9
 80048be:	eb45 0303 	adc.w	r3, r5, r3
 80048c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80048c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80048d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80048d6:	f04f 0200 	mov.w	r2, #0
 80048da:	f04f 0300 	mov.w	r3, #0
 80048de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80048e2:	4629      	mov	r1, r5
 80048e4:	008b      	lsls	r3, r1, #2
 80048e6:	4621      	mov	r1, r4
 80048e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048ec:	4621      	mov	r1, r4
 80048ee:	008a      	lsls	r2, r1, #2
 80048f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80048f4:	f7fc f976 	bl	8000be4 <__aeabi_uldivmod>
 80048f8:	4602      	mov	r2, r0
 80048fa:	460b      	mov	r3, r1
 80048fc:	4b60      	ldr	r3, [pc, #384]	@ (8004a80 <UART_SetConfig+0x4e4>)
 80048fe:	fba3 2302 	umull	r2, r3, r3, r2
 8004902:	095b      	lsrs	r3, r3, #5
 8004904:	011c      	lsls	r4, r3, #4
 8004906:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800490a:	2200      	movs	r2, #0
 800490c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004910:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004914:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004918:	4642      	mov	r2, r8
 800491a:	464b      	mov	r3, r9
 800491c:	1891      	adds	r1, r2, r2
 800491e:	61b9      	str	r1, [r7, #24]
 8004920:	415b      	adcs	r3, r3
 8004922:	61fb      	str	r3, [r7, #28]
 8004924:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004928:	4641      	mov	r1, r8
 800492a:	1851      	adds	r1, r2, r1
 800492c:	6139      	str	r1, [r7, #16]
 800492e:	4649      	mov	r1, r9
 8004930:	414b      	adcs	r3, r1
 8004932:	617b      	str	r3, [r7, #20]
 8004934:	f04f 0200 	mov.w	r2, #0
 8004938:	f04f 0300 	mov.w	r3, #0
 800493c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004940:	4659      	mov	r1, fp
 8004942:	00cb      	lsls	r3, r1, #3
 8004944:	4651      	mov	r1, sl
 8004946:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800494a:	4651      	mov	r1, sl
 800494c:	00ca      	lsls	r2, r1, #3
 800494e:	4610      	mov	r0, r2
 8004950:	4619      	mov	r1, r3
 8004952:	4603      	mov	r3, r0
 8004954:	4642      	mov	r2, r8
 8004956:	189b      	adds	r3, r3, r2
 8004958:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800495c:	464b      	mov	r3, r9
 800495e:	460a      	mov	r2, r1
 8004960:	eb42 0303 	adc.w	r3, r2, r3
 8004964:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004972:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004974:	f04f 0200 	mov.w	r2, #0
 8004978:	f04f 0300 	mov.w	r3, #0
 800497c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004980:	4649      	mov	r1, r9
 8004982:	008b      	lsls	r3, r1, #2
 8004984:	4641      	mov	r1, r8
 8004986:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800498a:	4641      	mov	r1, r8
 800498c:	008a      	lsls	r2, r1, #2
 800498e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004992:	f7fc f927 	bl	8000be4 <__aeabi_uldivmod>
 8004996:	4602      	mov	r2, r0
 8004998:	460b      	mov	r3, r1
 800499a:	4611      	mov	r1, r2
 800499c:	4b38      	ldr	r3, [pc, #224]	@ (8004a80 <UART_SetConfig+0x4e4>)
 800499e:	fba3 2301 	umull	r2, r3, r3, r1
 80049a2:	095b      	lsrs	r3, r3, #5
 80049a4:	2264      	movs	r2, #100	@ 0x64
 80049a6:	fb02 f303 	mul.w	r3, r2, r3
 80049aa:	1acb      	subs	r3, r1, r3
 80049ac:	011b      	lsls	r3, r3, #4
 80049ae:	3332      	adds	r3, #50	@ 0x32
 80049b0:	4a33      	ldr	r2, [pc, #204]	@ (8004a80 <UART_SetConfig+0x4e4>)
 80049b2:	fba2 2303 	umull	r2, r3, r2, r3
 80049b6:	095b      	lsrs	r3, r3, #5
 80049b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049bc:	441c      	add	r4, r3
 80049be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049c2:	2200      	movs	r2, #0
 80049c4:	673b      	str	r3, [r7, #112]	@ 0x70
 80049c6:	677a      	str	r2, [r7, #116]	@ 0x74
 80049c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80049cc:	4642      	mov	r2, r8
 80049ce:	464b      	mov	r3, r9
 80049d0:	1891      	adds	r1, r2, r2
 80049d2:	60b9      	str	r1, [r7, #8]
 80049d4:	415b      	adcs	r3, r3
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049dc:	4641      	mov	r1, r8
 80049de:	1851      	adds	r1, r2, r1
 80049e0:	6039      	str	r1, [r7, #0]
 80049e2:	4649      	mov	r1, r9
 80049e4:	414b      	adcs	r3, r1
 80049e6:	607b      	str	r3, [r7, #4]
 80049e8:	f04f 0200 	mov.w	r2, #0
 80049ec:	f04f 0300 	mov.w	r3, #0
 80049f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049f4:	4659      	mov	r1, fp
 80049f6:	00cb      	lsls	r3, r1, #3
 80049f8:	4651      	mov	r1, sl
 80049fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049fe:	4651      	mov	r1, sl
 8004a00:	00ca      	lsls	r2, r1, #3
 8004a02:	4610      	mov	r0, r2
 8004a04:	4619      	mov	r1, r3
 8004a06:	4603      	mov	r3, r0
 8004a08:	4642      	mov	r2, r8
 8004a0a:	189b      	adds	r3, r3, r2
 8004a0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a0e:	464b      	mov	r3, r9
 8004a10:	460a      	mov	r2, r1
 8004a12:	eb42 0303 	adc.w	r3, r2, r3
 8004a16:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a22:	667a      	str	r2, [r7, #100]	@ 0x64
 8004a24:	f04f 0200 	mov.w	r2, #0
 8004a28:	f04f 0300 	mov.w	r3, #0
 8004a2c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004a30:	4649      	mov	r1, r9
 8004a32:	008b      	lsls	r3, r1, #2
 8004a34:	4641      	mov	r1, r8
 8004a36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a3a:	4641      	mov	r1, r8
 8004a3c:	008a      	lsls	r2, r1, #2
 8004a3e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004a42:	f7fc f8cf 	bl	8000be4 <__aeabi_uldivmod>
 8004a46:	4602      	mov	r2, r0
 8004a48:	460b      	mov	r3, r1
 8004a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004a80 <UART_SetConfig+0x4e4>)
 8004a4c:	fba3 1302 	umull	r1, r3, r3, r2
 8004a50:	095b      	lsrs	r3, r3, #5
 8004a52:	2164      	movs	r1, #100	@ 0x64
 8004a54:	fb01 f303 	mul.w	r3, r1, r3
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	011b      	lsls	r3, r3, #4
 8004a5c:	3332      	adds	r3, #50	@ 0x32
 8004a5e:	4a08      	ldr	r2, [pc, #32]	@ (8004a80 <UART_SetConfig+0x4e4>)
 8004a60:	fba2 2303 	umull	r2, r3, r2, r3
 8004a64:	095b      	lsrs	r3, r3, #5
 8004a66:	f003 020f 	and.w	r2, r3, #15
 8004a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4422      	add	r2, r4
 8004a72:	609a      	str	r2, [r3, #8]
}
 8004a74:	bf00      	nop
 8004a76:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a80:	51eb851f 	.word	0x51eb851f

08004a84 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a84:	b084      	sub	sp, #16
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b084      	sub	sp, #16
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
 8004a8e:	f107 001c 	add.w	r0, r7, #28
 8004a92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a96:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d123      	bne.n	8004ae6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004ab2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004ac6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d105      	bne.n	8004ada <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 fa9a 	bl	8005014 <USB_CoreReset>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	73fb      	strb	r3, [r7, #15]
 8004ae4:	e01b      	b.n	8004b1e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 fa8e 	bl	8005014 <USB_CoreReset>
 8004af8:	4603      	mov	r3, r0
 8004afa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004afc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d106      	bne.n	8004b12 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b08:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	639a      	str	r2, [r3, #56]	@ 0x38
 8004b10:	e005      	b.n	8004b1e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b16:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004b1e:	7fbb      	ldrb	r3, [r7, #30]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d10b      	bne.n	8004b3c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f043 0206 	orr.w	r2, r3, #6
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f043 0220 	orr.w	r2, r3, #32
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b48:	b004      	add	sp, #16
 8004b4a:	4770      	bx	lr

08004b4c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f023 0201 	bic.w	r2, r3, #1
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr

08004b6e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b084      	sub	sp, #16
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
 8004b76:	460b      	mov	r3, r1
 8004b78:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b8a:	78fb      	ldrb	r3, [r7, #3]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d115      	bne.n	8004bbc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004b9c:	200a      	movs	r0, #10
 8004b9e:	f7fc ff33 	bl	8001a08 <HAL_Delay>
      ms += 10U;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	330a      	adds	r3, #10
 8004ba6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 fa25 	bl	8004ff8 <USB_GetMode>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d01e      	beq.n	8004bf2 <USB_SetCurrentMode+0x84>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2bc7      	cmp	r3, #199	@ 0xc7
 8004bb8:	d9f0      	bls.n	8004b9c <USB_SetCurrentMode+0x2e>
 8004bba:	e01a      	b.n	8004bf2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004bbc:	78fb      	ldrb	r3, [r7, #3]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d115      	bne.n	8004bee <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004bce:	200a      	movs	r0, #10
 8004bd0:	f7fc ff1a 	bl	8001a08 <HAL_Delay>
      ms += 10U;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	330a      	adds	r3, #10
 8004bd8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 fa0c 	bl	8004ff8 <USB_GetMode>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d005      	beq.n	8004bf2 <USB_SetCurrentMode+0x84>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2bc7      	cmp	r3, #199	@ 0xc7
 8004bea:	d9f0      	bls.n	8004bce <USB_SetCurrentMode+0x60>
 8004bec:	e001      	b.n	8004bf2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e005      	b.n	8004bfe <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2bc8      	cmp	r3, #200	@ 0xc8
 8004bf6:	d101      	bne.n	8004bfc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e000      	b.n	8004bfe <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
	...

08004c08 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c08:	b084      	sub	sp, #16
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b086      	sub	sp, #24
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
 8004c12:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004c16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004c22:	2300      	movs	r3, #0
 8004c24:	613b      	str	r3, [r7, #16]
 8004c26:	e009      	b.n	8004c3c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	3340      	adds	r3, #64	@ 0x40
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	2200      	movs	r2, #0
 8004c34:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	613b      	str	r3, [r7, #16]
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	2b0e      	cmp	r3, #14
 8004c40:	d9f2      	bls.n	8004c28 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c42:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d11c      	bne.n	8004c84 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c58:	f043 0302 	orr.w	r3, r3, #2
 8004c5c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c62:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	601a      	str	r2, [r3, #0]
 8004c82:	e005      	b.n	8004c90 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c88:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004c96:	461a      	mov	r2, r3
 8004c98:	2300      	movs	r3, #0
 8004c9a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c9c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d10d      	bne.n	8004cc0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004ca4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d104      	bne.n	8004cb6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004cac:	2100      	movs	r1, #0
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f968 	bl	8004f84 <USB_SetDevSpeed>
 8004cb4:	e008      	b.n	8004cc8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004cb6:	2101      	movs	r1, #1
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 f963 	bl	8004f84 <USB_SetDevSpeed>
 8004cbe:	e003      	b.n	8004cc8 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004cc0:	2103      	movs	r1, #3
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f95e 	bl	8004f84 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004cc8:	2110      	movs	r1, #16
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f8fa 	bl	8004ec4 <USB_FlushTxFifo>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f924 	bl	8004f28 <USB_FlushRxFifo>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d001      	beq.n	8004cea <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	2300      	movs	r3, #0
 8004d00:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d08:	461a      	mov	r2, r3
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d0e:	2300      	movs	r3, #0
 8004d10:	613b      	str	r3, [r7, #16]
 8004d12:	e043      	b.n	8004d9c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d2a:	d118      	bne.n	8004d5e <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10a      	bne.n	8004d48 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	015a      	lsls	r2, r3, #5
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	4413      	add	r3, r2
 8004d3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d3e:	461a      	mov	r2, r3
 8004d40:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004d44:	6013      	str	r3, [r2, #0]
 8004d46:	e013      	b.n	8004d70 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	015a      	lsls	r2, r3, #5
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d54:	461a      	mov	r2, r3
 8004d56:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004d5a:	6013      	str	r3, [r2, #0]
 8004d5c:	e008      	b.n	8004d70 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	015a      	lsls	r2, r3, #5
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	4413      	add	r3, r2
 8004d66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	015a      	lsls	r2, r3, #5
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	4413      	add	r3, r2
 8004d78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	2300      	movs	r3, #0
 8004d80:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	015a      	lsls	r2, r3, #5
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	4413      	add	r3, r2
 8004d8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d8e:	461a      	mov	r2, r3
 8004d90:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004d94:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	613b      	str	r3, [r7, #16]
 8004d9c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004da0:	461a      	mov	r2, r3
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d3b5      	bcc.n	8004d14 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004da8:	2300      	movs	r3, #0
 8004daa:	613b      	str	r3, [r7, #16]
 8004dac:	e043      	b.n	8004e36 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	015a      	lsls	r2, r3, #5
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	4413      	add	r3, r2
 8004db6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004dc0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004dc4:	d118      	bne.n	8004df8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10a      	bne.n	8004de2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	015a      	lsls	r2, r3, #5
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dd8:	461a      	mov	r2, r3
 8004dda:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004dde:	6013      	str	r3, [r2, #0]
 8004de0:	e013      	b.n	8004e0a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	015a      	lsls	r2, r3, #5
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	4413      	add	r3, r2
 8004dea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dee:	461a      	mov	r2, r3
 8004df0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004df4:	6013      	str	r3, [r2, #0]
 8004df6:	e008      	b.n	8004e0a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e04:	461a      	mov	r2, r3
 8004e06:	2300      	movs	r3, #0
 8004e08:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	015a      	lsls	r2, r3, #5
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	4413      	add	r3, r2
 8004e12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e16:	461a      	mov	r2, r3
 8004e18:	2300      	movs	r3, #0
 8004e1a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e28:	461a      	mov	r2, r3
 8004e2a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004e2e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	3301      	adds	r3, #1
 8004e34:	613b      	str	r3, [r7, #16]
 8004e36:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d3b5      	bcc.n	8004dae <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e54:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004e62:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004e64:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d105      	bne.n	8004e78 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	f043 0210 	orr.w	r2, r3, #16
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	699a      	ldr	r2, [r3, #24]
 8004e7c:	4b10      	ldr	r3, [pc, #64]	@ (8004ec0 <USB_DevInit+0x2b8>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004e84:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d005      	beq.n	8004e98 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	f043 0208 	orr.w	r2, r3, #8
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004e98:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d107      	bne.n	8004eb0 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004ea8:	f043 0304 	orr.w	r3, r3, #4
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004eb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3718      	adds	r7, #24
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ebc:	b004      	add	sp, #16
 8004ebe:	4770      	bx	lr
 8004ec0:	803c3800 	.word	0x803c3800

08004ec4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ede:	d901      	bls.n	8004ee4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e01b      	b.n	8004f1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	daf2      	bge.n	8004ed2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004eec:	2300      	movs	r3, #0
 8004eee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	019b      	lsls	r3, r3, #6
 8004ef4:	f043 0220 	orr.w	r2, r3, #32
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	3301      	adds	r3, #1
 8004f00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f08:	d901      	bls.n	8004f0e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e006      	b.n	8004f1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	f003 0320 	and.w	r3, r3, #32
 8004f16:	2b20      	cmp	r3, #32
 8004f18:	d0f0      	beq.n	8004efc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3714      	adds	r7, #20
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f30:	2300      	movs	r3, #0
 8004f32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	3301      	adds	r3, #1
 8004f38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f40:	d901      	bls.n	8004f46 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e018      	b.n	8004f78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	daf2      	bge.n	8004f34 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2210      	movs	r2, #16
 8004f56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f64:	d901      	bls.n	8004f6a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e006      	b.n	8004f78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	f003 0310 	and.w	r3, r3, #16
 8004f72:	2b10      	cmp	r3, #16
 8004f74:	d0f0      	beq.n	8004f58 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3714      	adds	r7, #20
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	78fb      	ldrb	r3, [r7, #3]
 8004f9e:	68f9      	ldr	r1, [r7, #12]
 8004fa0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b085      	sub	sp, #20
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004fd0:	f023 0303 	bic.w	r3, r3, #3
 8004fd4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fe4:	f043 0302 	orr.w	r3, r3, #2
 8004fe8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3714      	adds	r7, #20
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	695b      	ldr	r3, [r3, #20]
 8005004:	f003 0301 	and.w	r3, r3, #1
}
 8005008:	4618      	mov	r0, r3
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800501c:	2300      	movs	r3, #0
 800501e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	3301      	adds	r3, #1
 8005024:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800502c:	d901      	bls.n	8005032 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e01b      	b.n	800506a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	2b00      	cmp	r3, #0
 8005038:	daf2      	bge.n	8005020 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800503a:	2300      	movs	r3, #0
 800503c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	f043 0201 	orr.w	r2, r3, #1
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	3301      	adds	r3, #1
 800504e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005056:	d901      	bls.n	800505c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e006      	b.n	800506a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b01      	cmp	r3, #1
 8005066:	d0f0      	beq.n	800504a <USB_CoreReset+0x36>

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3714      	adds	r7, #20
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr

08005076 <memset>:
 8005076:	4402      	add	r2, r0
 8005078:	4603      	mov	r3, r0
 800507a:	4293      	cmp	r3, r2
 800507c:	d100      	bne.n	8005080 <memset+0xa>
 800507e:	4770      	bx	lr
 8005080:	f803 1b01 	strb.w	r1, [r3], #1
 8005084:	e7f9      	b.n	800507a <memset+0x4>
	...

08005088 <__libc_init_array>:
 8005088:	b570      	push	{r4, r5, r6, lr}
 800508a:	4d0d      	ldr	r5, [pc, #52]	@ (80050c0 <__libc_init_array+0x38>)
 800508c:	4c0d      	ldr	r4, [pc, #52]	@ (80050c4 <__libc_init_array+0x3c>)
 800508e:	1b64      	subs	r4, r4, r5
 8005090:	10a4      	asrs	r4, r4, #2
 8005092:	2600      	movs	r6, #0
 8005094:	42a6      	cmp	r6, r4
 8005096:	d109      	bne.n	80050ac <__libc_init_array+0x24>
 8005098:	4d0b      	ldr	r5, [pc, #44]	@ (80050c8 <__libc_init_array+0x40>)
 800509a:	4c0c      	ldr	r4, [pc, #48]	@ (80050cc <__libc_init_array+0x44>)
 800509c:	f001 f848 	bl	8006130 <_init>
 80050a0:	1b64      	subs	r4, r4, r5
 80050a2:	10a4      	asrs	r4, r4, #2
 80050a4:	2600      	movs	r6, #0
 80050a6:	42a6      	cmp	r6, r4
 80050a8:	d105      	bne.n	80050b6 <__libc_init_array+0x2e>
 80050aa:	bd70      	pop	{r4, r5, r6, pc}
 80050ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80050b0:	4798      	blx	r3
 80050b2:	3601      	adds	r6, #1
 80050b4:	e7ee      	b.n	8005094 <__libc_init_array+0xc>
 80050b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ba:	4798      	blx	r3
 80050bc:	3601      	adds	r6, #1
 80050be:	e7f2      	b.n	80050a6 <__libc_init_array+0x1e>
 80050c0:	08006340 	.word	0x08006340
 80050c4:	08006340 	.word	0x08006340
 80050c8:	08006340 	.word	0x08006340
 80050cc:	08006344 	.word	0x08006344

080050d0 <sin>:
 80050d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80050d2:	ec53 2b10 	vmov	r2, r3, d0
 80050d6:	4826      	ldr	r0, [pc, #152]	@ (8005170 <sin+0xa0>)
 80050d8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80050dc:	4281      	cmp	r1, r0
 80050de:	d807      	bhi.n	80050f0 <sin+0x20>
 80050e0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8005168 <sin+0x98>
 80050e4:	2000      	movs	r0, #0
 80050e6:	b005      	add	sp, #20
 80050e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80050ec:	f000 b90c 	b.w	8005308 <__kernel_sin>
 80050f0:	4820      	ldr	r0, [pc, #128]	@ (8005174 <sin+0xa4>)
 80050f2:	4281      	cmp	r1, r0
 80050f4:	d908      	bls.n	8005108 <sin+0x38>
 80050f6:	4610      	mov	r0, r2
 80050f8:	4619      	mov	r1, r3
 80050fa:	f7fb f889 	bl	8000210 <__aeabi_dsub>
 80050fe:	ec41 0b10 	vmov	d0, r0, r1
 8005102:	b005      	add	sp, #20
 8005104:	f85d fb04 	ldr.w	pc, [sp], #4
 8005108:	4668      	mov	r0, sp
 800510a:	f000 f9b9 	bl	8005480 <__ieee754_rem_pio2>
 800510e:	f000 0003 	and.w	r0, r0, #3
 8005112:	2801      	cmp	r0, #1
 8005114:	d00c      	beq.n	8005130 <sin+0x60>
 8005116:	2802      	cmp	r0, #2
 8005118:	d011      	beq.n	800513e <sin+0x6e>
 800511a:	b9e8      	cbnz	r0, 8005158 <sin+0x88>
 800511c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005120:	ed9d 0b00 	vldr	d0, [sp]
 8005124:	2001      	movs	r0, #1
 8005126:	f000 f8ef 	bl	8005308 <__kernel_sin>
 800512a:	ec51 0b10 	vmov	r0, r1, d0
 800512e:	e7e6      	b.n	80050fe <sin+0x2e>
 8005130:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005134:	ed9d 0b00 	vldr	d0, [sp]
 8005138:	f000 f81e 	bl	8005178 <__kernel_cos>
 800513c:	e7f5      	b.n	800512a <sin+0x5a>
 800513e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005142:	ed9d 0b00 	vldr	d0, [sp]
 8005146:	2001      	movs	r0, #1
 8005148:	f000 f8de 	bl	8005308 <__kernel_sin>
 800514c:	ec53 2b10 	vmov	r2, r3, d0
 8005150:	4610      	mov	r0, r2
 8005152:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8005156:	e7d2      	b.n	80050fe <sin+0x2e>
 8005158:	ed9d 1b02 	vldr	d1, [sp, #8]
 800515c:	ed9d 0b00 	vldr	d0, [sp]
 8005160:	f000 f80a 	bl	8005178 <__kernel_cos>
 8005164:	e7f2      	b.n	800514c <sin+0x7c>
 8005166:	bf00      	nop
	...
 8005170:	3fe921fb 	.word	0x3fe921fb
 8005174:	7fefffff 	.word	0x7fefffff

08005178 <__kernel_cos>:
 8005178:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800517c:	ec57 6b10 	vmov	r6, r7, d0
 8005180:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8005184:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8005188:	ed8d 1b00 	vstr	d1, [sp]
 800518c:	d206      	bcs.n	800519c <__kernel_cos+0x24>
 800518e:	4630      	mov	r0, r6
 8005190:	4639      	mov	r1, r7
 8005192:	f7fb fc8f 	bl	8000ab4 <__aeabi_d2iz>
 8005196:	2800      	cmp	r0, #0
 8005198:	f000 8088 	beq.w	80052ac <__kernel_cos+0x134>
 800519c:	4632      	mov	r2, r6
 800519e:	463b      	mov	r3, r7
 80051a0:	4630      	mov	r0, r6
 80051a2:	4639      	mov	r1, r7
 80051a4:	f7fb f9ec 	bl	8000580 <__aeabi_dmul>
 80051a8:	4b51      	ldr	r3, [pc, #324]	@ (80052f0 <__kernel_cos+0x178>)
 80051aa:	2200      	movs	r2, #0
 80051ac:	4604      	mov	r4, r0
 80051ae:	460d      	mov	r5, r1
 80051b0:	f7fb f9e6 	bl	8000580 <__aeabi_dmul>
 80051b4:	a340      	add	r3, pc, #256	@ (adr r3, 80052b8 <__kernel_cos+0x140>)
 80051b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ba:	4682      	mov	sl, r0
 80051bc:	468b      	mov	fp, r1
 80051be:	4620      	mov	r0, r4
 80051c0:	4629      	mov	r1, r5
 80051c2:	f7fb f9dd 	bl	8000580 <__aeabi_dmul>
 80051c6:	a33e      	add	r3, pc, #248	@ (adr r3, 80052c0 <__kernel_cos+0x148>)
 80051c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051cc:	f7fb f822 	bl	8000214 <__adddf3>
 80051d0:	4622      	mov	r2, r4
 80051d2:	462b      	mov	r3, r5
 80051d4:	f7fb f9d4 	bl	8000580 <__aeabi_dmul>
 80051d8:	a33b      	add	r3, pc, #236	@ (adr r3, 80052c8 <__kernel_cos+0x150>)
 80051da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051de:	f7fb f817 	bl	8000210 <__aeabi_dsub>
 80051e2:	4622      	mov	r2, r4
 80051e4:	462b      	mov	r3, r5
 80051e6:	f7fb f9cb 	bl	8000580 <__aeabi_dmul>
 80051ea:	a339      	add	r3, pc, #228	@ (adr r3, 80052d0 <__kernel_cos+0x158>)
 80051ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f0:	f7fb f810 	bl	8000214 <__adddf3>
 80051f4:	4622      	mov	r2, r4
 80051f6:	462b      	mov	r3, r5
 80051f8:	f7fb f9c2 	bl	8000580 <__aeabi_dmul>
 80051fc:	a336      	add	r3, pc, #216	@ (adr r3, 80052d8 <__kernel_cos+0x160>)
 80051fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005202:	f7fb f805 	bl	8000210 <__aeabi_dsub>
 8005206:	4622      	mov	r2, r4
 8005208:	462b      	mov	r3, r5
 800520a:	f7fb f9b9 	bl	8000580 <__aeabi_dmul>
 800520e:	a334      	add	r3, pc, #208	@ (adr r3, 80052e0 <__kernel_cos+0x168>)
 8005210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005214:	f7fa fffe 	bl	8000214 <__adddf3>
 8005218:	4622      	mov	r2, r4
 800521a:	462b      	mov	r3, r5
 800521c:	f7fb f9b0 	bl	8000580 <__aeabi_dmul>
 8005220:	4622      	mov	r2, r4
 8005222:	462b      	mov	r3, r5
 8005224:	f7fb f9ac 	bl	8000580 <__aeabi_dmul>
 8005228:	e9dd 2300 	ldrd	r2, r3, [sp]
 800522c:	4604      	mov	r4, r0
 800522e:	460d      	mov	r5, r1
 8005230:	4630      	mov	r0, r6
 8005232:	4639      	mov	r1, r7
 8005234:	f7fb f9a4 	bl	8000580 <__aeabi_dmul>
 8005238:	460b      	mov	r3, r1
 800523a:	4602      	mov	r2, r0
 800523c:	4629      	mov	r1, r5
 800523e:	4620      	mov	r0, r4
 8005240:	f7fa ffe6 	bl	8000210 <__aeabi_dsub>
 8005244:	4b2b      	ldr	r3, [pc, #172]	@ (80052f4 <__kernel_cos+0x17c>)
 8005246:	4598      	cmp	r8, r3
 8005248:	4606      	mov	r6, r0
 800524a:	460f      	mov	r7, r1
 800524c:	d810      	bhi.n	8005270 <__kernel_cos+0xf8>
 800524e:	4602      	mov	r2, r0
 8005250:	460b      	mov	r3, r1
 8005252:	4650      	mov	r0, sl
 8005254:	4659      	mov	r1, fp
 8005256:	f7fa ffdb 	bl	8000210 <__aeabi_dsub>
 800525a:	460b      	mov	r3, r1
 800525c:	4926      	ldr	r1, [pc, #152]	@ (80052f8 <__kernel_cos+0x180>)
 800525e:	4602      	mov	r2, r0
 8005260:	2000      	movs	r0, #0
 8005262:	f7fa ffd5 	bl	8000210 <__aeabi_dsub>
 8005266:	ec41 0b10 	vmov	d0, r0, r1
 800526a:	b003      	add	sp, #12
 800526c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005270:	4b22      	ldr	r3, [pc, #136]	@ (80052fc <__kernel_cos+0x184>)
 8005272:	4921      	ldr	r1, [pc, #132]	@ (80052f8 <__kernel_cos+0x180>)
 8005274:	4598      	cmp	r8, r3
 8005276:	bf8c      	ite	hi
 8005278:	4d21      	ldrhi	r5, [pc, #132]	@ (8005300 <__kernel_cos+0x188>)
 800527a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800527e:	2400      	movs	r4, #0
 8005280:	4622      	mov	r2, r4
 8005282:	462b      	mov	r3, r5
 8005284:	2000      	movs	r0, #0
 8005286:	f7fa ffc3 	bl	8000210 <__aeabi_dsub>
 800528a:	4622      	mov	r2, r4
 800528c:	4680      	mov	r8, r0
 800528e:	4689      	mov	r9, r1
 8005290:	462b      	mov	r3, r5
 8005292:	4650      	mov	r0, sl
 8005294:	4659      	mov	r1, fp
 8005296:	f7fa ffbb 	bl	8000210 <__aeabi_dsub>
 800529a:	4632      	mov	r2, r6
 800529c:	463b      	mov	r3, r7
 800529e:	f7fa ffb7 	bl	8000210 <__aeabi_dsub>
 80052a2:	4602      	mov	r2, r0
 80052a4:	460b      	mov	r3, r1
 80052a6:	4640      	mov	r0, r8
 80052a8:	4649      	mov	r1, r9
 80052aa:	e7da      	b.n	8005262 <__kernel_cos+0xea>
 80052ac:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80052e8 <__kernel_cos+0x170>
 80052b0:	e7db      	b.n	800526a <__kernel_cos+0xf2>
 80052b2:	bf00      	nop
 80052b4:	f3af 8000 	nop.w
 80052b8:	be8838d4 	.word	0xbe8838d4
 80052bc:	bda8fae9 	.word	0xbda8fae9
 80052c0:	bdb4b1c4 	.word	0xbdb4b1c4
 80052c4:	3e21ee9e 	.word	0x3e21ee9e
 80052c8:	809c52ad 	.word	0x809c52ad
 80052cc:	3e927e4f 	.word	0x3e927e4f
 80052d0:	19cb1590 	.word	0x19cb1590
 80052d4:	3efa01a0 	.word	0x3efa01a0
 80052d8:	16c15177 	.word	0x16c15177
 80052dc:	3f56c16c 	.word	0x3f56c16c
 80052e0:	5555554c 	.word	0x5555554c
 80052e4:	3fa55555 	.word	0x3fa55555
 80052e8:	00000000 	.word	0x00000000
 80052ec:	3ff00000 	.word	0x3ff00000
 80052f0:	3fe00000 	.word	0x3fe00000
 80052f4:	3fd33332 	.word	0x3fd33332
 80052f8:	3ff00000 	.word	0x3ff00000
 80052fc:	3fe90000 	.word	0x3fe90000
 8005300:	3fd20000 	.word	0x3fd20000
 8005304:	00000000 	.word	0x00000000

08005308 <__kernel_sin>:
 8005308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800530c:	ec55 4b10 	vmov	r4, r5, d0
 8005310:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8005314:	b085      	sub	sp, #20
 8005316:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800531a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800531e:	4680      	mov	r8, r0
 8005320:	d205      	bcs.n	800532e <__kernel_sin+0x26>
 8005322:	4620      	mov	r0, r4
 8005324:	4629      	mov	r1, r5
 8005326:	f7fb fbc5 	bl	8000ab4 <__aeabi_d2iz>
 800532a:	2800      	cmp	r0, #0
 800532c:	d052      	beq.n	80053d4 <__kernel_sin+0xcc>
 800532e:	4622      	mov	r2, r4
 8005330:	462b      	mov	r3, r5
 8005332:	4620      	mov	r0, r4
 8005334:	4629      	mov	r1, r5
 8005336:	f7fb f923 	bl	8000580 <__aeabi_dmul>
 800533a:	4682      	mov	sl, r0
 800533c:	468b      	mov	fp, r1
 800533e:	4602      	mov	r2, r0
 8005340:	460b      	mov	r3, r1
 8005342:	4620      	mov	r0, r4
 8005344:	4629      	mov	r1, r5
 8005346:	f7fb f91b 	bl	8000580 <__aeabi_dmul>
 800534a:	a342      	add	r3, pc, #264	@ (adr r3, 8005454 <__kernel_sin+0x14c>)
 800534c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005350:	e9cd 0100 	strd	r0, r1, [sp]
 8005354:	4650      	mov	r0, sl
 8005356:	4659      	mov	r1, fp
 8005358:	f7fb f912 	bl	8000580 <__aeabi_dmul>
 800535c:	a33f      	add	r3, pc, #252	@ (adr r3, 800545c <__kernel_sin+0x154>)
 800535e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005362:	f7fa ff55 	bl	8000210 <__aeabi_dsub>
 8005366:	4652      	mov	r2, sl
 8005368:	465b      	mov	r3, fp
 800536a:	f7fb f909 	bl	8000580 <__aeabi_dmul>
 800536e:	a33d      	add	r3, pc, #244	@ (adr r3, 8005464 <__kernel_sin+0x15c>)
 8005370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005374:	f7fa ff4e 	bl	8000214 <__adddf3>
 8005378:	4652      	mov	r2, sl
 800537a:	465b      	mov	r3, fp
 800537c:	f7fb f900 	bl	8000580 <__aeabi_dmul>
 8005380:	a33a      	add	r3, pc, #232	@ (adr r3, 800546c <__kernel_sin+0x164>)
 8005382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005386:	f7fa ff43 	bl	8000210 <__aeabi_dsub>
 800538a:	4652      	mov	r2, sl
 800538c:	465b      	mov	r3, fp
 800538e:	f7fb f8f7 	bl	8000580 <__aeabi_dmul>
 8005392:	a338      	add	r3, pc, #224	@ (adr r3, 8005474 <__kernel_sin+0x16c>)
 8005394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005398:	f7fa ff3c 	bl	8000214 <__adddf3>
 800539c:	4606      	mov	r6, r0
 800539e:	460f      	mov	r7, r1
 80053a0:	f1b8 0f00 	cmp.w	r8, #0
 80053a4:	d11b      	bne.n	80053de <__kernel_sin+0xd6>
 80053a6:	4602      	mov	r2, r0
 80053a8:	460b      	mov	r3, r1
 80053aa:	4650      	mov	r0, sl
 80053ac:	4659      	mov	r1, fp
 80053ae:	f7fb f8e7 	bl	8000580 <__aeabi_dmul>
 80053b2:	a325      	add	r3, pc, #148	@ (adr r3, 8005448 <__kernel_sin+0x140>)
 80053b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b8:	f7fa ff2a 	bl	8000210 <__aeabi_dsub>
 80053bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80053c0:	f7fb f8de 	bl	8000580 <__aeabi_dmul>
 80053c4:	4602      	mov	r2, r0
 80053c6:	460b      	mov	r3, r1
 80053c8:	4620      	mov	r0, r4
 80053ca:	4629      	mov	r1, r5
 80053cc:	f7fa ff22 	bl	8000214 <__adddf3>
 80053d0:	4604      	mov	r4, r0
 80053d2:	460d      	mov	r5, r1
 80053d4:	ec45 4b10 	vmov	d0, r4, r5
 80053d8:	b005      	add	sp, #20
 80053da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053e2:	4b1b      	ldr	r3, [pc, #108]	@ (8005450 <__kernel_sin+0x148>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	f7fb f8cb 	bl	8000580 <__aeabi_dmul>
 80053ea:	4632      	mov	r2, r6
 80053ec:	4680      	mov	r8, r0
 80053ee:	4689      	mov	r9, r1
 80053f0:	463b      	mov	r3, r7
 80053f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80053f6:	f7fb f8c3 	bl	8000580 <__aeabi_dmul>
 80053fa:	4602      	mov	r2, r0
 80053fc:	460b      	mov	r3, r1
 80053fe:	4640      	mov	r0, r8
 8005400:	4649      	mov	r1, r9
 8005402:	f7fa ff05 	bl	8000210 <__aeabi_dsub>
 8005406:	4652      	mov	r2, sl
 8005408:	465b      	mov	r3, fp
 800540a:	f7fb f8b9 	bl	8000580 <__aeabi_dmul>
 800540e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005412:	f7fa fefd 	bl	8000210 <__aeabi_dsub>
 8005416:	a30c      	add	r3, pc, #48	@ (adr r3, 8005448 <__kernel_sin+0x140>)
 8005418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541c:	4606      	mov	r6, r0
 800541e:	460f      	mov	r7, r1
 8005420:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005424:	f7fb f8ac 	bl	8000580 <__aeabi_dmul>
 8005428:	4602      	mov	r2, r0
 800542a:	460b      	mov	r3, r1
 800542c:	4630      	mov	r0, r6
 800542e:	4639      	mov	r1, r7
 8005430:	f7fa fef0 	bl	8000214 <__adddf3>
 8005434:	4602      	mov	r2, r0
 8005436:	460b      	mov	r3, r1
 8005438:	4620      	mov	r0, r4
 800543a:	4629      	mov	r1, r5
 800543c:	f7fa fee8 	bl	8000210 <__aeabi_dsub>
 8005440:	e7c6      	b.n	80053d0 <__kernel_sin+0xc8>
 8005442:	bf00      	nop
 8005444:	f3af 8000 	nop.w
 8005448:	55555549 	.word	0x55555549
 800544c:	3fc55555 	.word	0x3fc55555
 8005450:	3fe00000 	.word	0x3fe00000
 8005454:	5acfd57c 	.word	0x5acfd57c
 8005458:	3de5d93a 	.word	0x3de5d93a
 800545c:	8a2b9ceb 	.word	0x8a2b9ceb
 8005460:	3e5ae5e6 	.word	0x3e5ae5e6
 8005464:	57b1fe7d 	.word	0x57b1fe7d
 8005468:	3ec71de3 	.word	0x3ec71de3
 800546c:	19c161d5 	.word	0x19c161d5
 8005470:	3f2a01a0 	.word	0x3f2a01a0
 8005474:	1110f8a6 	.word	0x1110f8a6
 8005478:	3f811111 	.word	0x3f811111
 800547c:	00000000 	.word	0x00000000

08005480 <__ieee754_rem_pio2>:
 8005480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005484:	ec57 6b10 	vmov	r6, r7, d0
 8005488:	4bc5      	ldr	r3, [pc, #788]	@ (80057a0 <__ieee754_rem_pio2+0x320>)
 800548a:	b08d      	sub	sp, #52	@ 0x34
 800548c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8005490:	4598      	cmp	r8, r3
 8005492:	4604      	mov	r4, r0
 8005494:	9704      	str	r7, [sp, #16]
 8005496:	d807      	bhi.n	80054a8 <__ieee754_rem_pio2+0x28>
 8005498:	2200      	movs	r2, #0
 800549a:	2300      	movs	r3, #0
 800549c:	ed80 0b00 	vstr	d0, [r0]
 80054a0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80054a4:	2500      	movs	r5, #0
 80054a6:	e028      	b.n	80054fa <__ieee754_rem_pio2+0x7a>
 80054a8:	4bbe      	ldr	r3, [pc, #760]	@ (80057a4 <__ieee754_rem_pio2+0x324>)
 80054aa:	4598      	cmp	r8, r3
 80054ac:	d878      	bhi.n	80055a0 <__ieee754_rem_pio2+0x120>
 80054ae:	9b04      	ldr	r3, [sp, #16]
 80054b0:	4dbd      	ldr	r5, [pc, #756]	@ (80057a8 <__ieee754_rem_pio2+0x328>)
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	4630      	mov	r0, r6
 80054b6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8005768 <__ieee754_rem_pio2+0x2e8>)
 80054b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054bc:	4639      	mov	r1, r7
 80054be:	dd38      	ble.n	8005532 <__ieee754_rem_pio2+0xb2>
 80054c0:	f7fa fea6 	bl	8000210 <__aeabi_dsub>
 80054c4:	45a8      	cmp	r8, r5
 80054c6:	4606      	mov	r6, r0
 80054c8:	460f      	mov	r7, r1
 80054ca:	d01a      	beq.n	8005502 <__ieee754_rem_pio2+0x82>
 80054cc:	a3a8      	add	r3, pc, #672	@ (adr r3, 8005770 <__ieee754_rem_pio2+0x2f0>)
 80054ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d2:	f7fa fe9d 	bl	8000210 <__aeabi_dsub>
 80054d6:	4602      	mov	r2, r0
 80054d8:	460b      	mov	r3, r1
 80054da:	4680      	mov	r8, r0
 80054dc:	4689      	mov	r9, r1
 80054de:	4630      	mov	r0, r6
 80054e0:	4639      	mov	r1, r7
 80054e2:	f7fa fe95 	bl	8000210 <__aeabi_dsub>
 80054e6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8005770 <__ieee754_rem_pio2+0x2f0>)
 80054e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ec:	f7fa fe90 	bl	8000210 <__aeabi_dsub>
 80054f0:	e9c4 8900 	strd	r8, r9, [r4]
 80054f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80054f8:	2501      	movs	r5, #1
 80054fa:	4628      	mov	r0, r5
 80054fc:	b00d      	add	sp, #52	@ 0x34
 80054fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005502:	a39d      	add	r3, pc, #628	@ (adr r3, 8005778 <__ieee754_rem_pio2+0x2f8>)
 8005504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005508:	f7fa fe82 	bl	8000210 <__aeabi_dsub>
 800550c:	a39c      	add	r3, pc, #624	@ (adr r3, 8005780 <__ieee754_rem_pio2+0x300>)
 800550e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005512:	4606      	mov	r6, r0
 8005514:	460f      	mov	r7, r1
 8005516:	f7fa fe7b 	bl	8000210 <__aeabi_dsub>
 800551a:	4602      	mov	r2, r0
 800551c:	460b      	mov	r3, r1
 800551e:	4680      	mov	r8, r0
 8005520:	4689      	mov	r9, r1
 8005522:	4630      	mov	r0, r6
 8005524:	4639      	mov	r1, r7
 8005526:	f7fa fe73 	bl	8000210 <__aeabi_dsub>
 800552a:	a395      	add	r3, pc, #596	@ (adr r3, 8005780 <__ieee754_rem_pio2+0x300>)
 800552c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005530:	e7dc      	b.n	80054ec <__ieee754_rem_pio2+0x6c>
 8005532:	f7fa fe6f 	bl	8000214 <__adddf3>
 8005536:	45a8      	cmp	r8, r5
 8005538:	4606      	mov	r6, r0
 800553a:	460f      	mov	r7, r1
 800553c:	d018      	beq.n	8005570 <__ieee754_rem_pio2+0xf0>
 800553e:	a38c      	add	r3, pc, #560	@ (adr r3, 8005770 <__ieee754_rem_pio2+0x2f0>)
 8005540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005544:	f7fa fe66 	bl	8000214 <__adddf3>
 8005548:	4602      	mov	r2, r0
 800554a:	460b      	mov	r3, r1
 800554c:	4680      	mov	r8, r0
 800554e:	4689      	mov	r9, r1
 8005550:	4630      	mov	r0, r6
 8005552:	4639      	mov	r1, r7
 8005554:	f7fa fe5c 	bl	8000210 <__aeabi_dsub>
 8005558:	a385      	add	r3, pc, #532	@ (adr r3, 8005770 <__ieee754_rem_pio2+0x2f0>)
 800555a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555e:	f7fa fe59 	bl	8000214 <__adddf3>
 8005562:	f04f 35ff 	mov.w	r5, #4294967295
 8005566:	e9c4 8900 	strd	r8, r9, [r4]
 800556a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800556e:	e7c4      	b.n	80054fa <__ieee754_rem_pio2+0x7a>
 8005570:	a381      	add	r3, pc, #516	@ (adr r3, 8005778 <__ieee754_rem_pio2+0x2f8>)
 8005572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005576:	f7fa fe4d 	bl	8000214 <__adddf3>
 800557a:	a381      	add	r3, pc, #516	@ (adr r3, 8005780 <__ieee754_rem_pio2+0x300>)
 800557c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005580:	4606      	mov	r6, r0
 8005582:	460f      	mov	r7, r1
 8005584:	f7fa fe46 	bl	8000214 <__adddf3>
 8005588:	4602      	mov	r2, r0
 800558a:	460b      	mov	r3, r1
 800558c:	4680      	mov	r8, r0
 800558e:	4689      	mov	r9, r1
 8005590:	4630      	mov	r0, r6
 8005592:	4639      	mov	r1, r7
 8005594:	f7fa fe3c 	bl	8000210 <__aeabi_dsub>
 8005598:	a379      	add	r3, pc, #484	@ (adr r3, 8005780 <__ieee754_rem_pio2+0x300>)
 800559a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559e:	e7de      	b.n	800555e <__ieee754_rem_pio2+0xde>
 80055a0:	4b82      	ldr	r3, [pc, #520]	@ (80057ac <__ieee754_rem_pio2+0x32c>)
 80055a2:	4598      	cmp	r8, r3
 80055a4:	f200 80d1 	bhi.w	800574a <__ieee754_rem_pio2+0x2ca>
 80055a8:	f000 f966 	bl	8005878 <fabs>
 80055ac:	ec57 6b10 	vmov	r6, r7, d0
 80055b0:	a375      	add	r3, pc, #468	@ (adr r3, 8005788 <__ieee754_rem_pio2+0x308>)
 80055b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b6:	4630      	mov	r0, r6
 80055b8:	4639      	mov	r1, r7
 80055ba:	f7fa ffe1 	bl	8000580 <__aeabi_dmul>
 80055be:	4b7c      	ldr	r3, [pc, #496]	@ (80057b0 <__ieee754_rem_pio2+0x330>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	f7fa fe27 	bl	8000214 <__adddf3>
 80055c6:	f7fb fa75 	bl	8000ab4 <__aeabi_d2iz>
 80055ca:	4605      	mov	r5, r0
 80055cc:	f7fa ff6e 	bl	80004ac <__aeabi_i2d>
 80055d0:	4602      	mov	r2, r0
 80055d2:	460b      	mov	r3, r1
 80055d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80055d8:	a363      	add	r3, pc, #396	@ (adr r3, 8005768 <__ieee754_rem_pio2+0x2e8>)
 80055da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055de:	f7fa ffcf 	bl	8000580 <__aeabi_dmul>
 80055e2:	4602      	mov	r2, r0
 80055e4:	460b      	mov	r3, r1
 80055e6:	4630      	mov	r0, r6
 80055e8:	4639      	mov	r1, r7
 80055ea:	f7fa fe11 	bl	8000210 <__aeabi_dsub>
 80055ee:	a360      	add	r3, pc, #384	@ (adr r3, 8005770 <__ieee754_rem_pio2+0x2f0>)
 80055f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f4:	4682      	mov	sl, r0
 80055f6:	468b      	mov	fp, r1
 80055f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055fc:	f7fa ffc0 	bl	8000580 <__aeabi_dmul>
 8005600:	2d1f      	cmp	r5, #31
 8005602:	4606      	mov	r6, r0
 8005604:	460f      	mov	r7, r1
 8005606:	dc0c      	bgt.n	8005622 <__ieee754_rem_pio2+0x1a2>
 8005608:	4b6a      	ldr	r3, [pc, #424]	@ (80057b4 <__ieee754_rem_pio2+0x334>)
 800560a:	1e6a      	subs	r2, r5, #1
 800560c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005610:	4543      	cmp	r3, r8
 8005612:	d006      	beq.n	8005622 <__ieee754_rem_pio2+0x1a2>
 8005614:	4632      	mov	r2, r6
 8005616:	463b      	mov	r3, r7
 8005618:	4650      	mov	r0, sl
 800561a:	4659      	mov	r1, fp
 800561c:	f7fa fdf8 	bl	8000210 <__aeabi_dsub>
 8005620:	e00e      	b.n	8005640 <__ieee754_rem_pio2+0x1c0>
 8005622:	463b      	mov	r3, r7
 8005624:	4632      	mov	r2, r6
 8005626:	4650      	mov	r0, sl
 8005628:	4659      	mov	r1, fp
 800562a:	f7fa fdf1 	bl	8000210 <__aeabi_dsub>
 800562e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005632:	9305      	str	r3, [sp, #20]
 8005634:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005638:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800563c:	2b10      	cmp	r3, #16
 800563e:	dc02      	bgt.n	8005646 <__ieee754_rem_pio2+0x1c6>
 8005640:	e9c4 0100 	strd	r0, r1, [r4]
 8005644:	e039      	b.n	80056ba <__ieee754_rem_pio2+0x23a>
 8005646:	a34c      	add	r3, pc, #304	@ (adr r3, 8005778 <__ieee754_rem_pio2+0x2f8>)
 8005648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005650:	f7fa ff96 	bl	8000580 <__aeabi_dmul>
 8005654:	4606      	mov	r6, r0
 8005656:	460f      	mov	r7, r1
 8005658:	4602      	mov	r2, r0
 800565a:	460b      	mov	r3, r1
 800565c:	4650      	mov	r0, sl
 800565e:	4659      	mov	r1, fp
 8005660:	f7fa fdd6 	bl	8000210 <__aeabi_dsub>
 8005664:	4602      	mov	r2, r0
 8005666:	460b      	mov	r3, r1
 8005668:	4680      	mov	r8, r0
 800566a:	4689      	mov	r9, r1
 800566c:	4650      	mov	r0, sl
 800566e:	4659      	mov	r1, fp
 8005670:	f7fa fdce 	bl	8000210 <__aeabi_dsub>
 8005674:	4632      	mov	r2, r6
 8005676:	463b      	mov	r3, r7
 8005678:	f7fa fdca 	bl	8000210 <__aeabi_dsub>
 800567c:	a340      	add	r3, pc, #256	@ (adr r3, 8005780 <__ieee754_rem_pio2+0x300>)
 800567e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005682:	4606      	mov	r6, r0
 8005684:	460f      	mov	r7, r1
 8005686:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800568a:	f7fa ff79 	bl	8000580 <__aeabi_dmul>
 800568e:	4632      	mov	r2, r6
 8005690:	463b      	mov	r3, r7
 8005692:	f7fa fdbd 	bl	8000210 <__aeabi_dsub>
 8005696:	4602      	mov	r2, r0
 8005698:	460b      	mov	r3, r1
 800569a:	4606      	mov	r6, r0
 800569c:	460f      	mov	r7, r1
 800569e:	4640      	mov	r0, r8
 80056a0:	4649      	mov	r1, r9
 80056a2:	f7fa fdb5 	bl	8000210 <__aeabi_dsub>
 80056a6:	9a05      	ldr	r2, [sp, #20]
 80056a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	2b31      	cmp	r3, #49	@ 0x31
 80056b0:	dc20      	bgt.n	80056f4 <__ieee754_rem_pio2+0x274>
 80056b2:	e9c4 0100 	strd	r0, r1, [r4]
 80056b6:	46c2      	mov	sl, r8
 80056b8:	46cb      	mov	fp, r9
 80056ba:	e9d4 8900 	ldrd	r8, r9, [r4]
 80056be:	4650      	mov	r0, sl
 80056c0:	4642      	mov	r2, r8
 80056c2:	464b      	mov	r3, r9
 80056c4:	4659      	mov	r1, fp
 80056c6:	f7fa fda3 	bl	8000210 <__aeabi_dsub>
 80056ca:	463b      	mov	r3, r7
 80056cc:	4632      	mov	r2, r6
 80056ce:	f7fa fd9f 	bl	8000210 <__aeabi_dsub>
 80056d2:	9b04      	ldr	r3, [sp, #16]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80056da:	f6bf af0e 	bge.w	80054fa <__ieee754_rem_pio2+0x7a>
 80056de:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80056e2:	6063      	str	r3, [r4, #4]
 80056e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80056e8:	f8c4 8000 	str.w	r8, [r4]
 80056ec:	60a0      	str	r0, [r4, #8]
 80056ee:	60e3      	str	r3, [r4, #12]
 80056f0:	426d      	negs	r5, r5
 80056f2:	e702      	b.n	80054fa <__ieee754_rem_pio2+0x7a>
 80056f4:	a326      	add	r3, pc, #152	@ (adr r3, 8005790 <__ieee754_rem_pio2+0x310>)
 80056f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056fe:	f7fa ff3f 	bl	8000580 <__aeabi_dmul>
 8005702:	4606      	mov	r6, r0
 8005704:	460f      	mov	r7, r1
 8005706:	4602      	mov	r2, r0
 8005708:	460b      	mov	r3, r1
 800570a:	4640      	mov	r0, r8
 800570c:	4649      	mov	r1, r9
 800570e:	f7fa fd7f 	bl	8000210 <__aeabi_dsub>
 8005712:	4602      	mov	r2, r0
 8005714:	460b      	mov	r3, r1
 8005716:	4682      	mov	sl, r0
 8005718:	468b      	mov	fp, r1
 800571a:	4640      	mov	r0, r8
 800571c:	4649      	mov	r1, r9
 800571e:	f7fa fd77 	bl	8000210 <__aeabi_dsub>
 8005722:	4632      	mov	r2, r6
 8005724:	463b      	mov	r3, r7
 8005726:	f7fa fd73 	bl	8000210 <__aeabi_dsub>
 800572a:	a31b      	add	r3, pc, #108	@ (adr r3, 8005798 <__ieee754_rem_pio2+0x318>)
 800572c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005730:	4606      	mov	r6, r0
 8005732:	460f      	mov	r7, r1
 8005734:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005738:	f7fa ff22 	bl	8000580 <__aeabi_dmul>
 800573c:	4632      	mov	r2, r6
 800573e:	463b      	mov	r3, r7
 8005740:	f7fa fd66 	bl	8000210 <__aeabi_dsub>
 8005744:	4606      	mov	r6, r0
 8005746:	460f      	mov	r7, r1
 8005748:	e764      	b.n	8005614 <__ieee754_rem_pio2+0x194>
 800574a:	4b1b      	ldr	r3, [pc, #108]	@ (80057b8 <__ieee754_rem_pio2+0x338>)
 800574c:	4598      	cmp	r8, r3
 800574e:	d935      	bls.n	80057bc <__ieee754_rem_pio2+0x33c>
 8005750:	4632      	mov	r2, r6
 8005752:	463b      	mov	r3, r7
 8005754:	4630      	mov	r0, r6
 8005756:	4639      	mov	r1, r7
 8005758:	f7fa fd5a 	bl	8000210 <__aeabi_dsub>
 800575c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005760:	e9c4 0100 	strd	r0, r1, [r4]
 8005764:	e69e      	b.n	80054a4 <__ieee754_rem_pio2+0x24>
 8005766:	bf00      	nop
 8005768:	54400000 	.word	0x54400000
 800576c:	3ff921fb 	.word	0x3ff921fb
 8005770:	1a626331 	.word	0x1a626331
 8005774:	3dd0b461 	.word	0x3dd0b461
 8005778:	1a600000 	.word	0x1a600000
 800577c:	3dd0b461 	.word	0x3dd0b461
 8005780:	2e037073 	.word	0x2e037073
 8005784:	3ba3198a 	.word	0x3ba3198a
 8005788:	6dc9c883 	.word	0x6dc9c883
 800578c:	3fe45f30 	.word	0x3fe45f30
 8005790:	2e000000 	.word	0x2e000000
 8005794:	3ba3198a 	.word	0x3ba3198a
 8005798:	252049c1 	.word	0x252049c1
 800579c:	397b839a 	.word	0x397b839a
 80057a0:	3fe921fb 	.word	0x3fe921fb
 80057a4:	4002d97b 	.word	0x4002d97b
 80057a8:	3ff921fb 	.word	0x3ff921fb
 80057ac:	413921fb 	.word	0x413921fb
 80057b0:	3fe00000 	.word	0x3fe00000
 80057b4:	08006160 	.word	0x08006160
 80057b8:	7fefffff 	.word	0x7fefffff
 80057bc:	ea4f 5528 	mov.w	r5, r8, asr #20
 80057c0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80057c4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80057c8:	4630      	mov	r0, r6
 80057ca:	460f      	mov	r7, r1
 80057cc:	f7fb f972 	bl	8000ab4 <__aeabi_d2iz>
 80057d0:	f7fa fe6c 	bl	80004ac <__aeabi_i2d>
 80057d4:	4602      	mov	r2, r0
 80057d6:	460b      	mov	r3, r1
 80057d8:	4630      	mov	r0, r6
 80057da:	4639      	mov	r1, r7
 80057dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80057e0:	f7fa fd16 	bl	8000210 <__aeabi_dsub>
 80057e4:	4b22      	ldr	r3, [pc, #136]	@ (8005870 <__ieee754_rem_pio2+0x3f0>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	f7fa feca 	bl	8000580 <__aeabi_dmul>
 80057ec:	460f      	mov	r7, r1
 80057ee:	4606      	mov	r6, r0
 80057f0:	f7fb f960 	bl	8000ab4 <__aeabi_d2iz>
 80057f4:	f7fa fe5a 	bl	80004ac <__aeabi_i2d>
 80057f8:	4602      	mov	r2, r0
 80057fa:	460b      	mov	r3, r1
 80057fc:	4630      	mov	r0, r6
 80057fe:	4639      	mov	r1, r7
 8005800:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005804:	f7fa fd04 	bl	8000210 <__aeabi_dsub>
 8005808:	4b19      	ldr	r3, [pc, #100]	@ (8005870 <__ieee754_rem_pio2+0x3f0>)
 800580a:	2200      	movs	r2, #0
 800580c:	f7fa feb8 	bl	8000580 <__aeabi_dmul>
 8005810:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8005814:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8005818:	f04f 0803 	mov.w	r8, #3
 800581c:	2600      	movs	r6, #0
 800581e:	2700      	movs	r7, #0
 8005820:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005824:	4632      	mov	r2, r6
 8005826:	463b      	mov	r3, r7
 8005828:	46c2      	mov	sl, r8
 800582a:	f108 38ff 	add.w	r8, r8, #4294967295
 800582e:	f7fb f90f 	bl	8000a50 <__aeabi_dcmpeq>
 8005832:	2800      	cmp	r0, #0
 8005834:	d1f4      	bne.n	8005820 <__ieee754_rem_pio2+0x3a0>
 8005836:	4b0f      	ldr	r3, [pc, #60]	@ (8005874 <__ieee754_rem_pio2+0x3f4>)
 8005838:	9301      	str	r3, [sp, #4]
 800583a:	2302      	movs	r3, #2
 800583c:	9300      	str	r3, [sp, #0]
 800583e:	462a      	mov	r2, r5
 8005840:	4653      	mov	r3, sl
 8005842:	4621      	mov	r1, r4
 8005844:	a806      	add	r0, sp, #24
 8005846:	f000 f81f 	bl	8005888 <__kernel_rem_pio2>
 800584a:	9b04      	ldr	r3, [sp, #16]
 800584c:	2b00      	cmp	r3, #0
 800584e:	4605      	mov	r5, r0
 8005850:	f6bf ae53 	bge.w	80054fa <__ieee754_rem_pio2+0x7a>
 8005854:	e9d4 2100 	ldrd	r2, r1, [r4]
 8005858:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800585c:	e9c4 2300 	strd	r2, r3, [r4]
 8005860:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8005864:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005868:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800586c:	e740      	b.n	80056f0 <__ieee754_rem_pio2+0x270>
 800586e:	bf00      	nop
 8005870:	41700000 	.word	0x41700000
 8005874:	080061e0 	.word	0x080061e0

08005878 <fabs>:
 8005878:	ec51 0b10 	vmov	r0, r1, d0
 800587c:	4602      	mov	r2, r0
 800587e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005882:	ec43 2b10 	vmov	d0, r2, r3
 8005886:	4770      	bx	lr

08005888 <__kernel_rem_pio2>:
 8005888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800588c:	ed2d 8b02 	vpush	{d8}
 8005890:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8005894:	f112 0f14 	cmn.w	r2, #20
 8005898:	9306      	str	r3, [sp, #24]
 800589a:	9104      	str	r1, [sp, #16]
 800589c:	4bbe      	ldr	r3, [pc, #760]	@ (8005b98 <__kernel_rem_pio2+0x310>)
 800589e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80058a0:	9008      	str	r0, [sp, #32]
 80058a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80058a6:	9300      	str	r3, [sp, #0]
 80058a8:	9b06      	ldr	r3, [sp, #24]
 80058aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80058ae:	bfa8      	it	ge
 80058b0:	1ed4      	subge	r4, r2, #3
 80058b2:	9305      	str	r3, [sp, #20]
 80058b4:	bfb2      	itee	lt
 80058b6:	2400      	movlt	r4, #0
 80058b8:	2318      	movge	r3, #24
 80058ba:	fb94 f4f3 	sdivge	r4, r4, r3
 80058be:	f06f 0317 	mvn.w	r3, #23
 80058c2:	fb04 3303 	mla	r3, r4, r3, r3
 80058c6:	eb03 0b02 	add.w	fp, r3, r2
 80058ca:	9b00      	ldr	r3, [sp, #0]
 80058cc:	9a05      	ldr	r2, [sp, #20]
 80058ce:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8005b88 <__kernel_rem_pio2+0x300>
 80058d2:	eb03 0802 	add.w	r8, r3, r2
 80058d6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80058d8:	1aa7      	subs	r7, r4, r2
 80058da:	ae20      	add	r6, sp, #128	@ 0x80
 80058dc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80058e0:	2500      	movs	r5, #0
 80058e2:	4545      	cmp	r5, r8
 80058e4:	dd13      	ble.n	800590e <__kernel_rem_pio2+0x86>
 80058e6:	9b06      	ldr	r3, [sp, #24]
 80058e8:	aa20      	add	r2, sp, #128	@ 0x80
 80058ea:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80058ee:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80058f2:	f04f 0800 	mov.w	r8, #0
 80058f6:	9b00      	ldr	r3, [sp, #0]
 80058f8:	4598      	cmp	r8, r3
 80058fa:	dc31      	bgt.n	8005960 <__kernel_rem_pio2+0xd8>
 80058fc:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8005b88 <__kernel_rem_pio2+0x300>
 8005900:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005904:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005908:	462f      	mov	r7, r5
 800590a:	2600      	movs	r6, #0
 800590c:	e01b      	b.n	8005946 <__kernel_rem_pio2+0xbe>
 800590e:	42ef      	cmn	r7, r5
 8005910:	d407      	bmi.n	8005922 <__kernel_rem_pio2+0x9a>
 8005912:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005916:	f7fa fdc9 	bl	80004ac <__aeabi_i2d>
 800591a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800591e:	3501      	adds	r5, #1
 8005920:	e7df      	b.n	80058e2 <__kernel_rem_pio2+0x5a>
 8005922:	ec51 0b18 	vmov	r0, r1, d8
 8005926:	e7f8      	b.n	800591a <__kernel_rem_pio2+0x92>
 8005928:	e9d7 2300 	ldrd	r2, r3, [r7]
 800592c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005930:	f7fa fe26 	bl	8000580 <__aeabi_dmul>
 8005934:	4602      	mov	r2, r0
 8005936:	460b      	mov	r3, r1
 8005938:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800593c:	f7fa fc6a 	bl	8000214 <__adddf3>
 8005940:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005944:	3601      	adds	r6, #1
 8005946:	9b05      	ldr	r3, [sp, #20]
 8005948:	429e      	cmp	r6, r3
 800594a:	f1a7 0708 	sub.w	r7, r7, #8
 800594e:	ddeb      	ble.n	8005928 <__kernel_rem_pio2+0xa0>
 8005950:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005954:	f108 0801 	add.w	r8, r8, #1
 8005958:	ecaa 7b02 	vstmia	sl!, {d7}
 800595c:	3508      	adds	r5, #8
 800595e:	e7ca      	b.n	80058f6 <__kernel_rem_pio2+0x6e>
 8005960:	9b00      	ldr	r3, [sp, #0]
 8005962:	f8dd 8000 	ldr.w	r8, [sp]
 8005966:	aa0c      	add	r2, sp, #48	@ 0x30
 8005968:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800596c:	930a      	str	r3, [sp, #40]	@ 0x28
 800596e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8005970:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005974:	9309      	str	r3, [sp, #36]	@ 0x24
 8005976:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800597a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800597c:	ab98      	add	r3, sp, #608	@ 0x260
 800597e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005982:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8005986:	ed8d 7b02 	vstr	d7, [sp, #8]
 800598a:	ac0c      	add	r4, sp, #48	@ 0x30
 800598c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800598e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8005992:	46a1      	mov	r9, r4
 8005994:	46c2      	mov	sl, r8
 8005996:	f1ba 0f00 	cmp.w	sl, #0
 800599a:	f1a5 0508 	sub.w	r5, r5, #8
 800599e:	dc77      	bgt.n	8005a90 <__kernel_rem_pio2+0x208>
 80059a0:	4658      	mov	r0, fp
 80059a2:	ed9d 0b02 	vldr	d0, [sp, #8]
 80059a6:	f000 fac7 	bl	8005f38 <scalbn>
 80059aa:	ec57 6b10 	vmov	r6, r7, d0
 80059ae:	2200      	movs	r2, #0
 80059b0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80059b4:	4630      	mov	r0, r6
 80059b6:	4639      	mov	r1, r7
 80059b8:	f7fa fde2 	bl	8000580 <__aeabi_dmul>
 80059bc:	ec41 0b10 	vmov	d0, r0, r1
 80059c0:	f000 fb3a 	bl	8006038 <floor>
 80059c4:	4b75      	ldr	r3, [pc, #468]	@ (8005b9c <__kernel_rem_pio2+0x314>)
 80059c6:	ec51 0b10 	vmov	r0, r1, d0
 80059ca:	2200      	movs	r2, #0
 80059cc:	f7fa fdd8 	bl	8000580 <__aeabi_dmul>
 80059d0:	4602      	mov	r2, r0
 80059d2:	460b      	mov	r3, r1
 80059d4:	4630      	mov	r0, r6
 80059d6:	4639      	mov	r1, r7
 80059d8:	f7fa fc1a 	bl	8000210 <__aeabi_dsub>
 80059dc:	460f      	mov	r7, r1
 80059de:	4606      	mov	r6, r0
 80059e0:	f7fb f868 	bl	8000ab4 <__aeabi_d2iz>
 80059e4:	9002      	str	r0, [sp, #8]
 80059e6:	f7fa fd61 	bl	80004ac <__aeabi_i2d>
 80059ea:	4602      	mov	r2, r0
 80059ec:	460b      	mov	r3, r1
 80059ee:	4630      	mov	r0, r6
 80059f0:	4639      	mov	r1, r7
 80059f2:	f7fa fc0d 	bl	8000210 <__aeabi_dsub>
 80059f6:	f1bb 0f00 	cmp.w	fp, #0
 80059fa:	4606      	mov	r6, r0
 80059fc:	460f      	mov	r7, r1
 80059fe:	dd6c      	ble.n	8005ada <__kernel_rem_pio2+0x252>
 8005a00:	f108 31ff 	add.w	r1, r8, #4294967295
 8005a04:	ab0c      	add	r3, sp, #48	@ 0x30
 8005a06:	9d02      	ldr	r5, [sp, #8]
 8005a08:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005a0c:	f1cb 0018 	rsb	r0, fp, #24
 8005a10:	fa43 f200 	asr.w	r2, r3, r0
 8005a14:	4415      	add	r5, r2
 8005a16:	4082      	lsls	r2, r0
 8005a18:	1a9b      	subs	r3, r3, r2
 8005a1a:	aa0c      	add	r2, sp, #48	@ 0x30
 8005a1c:	9502      	str	r5, [sp, #8]
 8005a1e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8005a22:	f1cb 0217 	rsb	r2, fp, #23
 8005a26:	fa43 f902 	asr.w	r9, r3, r2
 8005a2a:	f1b9 0f00 	cmp.w	r9, #0
 8005a2e:	dd64      	ble.n	8005afa <__kernel_rem_pio2+0x272>
 8005a30:	9b02      	ldr	r3, [sp, #8]
 8005a32:	2200      	movs	r2, #0
 8005a34:	3301      	adds	r3, #1
 8005a36:	9302      	str	r3, [sp, #8]
 8005a38:	4615      	mov	r5, r2
 8005a3a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8005a3e:	4590      	cmp	r8, r2
 8005a40:	f300 80b8 	bgt.w	8005bb4 <__kernel_rem_pio2+0x32c>
 8005a44:	f1bb 0f00 	cmp.w	fp, #0
 8005a48:	dd07      	ble.n	8005a5a <__kernel_rem_pio2+0x1d2>
 8005a4a:	f1bb 0f01 	cmp.w	fp, #1
 8005a4e:	f000 80bf 	beq.w	8005bd0 <__kernel_rem_pio2+0x348>
 8005a52:	f1bb 0f02 	cmp.w	fp, #2
 8005a56:	f000 80c6 	beq.w	8005be6 <__kernel_rem_pio2+0x35e>
 8005a5a:	f1b9 0f02 	cmp.w	r9, #2
 8005a5e:	d14c      	bne.n	8005afa <__kernel_rem_pio2+0x272>
 8005a60:	4632      	mov	r2, r6
 8005a62:	463b      	mov	r3, r7
 8005a64:	494e      	ldr	r1, [pc, #312]	@ (8005ba0 <__kernel_rem_pio2+0x318>)
 8005a66:	2000      	movs	r0, #0
 8005a68:	f7fa fbd2 	bl	8000210 <__aeabi_dsub>
 8005a6c:	4606      	mov	r6, r0
 8005a6e:	460f      	mov	r7, r1
 8005a70:	2d00      	cmp	r5, #0
 8005a72:	d042      	beq.n	8005afa <__kernel_rem_pio2+0x272>
 8005a74:	4658      	mov	r0, fp
 8005a76:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8005b90 <__kernel_rem_pio2+0x308>
 8005a7a:	f000 fa5d 	bl	8005f38 <scalbn>
 8005a7e:	4630      	mov	r0, r6
 8005a80:	4639      	mov	r1, r7
 8005a82:	ec53 2b10 	vmov	r2, r3, d0
 8005a86:	f7fa fbc3 	bl	8000210 <__aeabi_dsub>
 8005a8a:	4606      	mov	r6, r0
 8005a8c:	460f      	mov	r7, r1
 8005a8e:	e034      	b.n	8005afa <__kernel_rem_pio2+0x272>
 8005a90:	4b44      	ldr	r3, [pc, #272]	@ (8005ba4 <__kernel_rem_pio2+0x31c>)
 8005a92:	2200      	movs	r2, #0
 8005a94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a98:	f7fa fd72 	bl	8000580 <__aeabi_dmul>
 8005a9c:	f7fb f80a 	bl	8000ab4 <__aeabi_d2iz>
 8005aa0:	f7fa fd04 	bl	80004ac <__aeabi_i2d>
 8005aa4:	4b40      	ldr	r3, [pc, #256]	@ (8005ba8 <__kernel_rem_pio2+0x320>)
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	4606      	mov	r6, r0
 8005aaa:	460f      	mov	r7, r1
 8005aac:	f7fa fd68 	bl	8000580 <__aeabi_dmul>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ab8:	f7fa fbaa 	bl	8000210 <__aeabi_dsub>
 8005abc:	f7fa fffa 	bl	8000ab4 <__aeabi_d2iz>
 8005ac0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005ac4:	f849 0b04 	str.w	r0, [r9], #4
 8005ac8:	4639      	mov	r1, r7
 8005aca:	4630      	mov	r0, r6
 8005acc:	f7fa fba2 	bl	8000214 <__adddf3>
 8005ad0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ad4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ad8:	e75d      	b.n	8005996 <__kernel_rem_pio2+0x10e>
 8005ada:	d107      	bne.n	8005aec <__kernel_rem_pio2+0x264>
 8005adc:	f108 33ff 	add.w	r3, r8, #4294967295
 8005ae0:	aa0c      	add	r2, sp, #48	@ 0x30
 8005ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ae6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8005aea:	e79e      	b.n	8005a2a <__kernel_rem_pio2+0x1a2>
 8005aec:	4b2f      	ldr	r3, [pc, #188]	@ (8005bac <__kernel_rem_pio2+0x324>)
 8005aee:	2200      	movs	r2, #0
 8005af0:	f7fa ffcc 	bl	8000a8c <__aeabi_dcmpge>
 8005af4:	2800      	cmp	r0, #0
 8005af6:	d143      	bne.n	8005b80 <__kernel_rem_pio2+0x2f8>
 8005af8:	4681      	mov	r9, r0
 8005afa:	2200      	movs	r2, #0
 8005afc:	2300      	movs	r3, #0
 8005afe:	4630      	mov	r0, r6
 8005b00:	4639      	mov	r1, r7
 8005b02:	f7fa ffa5 	bl	8000a50 <__aeabi_dcmpeq>
 8005b06:	2800      	cmp	r0, #0
 8005b08:	f000 80bf 	beq.w	8005c8a <__kernel_rem_pio2+0x402>
 8005b0c:	f108 33ff 	add.w	r3, r8, #4294967295
 8005b10:	2200      	movs	r2, #0
 8005b12:	9900      	ldr	r1, [sp, #0]
 8005b14:	428b      	cmp	r3, r1
 8005b16:	da6e      	bge.n	8005bf6 <__kernel_rem_pio2+0x36e>
 8005b18:	2a00      	cmp	r2, #0
 8005b1a:	f000 8089 	beq.w	8005c30 <__kernel_rem_pio2+0x3a8>
 8005b1e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005b22:	ab0c      	add	r3, sp, #48	@ 0x30
 8005b24:	f1ab 0b18 	sub.w	fp, fp, #24
 8005b28:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d0f6      	beq.n	8005b1e <__kernel_rem_pio2+0x296>
 8005b30:	4658      	mov	r0, fp
 8005b32:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8005b90 <__kernel_rem_pio2+0x308>
 8005b36:	f000 f9ff 	bl	8005f38 <scalbn>
 8005b3a:	f108 0301 	add.w	r3, r8, #1
 8005b3e:	00da      	lsls	r2, r3, #3
 8005b40:	9205      	str	r2, [sp, #20]
 8005b42:	ec55 4b10 	vmov	r4, r5, d0
 8005b46:	aa70      	add	r2, sp, #448	@ 0x1c0
 8005b48:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8005ba4 <__kernel_rem_pio2+0x31c>
 8005b4c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8005b50:	4646      	mov	r6, r8
 8005b52:	f04f 0a00 	mov.w	sl, #0
 8005b56:	2e00      	cmp	r6, #0
 8005b58:	f280 80cf 	bge.w	8005cfa <__kernel_rem_pio2+0x472>
 8005b5c:	4644      	mov	r4, r8
 8005b5e:	2c00      	cmp	r4, #0
 8005b60:	f2c0 80fd 	blt.w	8005d5e <__kernel_rem_pio2+0x4d6>
 8005b64:	4b12      	ldr	r3, [pc, #72]	@ (8005bb0 <__kernel_rem_pio2+0x328>)
 8005b66:	461f      	mov	r7, r3
 8005b68:	ab70      	add	r3, sp, #448	@ 0x1c0
 8005b6a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005b6e:	9306      	str	r3, [sp, #24]
 8005b70:	f04f 0a00 	mov.w	sl, #0
 8005b74:	f04f 0b00 	mov.w	fp, #0
 8005b78:	2600      	movs	r6, #0
 8005b7a:	eba8 0504 	sub.w	r5, r8, r4
 8005b7e:	e0e2      	b.n	8005d46 <__kernel_rem_pio2+0x4be>
 8005b80:	f04f 0902 	mov.w	r9, #2
 8005b84:	e754      	b.n	8005a30 <__kernel_rem_pio2+0x1a8>
 8005b86:	bf00      	nop
	...
 8005b94:	3ff00000 	.word	0x3ff00000
 8005b98:	08006328 	.word	0x08006328
 8005b9c:	40200000 	.word	0x40200000
 8005ba0:	3ff00000 	.word	0x3ff00000
 8005ba4:	3e700000 	.word	0x3e700000
 8005ba8:	41700000 	.word	0x41700000
 8005bac:	3fe00000 	.word	0x3fe00000
 8005bb0:	080062e8 	.word	0x080062e8
 8005bb4:	f854 3b04 	ldr.w	r3, [r4], #4
 8005bb8:	b945      	cbnz	r5, 8005bcc <__kernel_rem_pio2+0x344>
 8005bba:	b123      	cbz	r3, 8005bc6 <__kernel_rem_pio2+0x33e>
 8005bbc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8005bc0:	f844 3c04 	str.w	r3, [r4, #-4]
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	3201      	adds	r2, #1
 8005bc8:	461d      	mov	r5, r3
 8005bca:	e738      	b.n	8005a3e <__kernel_rem_pio2+0x1b6>
 8005bcc:	1acb      	subs	r3, r1, r3
 8005bce:	e7f7      	b.n	8005bc0 <__kernel_rem_pio2+0x338>
 8005bd0:	f108 32ff 	add.w	r2, r8, #4294967295
 8005bd4:	ab0c      	add	r3, sp, #48	@ 0x30
 8005bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bda:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005bde:	a90c      	add	r1, sp, #48	@ 0x30
 8005be0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005be4:	e739      	b.n	8005a5a <__kernel_rem_pio2+0x1d2>
 8005be6:	f108 32ff 	add.w	r2, r8, #4294967295
 8005bea:	ab0c      	add	r3, sp, #48	@ 0x30
 8005bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bf0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005bf4:	e7f3      	b.n	8005bde <__kernel_rem_pio2+0x356>
 8005bf6:	a90c      	add	r1, sp, #48	@ 0x30
 8005bf8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	e787      	b.n	8005b12 <__kernel_rem_pio2+0x28a>
 8005c02:	3401      	adds	r4, #1
 8005c04:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005c08:	2a00      	cmp	r2, #0
 8005c0a:	d0fa      	beq.n	8005c02 <__kernel_rem_pio2+0x37a>
 8005c0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c0e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005c12:	eb0d 0503 	add.w	r5, sp, r3
 8005c16:	9b06      	ldr	r3, [sp, #24]
 8005c18:	aa20      	add	r2, sp, #128	@ 0x80
 8005c1a:	4443      	add	r3, r8
 8005c1c:	f108 0701 	add.w	r7, r8, #1
 8005c20:	3d98      	subs	r5, #152	@ 0x98
 8005c22:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8005c26:	4444      	add	r4, r8
 8005c28:	42bc      	cmp	r4, r7
 8005c2a:	da04      	bge.n	8005c36 <__kernel_rem_pio2+0x3ae>
 8005c2c:	46a0      	mov	r8, r4
 8005c2e:	e6a2      	b.n	8005976 <__kernel_rem_pio2+0xee>
 8005c30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c32:	2401      	movs	r4, #1
 8005c34:	e7e6      	b.n	8005c04 <__kernel_rem_pio2+0x37c>
 8005c36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c38:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8005c3c:	f7fa fc36 	bl	80004ac <__aeabi_i2d>
 8005c40:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8005f08 <__kernel_rem_pio2+0x680>
 8005c44:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005c48:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005c4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c50:	46b2      	mov	sl, r6
 8005c52:	f04f 0800 	mov.w	r8, #0
 8005c56:	9b05      	ldr	r3, [sp, #20]
 8005c58:	4598      	cmp	r8, r3
 8005c5a:	dd05      	ble.n	8005c68 <__kernel_rem_pio2+0x3e0>
 8005c5c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005c60:	3701      	adds	r7, #1
 8005c62:	eca5 7b02 	vstmia	r5!, {d7}
 8005c66:	e7df      	b.n	8005c28 <__kernel_rem_pio2+0x3a0>
 8005c68:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8005c6c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005c70:	f7fa fc86 	bl	8000580 <__aeabi_dmul>
 8005c74:	4602      	mov	r2, r0
 8005c76:	460b      	mov	r3, r1
 8005c78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c7c:	f7fa faca 	bl	8000214 <__adddf3>
 8005c80:	f108 0801 	add.w	r8, r8, #1
 8005c84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c88:	e7e5      	b.n	8005c56 <__kernel_rem_pio2+0x3ce>
 8005c8a:	f1cb 0000 	rsb	r0, fp, #0
 8005c8e:	ec47 6b10 	vmov	d0, r6, r7
 8005c92:	f000 f951 	bl	8005f38 <scalbn>
 8005c96:	ec55 4b10 	vmov	r4, r5, d0
 8005c9a:	4b9d      	ldr	r3, [pc, #628]	@ (8005f10 <__kernel_rem_pio2+0x688>)
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	4620      	mov	r0, r4
 8005ca0:	4629      	mov	r1, r5
 8005ca2:	f7fa fef3 	bl	8000a8c <__aeabi_dcmpge>
 8005ca6:	b300      	cbz	r0, 8005cea <__kernel_rem_pio2+0x462>
 8005ca8:	4b9a      	ldr	r3, [pc, #616]	@ (8005f14 <__kernel_rem_pio2+0x68c>)
 8005caa:	2200      	movs	r2, #0
 8005cac:	4620      	mov	r0, r4
 8005cae:	4629      	mov	r1, r5
 8005cb0:	f7fa fc66 	bl	8000580 <__aeabi_dmul>
 8005cb4:	f7fa fefe 	bl	8000ab4 <__aeabi_d2iz>
 8005cb8:	4606      	mov	r6, r0
 8005cba:	f7fa fbf7 	bl	80004ac <__aeabi_i2d>
 8005cbe:	4b94      	ldr	r3, [pc, #592]	@ (8005f10 <__kernel_rem_pio2+0x688>)
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f7fa fc5d 	bl	8000580 <__aeabi_dmul>
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	4602      	mov	r2, r0
 8005cca:	4629      	mov	r1, r5
 8005ccc:	4620      	mov	r0, r4
 8005cce:	f7fa fa9f 	bl	8000210 <__aeabi_dsub>
 8005cd2:	f7fa feef 	bl	8000ab4 <__aeabi_d2iz>
 8005cd6:	ab0c      	add	r3, sp, #48	@ 0x30
 8005cd8:	f10b 0b18 	add.w	fp, fp, #24
 8005cdc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8005ce0:	f108 0801 	add.w	r8, r8, #1
 8005ce4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8005ce8:	e722      	b.n	8005b30 <__kernel_rem_pio2+0x2a8>
 8005cea:	4620      	mov	r0, r4
 8005cec:	4629      	mov	r1, r5
 8005cee:	f7fa fee1 	bl	8000ab4 <__aeabi_d2iz>
 8005cf2:	ab0c      	add	r3, sp, #48	@ 0x30
 8005cf4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8005cf8:	e71a      	b.n	8005b30 <__kernel_rem_pio2+0x2a8>
 8005cfa:	ab0c      	add	r3, sp, #48	@ 0x30
 8005cfc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005d00:	f7fa fbd4 	bl	80004ac <__aeabi_i2d>
 8005d04:	4622      	mov	r2, r4
 8005d06:	462b      	mov	r3, r5
 8005d08:	f7fa fc3a 	bl	8000580 <__aeabi_dmul>
 8005d0c:	4652      	mov	r2, sl
 8005d0e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8005d12:	465b      	mov	r3, fp
 8005d14:	4620      	mov	r0, r4
 8005d16:	4629      	mov	r1, r5
 8005d18:	f7fa fc32 	bl	8000580 <__aeabi_dmul>
 8005d1c:	3e01      	subs	r6, #1
 8005d1e:	4604      	mov	r4, r0
 8005d20:	460d      	mov	r5, r1
 8005d22:	e718      	b.n	8005b56 <__kernel_rem_pio2+0x2ce>
 8005d24:	9906      	ldr	r1, [sp, #24]
 8005d26:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8005d2a:	9106      	str	r1, [sp, #24]
 8005d2c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8005d30:	f7fa fc26 	bl	8000580 <__aeabi_dmul>
 8005d34:	4602      	mov	r2, r0
 8005d36:	460b      	mov	r3, r1
 8005d38:	4650      	mov	r0, sl
 8005d3a:	4659      	mov	r1, fp
 8005d3c:	f7fa fa6a 	bl	8000214 <__adddf3>
 8005d40:	3601      	adds	r6, #1
 8005d42:	4682      	mov	sl, r0
 8005d44:	468b      	mov	fp, r1
 8005d46:	9b00      	ldr	r3, [sp, #0]
 8005d48:	429e      	cmp	r6, r3
 8005d4a:	dc01      	bgt.n	8005d50 <__kernel_rem_pio2+0x4c8>
 8005d4c:	42b5      	cmp	r5, r6
 8005d4e:	dae9      	bge.n	8005d24 <__kernel_rem_pio2+0x49c>
 8005d50:	ab48      	add	r3, sp, #288	@ 0x120
 8005d52:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005d56:	e9c5 ab00 	strd	sl, fp, [r5]
 8005d5a:	3c01      	subs	r4, #1
 8005d5c:	e6ff      	b.n	8005b5e <__kernel_rem_pio2+0x2d6>
 8005d5e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	dc0b      	bgt.n	8005d7c <__kernel_rem_pio2+0x4f4>
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	dc39      	bgt.n	8005ddc <__kernel_rem_pio2+0x554>
 8005d68:	d05d      	beq.n	8005e26 <__kernel_rem_pio2+0x59e>
 8005d6a:	9b02      	ldr	r3, [sp, #8]
 8005d6c:	f003 0007 	and.w	r0, r3, #7
 8005d70:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8005d74:	ecbd 8b02 	vpop	{d8}
 8005d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d7c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8005d7e:	2b03      	cmp	r3, #3
 8005d80:	d1f3      	bne.n	8005d6a <__kernel_rem_pio2+0x4e2>
 8005d82:	9b05      	ldr	r3, [sp, #20]
 8005d84:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005d88:	eb0d 0403 	add.w	r4, sp, r3
 8005d8c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8005d90:	4625      	mov	r5, r4
 8005d92:	46c2      	mov	sl, r8
 8005d94:	f1ba 0f00 	cmp.w	sl, #0
 8005d98:	f1a5 0508 	sub.w	r5, r5, #8
 8005d9c:	dc6b      	bgt.n	8005e76 <__kernel_rem_pio2+0x5ee>
 8005d9e:	4645      	mov	r5, r8
 8005da0:	2d01      	cmp	r5, #1
 8005da2:	f1a4 0408 	sub.w	r4, r4, #8
 8005da6:	f300 8087 	bgt.w	8005eb8 <__kernel_rem_pio2+0x630>
 8005daa:	9c05      	ldr	r4, [sp, #20]
 8005dac:	ab48      	add	r3, sp, #288	@ 0x120
 8005dae:	441c      	add	r4, r3
 8005db0:	2000      	movs	r0, #0
 8005db2:	2100      	movs	r1, #0
 8005db4:	f1b8 0f01 	cmp.w	r8, #1
 8005db8:	f300 809c 	bgt.w	8005ef4 <__kernel_rem_pio2+0x66c>
 8005dbc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8005dc0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8005dc4:	f1b9 0f00 	cmp.w	r9, #0
 8005dc8:	f040 80a6 	bne.w	8005f18 <__kernel_rem_pio2+0x690>
 8005dcc:	9b04      	ldr	r3, [sp, #16]
 8005dce:	e9c3 7800 	strd	r7, r8, [r3]
 8005dd2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005dd6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005dda:	e7c6      	b.n	8005d6a <__kernel_rem_pio2+0x4e2>
 8005ddc:	9d05      	ldr	r5, [sp, #20]
 8005dde:	ab48      	add	r3, sp, #288	@ 0x120
 8005de0:	441d      	add	r5, r3
 8005de2:	4644      	mov	r4, r8
 8005de4:	2000      	movs	r0, #0
 8005de6:	2100      	movs	r1, #0
 8005de8:	2c00      	cmp	r4, #0
 8005dea:	da35      	bge.n	8005e58 <__kernel_rem_pio2+0x5d0>
 8005dec:	f1b9 0f00 	cmp.w	r9, #0
 8005df0:	d038      	beq.n	8005e64 <__kernel_rem_pio2+0x5dc>
 8005df2:	4602      	mov	r2, r0
 8005df4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005df8:	9c04      	ldr	r4, [sp, #16]
 8005dfa:	e9c4 2300 	strd	r2, r3, [r4]
 8005dfe:	4602      	mov	r2, r0
 8005e00:	460b      	mov	r3, r1
 8005e02:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8005e06:	f7fa fa03 	bl	8000210 <__aeabi_dsub>
 8005e0a:	ad4a      	add	r5, sp, #296	@ 0x128
 8005e0c:	2401      	movs	r4, #1
 8005e0e:	45a0      	cmp	r8, r4
 8005e10:	da2b      	bge.n	8005e6a <__kernel_rem_pio2+0x5e2>
 8005e12:	f1b9 0f00 	cmp.w	r9, #0
 8005e16:	d002      	beq.n	8005e1e <__kernel_rem_pio2+0x596>
 8005e18:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	9b04      	ldr	r3, [sp, #16]
 8005e20:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005e24:	e7a1      	b.n	8005d6a <__kernel_rem_pio2+0x4e2>
 8005e26:	9c05      	ldr	r4, [sp, #20]
 8005e28:	ab48      	add	r3, sp, #288	@ 0x120
 8005e2a:	441c      	add	r4, r3
 8005e2c:	2000      	movs	r0, #0
 8005e2e:	2100      	movs	r1, #0
 8005e30:	f1b8 0f00 	cmp.w	r8, #0
 8005e34:	da09      	bge.n	8005e4a <__kernel_rem_pio2+0x5c2>
 8005e36:	f1b9 0f00 	cmp.w	r9, #0
 8005e3a:	d002      	beq.n	8005e42 <__kernel_rem_pio2+0x5ba>
 8005e3c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005e40:	4619      	mov	r1, r3
 8005e42:	9b04      	ldr	r3, [sp, #16]
 8005e44:	e9c3 0100 	strd	r0, r1, [r3]
 8005e48:	e78f      	b.n	8005d6a <__kernel_rem_pio2+0x4e2>
 8005e4a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005e4e:	f7fa f9e1 	bl	8000214 <__adddf3>
 8005e52:	f108 38ff 	add.w	r8, r8, #4294967295
 8005e56:	e7eb      	b.n	8005e30 <__kernel_rem_pio2+0x5a8>
 8005e58:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8005e5c:	f7fa f9da 	bl	8000214 <__adddf3>
 8005e60:	3c01      	subs	r4, #1
 8005e62:	e7c1      	b.n	8005de8 <__kernel_rem_pio2+0x560>
 8005e64:	4602      	mov	r2, r0
 8005e66:	460b      	mov	r3, r1
 8005e68:	e7c6      	b.n	8005df8 <__kernel_rem_pio2+0x570>
 8005e6a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8005e6e:	f7fa f9d1 	bl	8000214 <__adddf3>
 8005e72:	3401      	adds	r4, #1
 8005e74:	e7cb      	b.n	8005e0e <__kernel_rem_pio2+0x586>
 8005e76:	ed95 7b00 	vldr	d7, [r5]
 8005e7a:	ed8d 7b00 	vstr	d7, [sp]
 8005e7e:	ed95 7b02 	vldr	d7, [r5, #8]
 8005e82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e86:	ec53 2b17 	vmov	r2, r3, d7
 8005e8a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005e8e:	f7fa f9c1 	bl	8000214 <__adddf3>
 8005e92:	4602      	mov	r2, r0
 8005e94:	460b      	mov	r3, r1
 8005e96:	4606      	mov	r6, r0
 8005e98:	460f      	mov	r7, r1
 8005e9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e9e:	f7fa f9b7 	bl	8000210 <__aeabi_dsub>
 8005ea2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ea6:	f7fa f9b5 	bl	8000214 <__adddf3>
 8005eaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005eae:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8005eb2:	e9c5 6700 	strd	r6, r7, [r5]
 8005eb6:	e76d      	b.n	8005d94 <__kernel_rem_pio2+0x50c>
 8005eb8:	ed94 7b00 	vldr	d7, [r4]
 8005ebc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8005ec0:	ec51 0b17 	vmov	r0, r1, d7
 8005ec4:	4652      	mov	r2, sl
 8005ec6:	465b      	mov	r3, fp
 8005ec8:	ed8d 7b00 	vstr	d7, [sp]
 8005ecc:	f7fa f9a2 	bl	8000214 <__adddf3>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	4606      	mov	r6, r0
 8005ed6:	460f      	mov	r7, r1
 8005ed8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005edc:	f7fa f998 	bl	8000210 <__aeabi_dsub>
 8005ee0:	4652      	mov	r2, sl
 8005ee2:	465b      	mov	r3, fp
 8005ee4:	f7fa f996 	bl	8000214 <__adddf3>
 8005ee8:	3d01      	subs	r5, #1
 8005eea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005eee:	e9c4 6700 	strd	r6, r7, [r4]
 8005ef2:	e755      	b.n	8005da0 <__kernel_rem_pio2+0x518>
 8005ef4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005ef8:	f7fa f98c 	bl	8000214 <__adddf3>
 8005efc:	f108 38ff 	add.w	r8, r8, #4294967295
 8005f00:	e758      	b.n	8005db4 <__kernel_rem_pio2+0x52c>
 8005f02:	bf00      	nop
 8005f04:	f3af 8000 	nop.w
	...
 8005f10:	41700000 	.word	0x41700000
 8005f14:	3e700000 	.word	0x3e700000
 8005f18:	9b04      	ldr	r3, [sp, #16]
 8005f1a:	9a04      	ldr	r2, [sp, #16]
 8005f1c:	601f      	str	r7, [r3, #0]
 8005f1e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8005f22:	605c      	str	r4, [r3, #4]
 8005f24:	609d      	str	r5, [r3, #8]
 8005f26:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005f2a:	60d3      	str	r3, [r2, #12]
 8005f2c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005f30:	6110      	str	r0, [r2, #16]
 8005f32:	6153      	str	r3, [r2, #20]
 8005f34:	e719      	b.n	8005d6a <__kernel_rem_pio2+0x4e2>
 8005f36:	bf00      	nop

08005f38 <scalbn>:
 8005f38:	b570      	push	{r4, r5, r6, lr}
 8005f3a:	ec55 4b10 	vmov	r4, r5, d0
 8005f3e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8005f42:	4606      	mov	r6, r0
 8005f44:	462b      	mov	r3, r5
 8005f46:	b991      	cbnz	r1, 8005f6e <scalbn+0x36>
 8005f48:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8005f4c:	4323      	orrs	r3, r4
 8005f4e:	d03d      	beq.n	8005fcc <scalbn+0x94>
 8005f50:	4b35      	ldr	r3, [pc, #212]	@ (8006028 <scalbn+0xf0>)
 8005f52:	4620      	mov	r0, r4
 8005f54:	4629      	mov	r1, r5
 8005f56:	2200      	movs	r2, #0
 8005f58:	f7fa fb12 	bl	8000580 <__aeabi_dmul>
 8005f5c:	4b33      	ldr	r3, [pc, #204]	@ (800602c <scalbn+0xf4>)
 8005f5e:	429e      	cmp	r6, r3
 8005f60:	4604      	mov	r4, r0
 8005f62:	460d      	mov	r5, r1
 8005f64:	da0f      	bge.n	8005f86 <scalbn+0x4e>
 8005f66:	a328      	add	r3, pc, #160	@ (adr r3, 8006008 <scalbn+0xd0>)
 8005f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6c:	e01e      	b.n	8005fac <scalbn+0x74>
 8005f6e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8005f72:	4291      	cmp	r1, r2
 8005f74:	d10b      	bne.n	8005f8e <scalbn+0x56>
 8005f76:	4622      	mov	r2, r4
 8005f78:	4620      	mov	r0, r4
 8005f7a:	4629      	mov	r1, r5
 8005f7c:	f7fa f94a 	bl	8000214 <__adddf3>
 8005f80:	4604      	mov	r4, r0
 8005f82:	460d      	mov	r5, r1
 8005f84:	e022      	b.n	8005fcc <scalbn+0x94>
 8005f86:	460b      	mov	r3, r1
 8005f88:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005f8c:	3936      	subs	r1, #54	@ 0x36
 8005f8e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8005f92:	4296      	cmp	r6, r2
 8005f94:	dd0d      	ble.n	8005fb2 <scalbn+0x7a>
 8005f96:	2d00      	cmp	r5, #0
 8005f98:	a11d      	add	r1, pc, #116	@ (adr r1, 8006010 <scalbn+0xd8>)
 8005f9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f9e:	da02      	bge.n	8005fa6 <scalbn+0x6e>
 8005fa0:	a11d      	add	r1, pc, #116	@ (adr r1, 8006018 <scalbn+0xe0>)
 8005fa2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fa6:	a31a      	add	r3, pc, #104	@ (adr r3, 8006010 <scalbn+0xd8>)
 8005fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fac:	f7fa fae8 	bl	8000580 <__aeabi_dmul>
 8005fb0:	e7e6      	b.n	8005f80 <scalbn+0x48>
 8005fb2:	1872      	adds	r2, r6, r1
 8005fb4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8005fb8:	428a      	cmp	r2, r1
 8005fba:	dcec      	bgt.n	8005f96 <scalbn+0x5e>
 8005fbc:	2a00      	cmp	r2, #0
 8005fbe:	dd08      	ble.n	8005fd2 <scalbn+0x9a>
 8005fc0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005fc4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005fc8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005fcc:	ec45 4b10 	vmov	d0, r4, r5
 8005fd0:	bd70      	pop	{r4, r5, r6, pc}
 8005fd2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8005fd6:	da08      	bge.n	8005fea <scalbn+0xb2>
 8005fd8:	2d00      	cmp	r5, #0
 8005fda:	a10b      	add	r1, pc, #44	@ (adr r1, 8006008 <scalbn+0xd0>)
 8005fdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fe0:	dac1      	bge.n	8005f66 <scalbn+0x2e>
 8005fe2:	a10f      	add	r1, pc, #60	@ (adr r1, 8006020 <scalbn+0xe8>)
 8005fe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fe8:	e7bd      	b.n	8005f66 <scalbn+0x2e>
 8005fea:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005fee:	3236      	adds	r2, #54	@ 0x36
 8005ff0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005ff4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8006030 <scalbn+0xf8>)
 8005ffc:	4629      	mov	r1, r5
 8005ffe:	2200      	movs	r2, #0
 8006000:	e7d4      	b.n	8005fac <scalbn+0x74>
 8006002:	bf00      	nop
 8006004:	f3af 8000 	nop.w
 8006008:	c2f8f359 	.word	0xc2f8f359
 800600c:	01a56e1f 	.word	0x01a56e1f
 8006010:	8800759c 	.word	0x8800759c
 8006014:	7e37e43c 	.word	0x7e37e43c
 8006018:	8800759c 	.word	0x8800759c
 800601c:	fe37e43c 	.word	0xfe37e43c
 8006020:	c2f8f359 	.word	0xc2f8f359
 8006024:	81a56e1f 	.word	0x81a56e1f
 8006028:	43500000 	.word	0x43500000
 800602c:	ffff3cb0 	.word	0xffff3cb0
 8006030:	3c900000 	.word	0x3c900000
 8006034:	00000000 	.word	0x00000000

08006038 <floor>:
 8006038:	ec51 0b10 	vmov	r0, r1, d0
 800603c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006044:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8006048:	2e13      	cmp	r6, #19
 800604a:	460c      	mov	r4, r1
 800604c:	4605      	mov	r5, r0
 800604e:	4680      	mov	r8, r0
 8006050:	dc34      	bgt.n	80060bc <floor+0x84>
 8006052:	2e00      	cmp	r6, #0
 8006054:	da17      	bge.n	8006086 <floor+0x4e>
 8006056:	a332      	add	r3, pc, #200	@ (adr r3, 8006120 <floor+0xe8>)
 8006058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605c:	f7fa f8da 	bl	8000214 <__adddf3>
 8006060:	2200      	movs	r2, #0
 8006062:	2300      	movs	r3, #0
 8006064:	f7fa fd1c 	bl	8000aa0 <__aeabi_dcmpgt>
 8006068:	b150      	cbz	r0, 8006080 <floor+0x48>
 800606a:	2c00      	cmp	r4, #0
 800606c:	da55      	bge.n	800611a <floor+0xe2>
 800606e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8006072:	432c      	orrs	r4, r5
 8006074:	2500      	movs	r5, #0
 8006076:	42ac      	cmp	r4, r5
 8006078:	4c2b      	ldr	r4, [pc, #172]	@ (8006128 <floor+0xf0>)
 800607a:	bf08      	it	eq
 800607c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8006080:	4621      	mov	r1, r4
 8006082:	4628      	mov	r0, r5
 8006084:	e023      	b.n	80060ce <floor+0x96>
 8006086:	4f29      	ldr	r7, [pc, #164]	@ (800612c <floor+0xf4>)
 8006088:	4137      	asrs	r7, r6
 800608a:	ea01 0307 	and.w	r3, r1, r7
 800608e:	4303      	orrs	r3, r0
 8006090:	d01d      	beq.n	80060ce <floor+0x96>
 8006092:	a323      	add	r3, pc, #140	@ (adr r3, 8006120 <floor+0xe8>)
 8006094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006098:	f7fa f8bc 	bl	8000214 <__adddf3>
 800609c:	2200      	movs	r2, #0
 800609e:	2300      	movs	r3, #0
 80060a0:	f7fa fcfe 	bl	8000aa0 <__aeabi_dcmpgt>
 80060a4:	2800      	cmp	r0, #0
 80060a6:	d0eb      	beq.n	8006080 <floor+0x48>
 80060a8:	2c00      	cmp	r4, #0
 80060aa:	bfbe      	ittt	lt
 80060ac:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80060b0:	4133      	asrlt	r3, r6
 80060b2:	18e4      	addlt	r4, r4, r3
 80060b4:	ea24 0407 	bic.w	r4, r4, r7
 80060b8:	2500      	movs	r5, #0
 80060ba:	e7e1      	b.n	8006080 <floor+0x48>
 80060bc:	2e33      	cmp	r6, #51	@ 0x33
 80060be:	dd0a      	ble.n	80060d6 <floor+0x9e>
 80060c0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80060c4:	d103      	bne.n	80060ce <floor+0x96>
 80060c6:	4602      	mov	r2, r0
 80060c8:	460b      	mov	r3, r1
 80060ca:	f7fa f8a3 	bl	8000214 <__adddf3>
 80060ce:	ec41 0b10 	vmov	d0, r0, r1
 80060d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060d6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80060da:	f04f 37ff 	mov.w	r7, #4294967295
 80060de:	40df      	lsrs	r7, r3
 80060e0:	4207      	tst	r7, r0
 80060e2:	d0f4      	beq.n	80060ce <floor+0x96>
 80060e4:	a30e      	add	r3, pc, #56	@ (adr r3, 8006120 <floor+0xe8>)
 80060e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ea:	f7fa f893 	bl	8000214 <__adddf3>
 80060ee:	2200      	movs	r2, #0
 80060f0:	2300      	movs	r3, #0
 80060f2:	f7fa fcd5 	bl	8000aa0 <__aeabi_dcmpgt>
 80060f6:	2800      	cmp	r0, #0
 80060f8:	d0c2      	beq.n	8006080 <floor+0x48>
 80060fa:	2c00      	cmp	r4, #0
 80060fc:	da0a      	bge.n	8006114 <floor+0xdc>
 80060fe:	2e14      	cmp	r6, #20
 8006100:	d101      	bne.n	8006106 <floor+0xce>
 8006102:	3401      	adds	r4, #1
 8006104:	e006      	b.n	8006114 <floor+0xdc>
 8006106:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800610a:	2301      	movs	r3, #1
 800610c:	40b3      	lsls	r3, r6
 800610e:	441d      	add	r5, r3
 8006110:	4545      	cmp	r5, r8
 8006112:	d3f6      	bcc.n	8006102 <floor+0xca>
 8006114:	ea25 0507 	bic.w	r5, r5, r7
 8006118:	e7b2      	b.n	8006080 <floor+0x48>
 800611a:	2500      	movs	r5, #0
 800611c:	462c      	mov	r4, r5
 800611e:	e7af      	b.n	8006080 <floor+0x48>
 8006120:	8800759c 	.word	0x8800759c
 8006124:	7e37e43c 	.word	0x7e37e43c
 8006128:	bff00000 	.word	0xbff00000
 800612c:	000fffff 	.word	0x000fffff

08006130 <_init>:
 8006130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006132:	bf00      	nop
 8006134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006136:	bc08      	pop	{r3}
 8006138:	469e      	mov	lr, r3
 800613a:	4770      	bx	lr

0800613c <_fini>:
 800613c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800613e:	bf00      	nop
 8006140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006142:	bc08      	pop	{r3}
 8006144:	469e      	mov	lr, r3
 8006146:	4770      	bx	lr
